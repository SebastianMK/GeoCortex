<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Geocortex.EssentialsSilverlightViewer.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.BookmarkCommands">
            <summary>
            Collection of bookmark commands
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.BookmarkCommands.AddBookmark">
            <summary>
            Gets the command for adding a bookmark
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.BookmarkCommands.RemoveBookmark">
            <summary>
            Gets the command for removing a bookmark
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ChartingCommands">
            <summary>
            Commands performed by the Charting Module
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ChartingCommands.SetCollectionOfInterest">
            <summary>
            Gets the command for setting the current collection of interest that will be used to generate data
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ChartingCommands.ShowChartingView">
            <summary>
            Gets the command for displaying the Charting panel
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ChartingCommands.DisplayChartById">
            <summary>
            Gets the command for displaying a chart from the provided chart ID
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ChartingCommands.RemoveChartById">
            <summary>
            Gets the command for removing a chart from the chart panel with the provided chart ID
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ChartingCommands.ClearCharts">
            <summary>
            Gets the command for clearing all charts from the Charting panel
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.AlternativeExceptionCondition">
            <summary>
            An instance of this type is returned from the 
            <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.WithExceptionOnFailure``1"/> method overloads and allow you to specify
            the exception type that should be thrown on failure.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.AlternativeExceptionCondition.Requires``1(``0)">
            <summary>
            Returns a new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument, given it a default ArgumentName of 'value'.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <returns>A new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and "value" as argument name.</returns>
            <example>
            The following example shows how to use the <b>Requires</b> extension method.
            <code><![CDATA[
            using CuttingEdge.Conditions;
            internal class Person
            {
                private int age;
                public int Age
                {
                    get { return this.age; }
                    set
                    {
                        // Throws an InvalidOperationException when value is less than 0
                        Condition.WithExceptionOnFailure<InvalidOperationException>()
                            .Requires(value).IsGreaterOrEqual(0);
                        this.age = value;
                    }
                }
            }
            ]]></code>
            See the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> class for more code examples.
            </example>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.AlternativeExceptionCondition.Requires``1(``0,System.String)">
            <summary>
            Returns a new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <param name="argumentName">The name of the argument to validate</param>
            <returns>A new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and <paramref name="argumentName"/>.</returns>
            <example>
            The following example shows how to use the <b>Requires</b> extension method.
            <code><![CDATA[
            using CuttingEdge.Conditions;
            internal class Point
            {
                private readonly int x;
                private readonly int y;
                public Point(int x, int y)
                {
                    // Throws an InvalidOperationException when x is less than 0
                    Condition.WithExceptionOnFailure<InvalidOperationException>()
                        .Requires(x, "x").IsGreaterOrEqual(0);
                    // Throws an InvalidOperationException when y is less than 0
                    Condition.WithExceptionOnFailure<InvalidOperationException>()
                        .Requires(y, "y").IsGreaterOrEqual(0);
                    this.x = x;
                    this.y = y;
                }
                public int X { get { return this.x; } }
                public int Y { get { return this.y; } }
            }
            ]]></code>
            See the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> class for more code examples.
            </example>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.AlternativeExceptionCondition.Equals(System.Object)">
            <summary>Determines whether the specified System.Object is equal to the current System.Object.</summary>
            <param name="obj">The System.Object to compare with the current System.Object.</param>
            <returns>true if the specified System.Object is equal to the current System.Object; otherwise, false.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.AlternativeExceptionCondition.GetHashCode">
            <summary>Returns the hash code of the current instance.</summary>
            <returns>The hash code of the current instance.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.AlternativeExceptionCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.AlternativeExceptionCondition"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.AlternativeExceptionCondition"/>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.AlternativeExceptionCondition.GetType">
            <summary>Gets the <see cref="T:System.Type"/> of the current instance.</summary>
            <returns>The <see cref="T:System.Type"/> instance that represents the exact runtime 
            type of the current instance.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.AlternativeExceptionHelper`1">
            <summary>
            Internal helper class to cache a <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.AlternativeExceptionCondition"/> and 
            <see cref="T:System.Reflection.ConstructorInfo"/> instance per exception type.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.AlternativeExceptionHelper`1.AlternativeExceptionConditionInternal">
            <summary>Allows creating validators for a specific exception type.</summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.AlternativeExceptionHelper`1.AlternativeExceptionConditionInternal.Requires``1(``0)">
            <summary>
            Returns a new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument, given it a default ArgumentName of 'value'.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <returns>A new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and "value" as argument name.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.AlternativeExceptionHelper`1.AlternativeExceptionConditionInternal.Requires``1(``0,System.String)">
            <summary>
            Returns a new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <param name="argumentName">The name of the argument to validate</param>
            <returns>A new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and "value" as argument name.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.CollectionHelpers">
            <summary>
            Helper methods for the Collection validation methods of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions"/> methods.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition">
            <summary>
            Entry point methods to start validating pre- and postconditions.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0)">
            <summary>
            Returns a new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument, given it a default ArgumentName of 'value'.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <returns>A new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and "value" as argument name.</returns>
            <example>
            The following example shows how to use the <b>Requires</b> method.
            <code><![CDATA[
            using CuttingEdge.Conditions;
            internal class Person
            {
                private int age;
                public int Age
                {
                    get { return this.age; }
                    set
                    {
                        // Throws an ArgumentOutOfRangeException when value is less than 0
                        Condition.Requires(value).IsGreaterOrEqual(0);
                        this.age = value;
                    }
                }
            }
            ]]></code>
            See the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> class for more code examples.
            </example>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">
            <summary>
            Returns a new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to
            validate the preconditions of the given argument.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <param name="argumentName">The name of the argument to validate</param>
            <returns>A new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and <paramref name="argumentName"/>.</returns>
            <example>
            The following example shows how to use the <b>Requires</b> method.
            <code><![CDATA[
            using CuttingEdge.Conditions;
            internal class Point
            {
                private readonly int x;
                private readonly int y;
                public Point(int x, int y)
                {
                    // Throws an ArgumentOutOfRangeException when x is less than 0
                    Condition.Requires(x, "x").IsGreaterOrEqual(0);
                    // Throws an ArgumentOutOfRangeException when y is less than 0
                    Condition.Requires(y, "y").IsGreaterOrEqual(0);
                    this.x = x;
                    this.y = y;
                }
                public int X { get { return this.x; } }
                public int Y { get { return this.y; } }
            }
            ]]></code>
            See the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> class for more code examples.
            </example>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0)">
            <summary>
            Returns a new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to 
            validate the given argument, given it a default ArgumentName of 'value'.
            </summary>
            <typeparam name="T">The type of the argument to validate.</typeparam>
            <param name="value">The value of the argument to validate.</param>
            <returns>A new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and "value" as argument name.</returns>
            <example>
            For an example of the usage of <b>Ensures</b> see the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)"/> 
            overload.
            </example>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">
            <summary>
            Returns a new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">ConditionValidator</see> that allows you to 
            validate the postconditions of the given object.
            </summary>
            <typeparam name="T">The type of the object to validate.</typeparam>
            <param name="value">The object to validate.</param>
            <param name="argumentName">The name of the argument to validate</param>
            <returns>A new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">ConditionValidator</see> containing the 
            <paramref name="value"/> and <paramref name="argumentName"/>.</returns>
            <example>
            The following example shows a way to use the <b>Ensures</b> method. Shown is an 
            <b>IObjectBuilder</b> interface which contract states that the <b>BuildObject</b> method should 
            never return <b>null</b>. That contract, however, is not enforced by the compiler or the runtime.
            To allow this contract to be validated, the <b>ObjectBuilderValidator</b> class is a decorator for
            objects implementing the <b>IObjectBuilder</b> interface and it <i>ensures</i> that the given
            contract is fulfilled, by checking the return value of the called <b>BuildObject</b> of the 
            wrapped <b>IObjectBuilder</b>.
            <code><![CDATA[
            using CuttingEdge.Conditions;
            internal interface IObjectBuilder
            {
                /// <summary>Builds an object.</summary>
                /// <returns>Returns a newly built object. Will not return null.</returns>
                object BuildObject();
            }
            internal class ObjectBuilderValidator : IObjectBuilder
            {
                public object BuildObject()
                {
                    object obj = wrappedObjectBuilder.BuildObject();
                    // When obj == null, a PostconditionException is thrown, with the following message:
                    // "Postcondition 'the value returned by IObjectBuilder.BuildObject() should not be null'
                    // failed."
                    Conditions.Ensures(obj, "the value returned by IObjectBuilder.BuildObject()")
                        .IsNotNull();
                    return obj;
                }
                private readonly IObjectBuilder wrappedObjectBuilder;
                /// <summary>
                /// Initializes a new instance of the <see cref="ObjectBuilderValidator"/> class.
                /// </summary>
                /// <param name="objectBuilder">The object builder.</param>
                /// <exception cref="ArgumentNullException">
                /// Thrown when <paramref name="objectBuilder"/> is a null reference.
                /// </exception>
                public ObjectBuilderWrapper(IObjectBuilder objectBuilder)
                {
                    // Throws a ArgumentNullException when objectBuilder == null.
                    Condition.Requires(objectBuilder, "objectBuilder").IsNotNull();
                    this.wrappedObjectBuilder = objectBuilder;
                }
            }
            ]]></code>
            See the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> class for more code examples.
            </example>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.WithExceptionOnFailure``1">
            <summary>
            Returns a new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.AlternativeExceptionCondition"/> that allows you to specify the exception
            type that has to be thrown in case a a validation fails.
            </summary>
            <typeparam name="TException">The type of the exception to throw.</typeparam>
            <returns>A new <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.AlternativeExceptionCondition"/>.</returns>
            <example>
            The following example shows how to use the <b>WithExceptionOnFailure</b> method.
            <code><![CDATA[
            using CuttingEdge.Conditions;
            internal class Point
            {
                private readonly int x;
                private readonly int y;
                public Point(int x, int y)
                {
                    // Throws an InvalidOperationException when x is less than 0
                    Condition.WithExceptionOnFailure<InvalidOperationException>().Requires(x, "x")
                        .IsGreaterOrEqual(0)
                        .IsLessThan(100);
                    this.x = x;
                    this.y = y;
                }
                public int X { get { return this.x; } }
                public int Y { get { return this.y; } }
            }
            ]]></code>
            See the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> class for more code examples.
            </example>
            <exception cref="T:System.ArgumentException">
            Thrown when the supplied <typeparamref name="TException"/> is abstract or does not contain a
            public constructor with a single parameter of type <see cref="T:System.String"/>.</exception>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1">
            <summary>
            Enables validation of pre- and postconditions. This class isn't used directly by developers. Instead 
            the class should be created by the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0)">Requires</see> and
            <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0)">Ensures</see> extension methods.
            </summary>
            <typeparam name="T">The type of the argument to be validated</typeparam>
            <example>
            The following example shows how to use <b>CuttingEdge.Conditions</b>.
            <code><![CDATA[
            using System.Collections;
            using CuttingEdge.Conditions;
            internal class ExampleClass
            {
                private enum StateType { Uninitialized = 0, Initialized };
                private StateType currentState;
                public ICollection GetData(int? id, string xml, IEnumerable col)
                {
                    // Check all preconditions:
                    Condition.Requires(id, "id")
                        .IsNotNull()          // throws ArgumentNullException on failure
                        .IsInRange(1, 999)    // ArgumentOutOfRangeException on failure
                        .IsNotEqualTo(128);   // throws ArgumentException on failure
                    Condition.Requires(xml, "xml")
                        .StartsWith("<data>") // throws ArgumentException on failure
                        .EndsWith("</data>"); // throws ArgumentException on failure
                    Condition.Requires(col, "col")
                        .IsNotNull()          // throws ArgumentNullException on failure
                        .IsEmpty();           // throws ArgumentException on failure
                    // Do some work
                    // Example: Call a method that should return a not null ICollection
                    object result = BuildResults(xml, col);
                    // Check all postconditions:
                    // A PostconditionException will be thrown at failure.
                    Condition.Ensures(result, "result")
                        .IsNotNull()
                        .IsOfType(typeof(ICollection));
                    return result as ICollection;
                }
            }
            ]]></code>
            The following code examples shows how to extend the library with your own 'Invariant' entry point
            method. The first example shows a class with an Add method that validates the class state (the
            class invariants) before adding the <b>Person</b> object to the internal array and that code should
            throw an <see cref="T:System.InvalidOperationException"/>.
            <code><![CDATA[
            using CuttingEdge.Conditions;
            internal class Person { }
            internal class PersonCollection 
            {
                public PersonCollection(int capicity)
                {
                    this.Capacity = capicity;
                }
                public void Add(Person person)
                {
                    // Throws a ArgumentNullException when person == null
                    Condition.Requires(person, "person").IsNotNull();
                    // Throws an InvalidOperationException on failure
                    Invariants.Invariant(this.Count, "Count").IsLessOrEqual(this.Capacity);
                    this.AddInternal(person);
                }
                public int Count { get; private set; }
                public int Capacity { get; private set; }
                private void AddInternal(Person person)
                {
                    // some logic here
                }
                public bool Contains(Person person)
                {
                    // some logic here
                    return false;
                }
            }
            ]]></code>
            The following code example will show the implementation of the <b>Invariants</b> class.
            <code><![CDATA[
            using System;
            using CuttingEdge.Conditions;
            namespace MyCompanyRootNamespace
            {
                internal static class Invariants
                {
                    public static ConditionValidator<T> Invariant<T>(T value)
                    {
                        return new InvariantValidator<T>("value", value);
                    }
                    public static ConditionValidator<T> Invariant<T>(T value, string argumentName)
                    {
                        return new InvariantValidator<T>(argumentName, value);
                    }
                    // Internal class that inherits from ConditionValidator<T>
                    sealed class InvariantValidator<T> : ConditionValidator<T>
                    {
                        public InvariantValidator(string argumentName, T value)
                            : base(argumentName, value)
                        {
                        }
                        protected override void ThrowExceptionCore(string condition,
                            string additionalMessage, ConstraintViolationType type)
                        {
                            string exceptionMessage = string.Format("Invariant '{0}' failed.", condition);
                            if (!String.IsNullOrEmpty(additionalMessage))
                            {
                                exceptionMessage += " " + additionalMessage;
                            }
                            // Optionally, the 'type' parameter can be used, but never throw an exception
                            // when the value of 'type' is unknown or unvalid.
                            throw new InvalidOperationException(exceptionMessage);
                        }
                    }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">
            <summary>Gets the value of the argument.</summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.#ctor(System.String,`0)">
            <summary>Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> class.</summary>
            <param name="argumentName">The name of the argument to be validated</param>
            <param name="value">The value of the argument to be validated</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare with the current System.Object.</param>
            <returns>
            true if the specified System.Object is equal to the current System.Object; otherwise, false.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.GetHashCode">
            <summary>Returns the hash code of the current instance.</summary>
            <returns>The hash code of the current instance.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.GetType">
            <summary>Gets the <see cref="T:System.Type"/> of the current instance.</summary>
            <returns>The <see cref="T:System.Type"/> instance that represents the exact runtime 
            type of the current instance.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ThrowException(System.String,System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConstraintViolationType)">
            <summary>Throws an exception.</summary>
            <param name="condition">Describes the condition that doesn't hold, e.g., "Value should not be 
            null".</param>
            <param name="additionalMessage">An additional message that will be appended to the exception
            message, e.g. "The actual value is 3.". This value may be null or empty.</param>
            <param name="type">Gives extra information on the exception type that must be build. The actual
            implementation of the validator may ignore some or all values.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ThrowException(System.String)">
            <summary>Throws an exception.</summary>
            <param name="condition">Describes the condition that doesn't hold, e.g., "Value should not be 
            null".</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ThrowExceptionCore(System.String,System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConstraintViolationType)">
            <summary>Throws an exception.</summary>
            <param name="condition">Describes the condition that doesn't hold, e.g., "Value should not be 
            null".</param>
            <param name="additionalMessage">An additional message that will be appended to the exception
            message, e.g. "The actual value is 3.". This value may be null or empty.</param>
            <param name="type">Gives extra information on the exception type that must be build. The actual
            implementation of the validator may ignore some or all values.</param>
            <remarks>
            Implement this method when deriving from <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/>.
            The implementation should at least build the exception message from the 
            <paramref name="condition"/> and optional <paramref name="additionalMessage"/>. Usage of the
            <paramref name="type"/> is completely optional, but the implementation should at least be flexible
            and be able to handle unknown <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConstraintViolationType"/> values. Values may be added
            in future releases.
            </remarks>
            <example>
            For an example see the documentation for <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/>.
            </example>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">
            <summary>Gets the name of the argument.</summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConstraintViolationType">
            <summary>
            This enumeration is used to determine the type of exception the validator should throw.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConstraintViolationType.Default">
            <summary>Lets the Validator to throw the default exception for that instance.</summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConstraintViolationType.OutOfRangeViolation">
            <summary>
            Lets the Validator optionally throw an exception type appropriate for values that are out of range.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConstraintViolationType.InvalidEnumViolation">
            <summary>
            Lets the Validator optionally throw an <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/>.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.DefaultComparer`1">
            <summary>
            By letting the methods of the ValidatorExtensions class call this static field, it saves us a call to 
            the Comparer{T}.get_Default() method.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.EnsuresValidator`1">
            <summary>
            The EnsuresValidator can be used for postcondition checks.
            </summary>
            <typeparam name="T">The type of the argument to be validated</typeparam>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.EnsuresValidator`1.ThrowExceptionCore(System.String,System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConstraintViolationType)">
            <summary>Throws an exception.</summary>
            <param name="condition">Describes the condition that doesn't hold, e.g., "Value should not be
            null".</param>
            <param name="additionalMessage">An additional message that will be appended to the exception
            message, e.g. "The actual value is 3.". This value may be null or empty.</param>
            <param name="type">Gives extra information on the exception type that must be build. The actual
            implementation of the validator may ignore some or all values.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">
            <summary>
            The exception that is thrown when a method's postcondition is not valid.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException"/> class.</summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException"/> class with a
            specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException"/> class.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.RequiresValidator`1">
            <summary>
            The RequiresValidator can be used for precondition checks.
            </summary>
            <typeparam name="T">The type of the argument to be validated</typeparam>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.RequiresValidator`1.ThrowExceptionCore(System.String,System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConstraintViolationType)">
            <summary>Throws an exception.</summary>
            <param name="condition">Describes the condition that doesn't hold, e.g., "Value should not be
            null".</param>
            <param name="additionalMessage">An additional message that will be appended to the exception
            message, e.g. "The actual value is 3.". This value may be null or empty.</param>
            <param name="type">Gives extra information on the exception type that must be build. The actual
            implementation of the validator may ignore some or all values.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.RequiresWithCustomExceptionValidator`2">
            <summary>
            The RequiresValidator can be used for precondition checks.
            </summary>
            <typeparam name="T">The type of the argument to be validated</typeparam>
            <typeparam name="TException">The exception type to throw in case of a failure.</typeparam>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.SR">
            <summary>
            String Resource helper class
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.StringificationExtensions">
            <summary>
            An internal helper class with extension methods for converting an object to a string representation.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.StringificationExtensions.Stringify(System.Object)">
            <summary>
            Transforms an object into a string representation that can be used to represent it's value in an
            exception message. When the value is a null reference, the string "null" will be returned, when 
            the specified value is a string or a char, it will be surrounded with single quotes.
            </summary>
            <param name="value">The value to be transformed.</param>
            <returns>A string representation of the supplied <paramref name="value"/>.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Throw">
            <summary>
            All throw logic is factored out of the public extension methods and put in this helper class. This 
            allows more methods to be a candidate for inlining by the JIT compiler.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions">
            <summary>
            Collection checks.
            </summary>
            <summary>
            Comparable checks for Boolean.
            </summary>
            <summary>
            Comparable checks for byte.
            </summary>
            <summary>
            Comparable checks for DateTime.
            </summary>
            <summary>
            Comparable checks for decimal.
            </summary>
            <summary>
            Comparable checks for double.
            </summary>
            <summary>
            Fallback checks for all IComparable types that don't have an explicit overload.
            </summary>
            <summary>
            Comparable checks for short.
            </summary>
            <summary>
            Comparable checks for int.
            </summary>
            <summary>
            Comparable checks for long.
            </summary>
            <summary>
            Comparable checks for float.
            </summary>
            <summary>
            Extension methods for <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/>.
            </summary>
            <summary>
            Checks on evaluations.
            </summary>
            <summary>
            Null checks.
            </summary>
            <summary>
            String checks.
            </summary>
            <summary>
            Type checks.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEmpty``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0})">
            <summary>
            Checks whether the given value contains no elements. An exception is thrown otherwise. When the 
            value is a null reference it is considered empty.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEmpty``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.String)">
            <summary>
            Checks whether the given value contains no elements. An exception is thrown otherwise. When the 
            value is a null reference it is considered empty.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEmpty``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0})">
            <summary>
            Checks whether the given value does contain elements. An exception is thrown otherwise. When the 
            value is a null reference it is considered empty.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEmpty``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.String)">
            <summary>
            Checks whether the given value does contain elements. An exception is thrown otherwise. When the 
            value is a null reference it is considered empty.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.Contains``2(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``1)">
            <summary>
            Checks whether the given value contains the specified <paramref name="element"/>. An exception is 
            thrown otherwise. When the value is a null reference it is considered empty and therefore won't 
            contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.Contains``2(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``1,System.String)">
            <summary>
            Checks whether the given value contains the specified <paramref name="element"/>. An exception is 
            thrown otherwise. When the value is a null reference it is considered empty and therefore won't 
            contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.Contains``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Object)">
            <summary>
            Checks whether the given value contains the specified <paramref name="element"/>. An exception is 
            thrown otherwise. When the value is a null reference it is considered empty and therefore won't 
            contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.Contains``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Object,System.String)">
            <summary>
            Checks whether the given value contains the specified <paramref name="element"/>. An exception is 
            thrown otherwise. When the value is a null reference it is considered empty and therefore won't 
            contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotContain``2(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``1)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="element"/>. An 
            exception is thrown otherwise. When the value is a null reference it is considered empty and 
            therefore won't contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotContain``2(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``1,System.String)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="element"/>. An 
            exception is thrown otherwise. When the value is a null reference it is considered empty and 
            therefore won't contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotContain``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Object)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="element"/>. An 
            exception is thrown otherwise. When the value is a null reference it is considered empty and 
            therefore won't contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotContain``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Object,System.String)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="element"/>. An 
            exception is thrown otherwise. When the value is a null reference it is considered empty and 
            therefore won't contain <paramref name="element"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="element">The element that should contain the given value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain <paramref name="element"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.ContainsAny``2(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks whether the given value contains any of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the value is a null reference or an empty list it won't 
            contain any <paramref name="elements"/>. When the <paramref name="elements"/> list is null or 
            empty the collection is considered to not contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.ContainsAny``2(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Checks whether the given value contains any of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the value is a null reference or an empty list it won't 
            contain any <paramref name="elements"/>. When the <paramref name="elements"/> list is null or 
            empty the collection is considered to not contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.ContainsAny``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Collections.IEnumerable)">
            <summary>
            Checks whether the given value contains any of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the value is a null reference or an empty list it won't 
            contain any <paramref name="elements"/>. When the <paramref name="elements"/> list is null or 
            empty the collection is considered to not contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.ContainsAny``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Collections.IEnumerable,System.String)">
            <summary>
            Checks whether the given value contains any of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the value is a null reference or an empty list it won't 
            contain any <paramref name="elements"/>. When the <paramref name="elements"/> list is null or 
            empty the collection is considered to not contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain any element of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotContainAny``2(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks whether the given value does not contains any of the specified <paramref name="elements"/>.
            An exception is thrown otherwise.
            When the value is a null reference or an empty list it won't contain any <paramref name="elements"/>.
            When the <paramref name="elements"/> list is null or empty the collection is considered to not 
            contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotContainAny``2(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Checks whether the given value does not contains any of the specified <paramref name="elements"/>.
            An exception is thrown otherwise.
            When the value is a null reference or an empty list it won't contain any <paramref name="elements"/>.
            When the <paramref name="elements"/> list is null or empty the collection is considered to not 
            contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotContainAny``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Collections.IEnumerable)">
            <summary>
            Checks whether the given value does not contains any of the specified <paramref name="elements"/>.
            An exception is thrown otherwise.
            When the value is a null reference or an empty list it won't contain any <paramref name="elements"/>.
            When the <paramref name="elements"/> list is null or empty the collection is considered to not 
            contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotContainAny``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Collections.IEnumerable,System.String)">
            <summary>
            Checks whether the given value does not contains any of the specified <paramref name="elements"/>.
            An exception is thrown otherwise.
            When the value is a null reference or an empty list it won't contain any <paramref name="elements"/>.
            When the <paramref name="elements"/> list is null or empty the collection is considered to not 
            contain any element.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain one or more elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.ContainsAll``2(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks whether the given value contains all of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the <paramref name="elements"/> collection is a null reference 
            or an empty list, the collection is considered to contain all of the specified (even if the value 
            itself is empty). When the given value is empty and the given <paramref name="elements"/> list 
            isn't, the collection is considered to not contain all of the specified <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.ContainsAll``2(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Checks whether the given value contains all of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the <paramref name="elements"/> collection is a null reference 
            or an empty list, the collection is considered to contain all of the specified (even if the value 
            itself is empty). When the given value is empty and the given <paramref name="elements"/> list 
            isn't, the collection is considered to not contain all of the specified <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.ContainsAll``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Collections.IEnumerable)">
            <summary>
            Checks whether the given value contains all of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the <paramref name="elements"/> collection is a null reference 
            or an empty list, the collection is considered to contain all of the specified (even if the value 
            itself is empty). When the given value is empty and the given <paramref name="elements"/> list 
            isn't, the collection is considered to not contain all of the specified <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.ContainsAll``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Collections.IEnumerable,System.String)">
            <summary>
            Checks whether the given value contains all of the specified <paramref name="elements"/>. An 
            exception is thrown otherwise. When the <paramref name="elements"/> collection is a null reference 
            or an empty list, the collection is considered to contain all of the specified (even if the value 
            itself is empty). When the given value is empty and the given <paramref name="elements"/> list 
            isn't, the collection is considered to not contain all of the specified <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotContainAll``2(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Checks whether the given value does not contains all of the specified <paramref name="elements"/>.
            An exception is thrown otherwise. When the <paramref name="elements"/> collection is a null 
            reference or an empty list, the collection is considered to contain all of the specified (even if 
            the value itself is empty). When the given value is empty and the given <paramref name="elements"/>
            list isn't, the collection is considered to not contain all of the specified 
            <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the specified <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the specified <paramref name="elements"/> list is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the specified <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotContainAll``2(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            Checks whether the given value does not contains all of the specified <paramref name="elements"/>.
            An exception is thrown otherwise. When the <paramref name="elements"/> collection is a null 
            reference or an empty list, the collection is considered to contain all of the specified (even if 
            the value itself is empty). When the given value is empty and the given <paramref name="elements"/>
            list isn't, the collection is considered to not contain all of the specified 
            <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <typeparam name="TElement">The type that can be considered an element of the <typeparamref name="TCollection"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the specified <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the specified <paramref name="elements"/> list is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the specified <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotContainAll``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Collections.IEnumerable)">
            <summary>
            Checks whether the given value does not contains all of the specified <paramref name="elements"/>.
            An exception is thrown otherwise. When the <paramref name="elements"/> collection is a null 
            reference or an empty list, the collection is considered to contain all of the specified (even if 
            the value itself is empty). When the given value is empty and the given <paramref name="elements"/>
            list isn't, the collection is considered to not contain all of the specified 
            <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the specified <paramref name="elements"/> list is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotContainAll``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Collections.IEnumerable,System.String)">
            <summary>
            Checks whether the given value does not contains all of the specified <paramref name="elements"/>.
            An exception is thrown otherwise. When the <paramref name="elements"/> collection is a null 
            reference or an empty list, the collection is considered to contain all of the specified (even if 
            the value itself is empty). When the given value is empty and the given <paramref name="elements"/>
            list isn't, the collection is considered to not contain all of the specified 
            <paramref name="elements"/>.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="elements">The list of elements.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the specified <paramref name="elements"/> list is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain all of the elements of the given <paramref name="elements"/> list, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.HasLength``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the given value has the number of elements as specified by 
            <paramref name="numberOfElements"/>. An exception is thrown otherwise. When the value is a null 
            reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The number of elements the collection should contain.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while <paramref name="numberOfElements"/> is bigger than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.HasLength``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the given value has the number of elements as specified by 
            <paramref name="numberOfElements"/>. An exception is thrown otherwise. When the value is a null 
            reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The number of elements the collection should contain.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while <paramref name="numberOfElements"/> is bigger than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotHaveLength``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is different from the specified 
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is 
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The number of elements the collection should not contain.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotHaveLength``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is different from the specified 
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is 
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The number of elements the collection should not contain.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does contain the number of elements as specified with the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsShorterThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is less than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain less elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsShorterThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is less than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain less elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotShorterThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is not less than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or more elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotShorterThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is not less than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or more elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsShorterOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is less than or equal to the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is lass than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsShorterOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is less than or equal to the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is lass than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception> 
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotShorterOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is not less than and not equals to the 
            specified <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the
            value is a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain more elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotShorterOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is not less than and not equals to the 
            specified <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the
            value is a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain more elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception> 
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLongerThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is more than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLongerThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is more than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLongerThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is not more than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLongerThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is not more than the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or less elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more elements than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLongerOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is more than or equal to the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or more elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLongerOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is more than or equal to the specified
            <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the value is
            a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain the same amount or more elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is greater than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains less than specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLongerOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32)">
            <summary>
            Checks whether the number of elements in the given value, is not more than and not equal to the 
            specified <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the
            value is a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain less elements than this value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLongerOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Int32,System.String)">
            <summary>
            Checks whether the number of elements in the given value, is not more than and not equal to the 
            specified <paramref name="numberOfElements"/> argument. An exception is thrown otherwise. When the
            value is a null reference, it is considered to have 0 elements.
            </summary>
            <typeparam name="TCollection">The type of the value to check.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="numberOfElements">The collection must contain less elements than this value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and the <paramref name="numberOfElements"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains more or the same amount of elements as specified by the <paramref name="numberOfElements"/> argument, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsTrue(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Boolean})">
            <summary>
            Checks whether the given value is <b>true</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsTrue(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Boolean},System.String)">
            <summary>
            Checks whether the given value is <b>true</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsTrue(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{System.Boolean}})">
            <summary>
            Checks whether the given value is <b>true</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsTrue(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{System.Boolean}},System.String)">
            <summary>
            Checks whether the given value is <b>true</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>false</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsFalse(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Boolean})">
            <summary>
            Checks whether the given value is <b>false</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsFalse(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Boolean},System.String)">
            <summary>
            Checks whether the given value is <b>false</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsFalse(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{System.Boolean}})">
            <summary>
            Checks whether the given value is <b>false</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsFalse(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{System.Boolean}},System.String)">
            <summary>
            Checks whether the given value is <b>false</b>. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>true</b> or null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte,System.Byte)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte,System.Byte,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte,System.Byte)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte,System.Byte,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Byte},System.Byte,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.DateTime)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.DateTime,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.DateTime)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.DateTime,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.DateTime},System.DateTime,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.Decimal)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.Decimal,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.Decimal)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.Decimal,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Decimal},System.Decimal,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNaN(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is a valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNaN(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is a valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotNaN(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is a not valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotNaN(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is a not valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is not infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is not infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNegativeInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNegativeInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotNegativeInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is not negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotNegativeInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is not negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsPositiveInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsPositiveInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotPositiveInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double})">
            <summary>
            Checks whether the given value is not positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotPositiveInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.String)">
            <summary>
            Checks whether the given value is not positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double,System.Double)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double,System.Double,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double,System.Double)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double,System.Double,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Double},System.Double,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0,``0)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0,``0,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.Nullable{``0})">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0,``0)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0,``0,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0,``0)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0,``0,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.Nullable{``0})">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0,``0)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0,``0,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range and a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception> 
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception> 
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/> and is an <see cref="T:System.Enum">Enum</see> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum">Enum</see> type and not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and the <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/> and are of type <see cref="T:System.Enum">Enum</see>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},``0,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and the <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/> and are of type <see cref="T:System.Enum">Enum</see>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0})">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and the <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.Nullable{``0},System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and the <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},``0,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16,System.Int16)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16,System.Int16,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16,System.Int16)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16,System.Int16,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int16},System.Int16,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32,System.Int32)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32,System.Int32,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32,System.Int32)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32,System.Int32,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int32},System.Int32,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64,System.Int64)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64,System.Int64,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64,System.Int64)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64,System.Int64,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Int64},System.Int64,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNaN(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is a valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNaN(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is a valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotNaN(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is a not valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotNaN(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is a not valid number. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a valid number, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is not infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is not infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNegativeInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNegativeInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotNegativeInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is not negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotNegativeInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is not negative infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is negative infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsPositiveInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsPositiveInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotPositiveInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single})">
            <summary>
            Checks whether the given value is not positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotPositiveInfinity(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.String)">
            <summary>
            Checks whether the given value is not positive infinity. An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is positive infinity, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single,System.Single)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single,System.Single,System.String)">
            <summary>
            Checks whether the given value is between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single,System.Single)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotInRange(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single,System.Single,System.String)">
            <summary>
            Checks whether the given value is not between <paramref name="minValue"/> and 
            <paramref name="maxValue"/> (including those values). An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest invalid value.</param>
            <param name="maxValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is in the specified range, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is greater than the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is not greater than the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is greater or equal to the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotGreaterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is not greater or equal to the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is less than the specified <paramref name="maxValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The lowest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is not less than the specified <paramref name="minValue"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The lowest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is smaller or equal to the specified <paramref name="maxValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxValue">The highest valid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater than <paramref name="maxValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotLessOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is not smaller or equal to the specified <paramref name="minValue"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minValue">The highest invalid value.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minValue"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is equal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The valid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEqualTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Single},System.Single,System.String)">
            <summary>
            Checks whether the given value is unequal to the specified <paramref name="value"/>. 
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The invalid value to compare with.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is equal to <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>   
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.Evaluate``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Checks whether the specified <paramref name="expression"/> evaluates <b>true</b> on the given value.
            An exception is thrown otherwise.
            </summary>
            <remarks>
            This method will display a string representation of the specified <paramref name="expression"/>.
            Although it can therefore give a lot of useful information in the exception message, it the
            <paramref name="expression"/> has to be <see cref="M:System.Linq.Expressions.Expression`1.Compile">compiled</see> on each
            call. Try using the other <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.Evaluate``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Boolean)"/>
            overload in performance sensitive parts of your program.
            </remarks>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">
            The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.
            </param>
            <param name="expression">
            The <see cref="T:System.Linq.Expressions.Expression`1"/> that will be compiled to an <see cref="T:System.Func`2"/> and 
            executed. When the expression is a null reference (Nothing in VB) it is considered to evaluate
            <b>false</b>.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference and the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference and the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum"/> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.Evaluate``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Checks whether the specified <paramref name="expression"/> evaluates <b>true</b> on the given value.
            An exception is thrown otherwise.
            </summary>
            <remarks>
            This method will display a string representation of the specified <paramref name="expression"/>.
            Although it can therefore give a lot of useful information in the exception message, it the
            <paramref name="expression"/> has to be <see cref="M:System.Linq.Expressions.Expression`1.Compile">compiled</see> on each
            call. Try using the other <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.Evaluate``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Boolean)"/>
            overload in performance sensitive parts of your program.
            </remarks>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">
            The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.
            </param>
            <param name="expression">
            The <see cref="T:System.Linq.Expressions.Expression`1"/> that will be compiled to an <see cref="T:System.Func`2"/> and 
            executed. When the expression is a null reference (Nothing in VB) it is considered to evaluate
            <b>false</b>.</param>
            <param name="conditionDescription">Describes the condition that should hold. i.e.: 'value should 
            be valid'. When the description contains a {0} marker, that marker will be replaced with the actual
            name of the parameter. The description will be used in the message of the thrown exception.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference and the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference and the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum"/> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <paramref name="expression"/> evaluated false or is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.Evaluate``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Boolean)">
            <summary>
            Checks whether the specified <paramref name="condition"/> equals <b>true</b>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="condition"><b>true</b> to prevent an <see cref="T:System.Exception"/> from being thrown; otherwise, false.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="condition"/> equals false, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="condition"/> equals false and the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <paramref name="condition"/> equals false and the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum"/> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <paramref name="condition"/> equals false, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.Evaluate``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Boolean,System.String)">
            <summary>
            Checks whether the specified <paramref name="condition"/> equals <b>true</b>.
            An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="condition"><b>true</b> to prevent an <see cref="T:System.Exception"/> from being thrown; otherwise, false.</param>
            <param name="conditionDescription">Describes the condition that should hold. i.e.: 'value should 
            be valid'. When the description contains a {0} marker, that marker will be replaced with the actual
            name of the parameter. The description will be used in the message of the thrown exception.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="condition"/> equals false, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="condition"/> equals false and the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when the <paramref name="condition"/> equals false and the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is an <see cref="T:System.Enum"/> type, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <paramref name="condition"/> equals false, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNull``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0})">
            <summary>
            Checks whether the given value is null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNull``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.String)">
            <summary>
            Checks whether the given value is null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNull``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}})">
            <summary>
            Checks whether the given value is null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNull``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.String)">
            <summary>
            Checks whether the given value is null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotNull``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0})">
            <summary>
            Checks whether the given value is not null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotNull``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.String)">
            <summary>
            Checks whether the given value is not null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotNull``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}})">
            <summary>
            Checks whether the given value is not null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotNull``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.Nullable{``0}},System.String)">
            <summary>
            Checks whether the given value is not null. An exception is thrown otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNullOrWhiteSpace(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is <b>null</b> (Nothing in Visual Basic), empty, or consists only 
            of white-space characters.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not <b>null</b>, not empty and does not consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not <b>null</b>, not empty and does not consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNullOrWhiteSpace(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is <b>null</b> (Nothing in Visual Basic), empty, or consists only 
            of white-space characters.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not <b>null</b>, not empty and does not consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not <b>null</b>, not empty and does not consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotNullOrWhiteSpace(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is not <b>null</b> (Nothing in Visual Basic), not empty, and does 
            not consists only of white-space characters.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty or consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>null</b>, empty or or consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotNullOrWhiteSpace(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is not <b>null</b> (Nothing in Visual Basic), not empty, and does 
            not consists only of white-space characters.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty or consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <b>null</b>, empty or or consists only of white-space characters, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsShorterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is shorter in length than <paramref name="maxLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxLength">The smallest invalid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="maxLength"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal <paramref name="maxLength"/> to, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsShorterThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is shorter in length than <paramref name="maxLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxLength">The smallest invalid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal to <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="maxLength"/> is smaller or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is greater or equal <paramref name="maxLength"/> to, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsShorterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is shorter or equal in length than <paramref name="maxLength"/>. 
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxLength">The biggest valid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="maxLength"/> is smaller than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsShorterOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is shorter or equal in length than <paramref name="maxLength"/>. 
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="maxLength">The biggest valid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="maxLength"/> is smaller than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="maxLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLongerThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is longer in length than <paramref name="minLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minLength">The biggest invalid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="minLength"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLongerThan(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is longer in length than <paramref name="minLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minLength">The biggest invalid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="minLength"/> is greater or equal to 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller or equal to <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLongerOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is longer or equal in length than <paramref name="minLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minLength">The smallest valid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="minLength"/> is greater than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsLongerOrEqual(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is longer or equal in length than <paramref name="minLength"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="minLength">The smallest valid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="minLength"/> is greater than 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the length of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is smaller than <paramref name="minLength"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.HasLength(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is equal in length to <paramref name="length"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="length">The valid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> un equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="length"/> un equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the length of <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> un equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.HasLength(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is equal in length to <paramref name="length"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="length">The valid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> un equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="length"/> un equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the length of <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> un equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotHaveLength(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.Int32)">
            <summary>
            Checks whether the given value is unequal in length to <paramref name="length"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="length">The invalid length.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="length"/> un equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the length of <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotHaveLength(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.Int32,System.String)">
            <summary>
            Checks whether the given value is unequal in length to <paramref name="length"/>.
            An exception is thrown otherwise. A null reference is considered to have a length of 0.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="length">The invalid length.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the length of <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="length"/> un equals 0, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the length of <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> equals <paramref name="length"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNullOrEmpty(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is null or an <see cref="F:System.String.Empty"/> string.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNullOrEmpty(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is null or an <see cref="F:System.String.Empty"/> string.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotNullOrEmpty(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is not null and not an <see cref="F:System.String.Empty"/> string.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <see cref="F:System.String.Empty"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotNullOrEmpty(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is not null and not an <see cref="F:System.String.Empty"/> string.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is <see cref="F:System.String.Empty"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is null or empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEmpty(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is an <see cref="F:System.String.Empty"/> string. An exception is thrown 
            otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsEmpty(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is an <see cref="F:System.String.Empty"/> string. An exception is thrown 
            otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEmpty(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String})">
            <summary>
            Checks whether the given value is not an <see cref="F:System.String.Empty"/> string. An exception is thrown
            otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotEmpty(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value is not an <see cref="F:System.String.Empty"/> string. An exception is thrown
            otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is empty, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.StartsWith(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value starts with the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.StartsWith(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the given value starts with the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.StartsWith(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String,System.StringComparison)">
            <summary>
            Checks whether the given value starts with the specified <paramref name="value"/> using the
            specified <paramref name="comparisonType"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.StartsWith(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Checks whether the given value starts with the specified <paramref name="value"/> using the
            specified <paramref name="comparisonType"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotStartWith(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value does not start with the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotStartWith(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the given value does not start with the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotStartWith(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String,System.StringComparison)">
            <summary>
            Checks whether the given value does not start with the specified <paramref name="value"/> using the
            specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotStartWith(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Checks whether the given value does not start with the specified <paramref name="value"/> using the
            specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> start with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.Contains(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value contains the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> contains no null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.Contains(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the given value contains the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> contains no null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not contain <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotContain(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotContain(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the given value does not contain the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> and <paramref name="value"/> are both null references, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> contains <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.EndsWith(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the end of the given value matches the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.EndsWith(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the end of the given value matches the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.EndsWith(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String,System.StringComparison)">
            <summary>
            Checks whether the end of the given value matches the specified <paramref name="value"/> using the
            specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.EndsWith(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Checks whether the end of the given value matches the specified <paramref name="value"/> using the
            specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> does not end with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotEndWith(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String)">
            <summary>
            Checks whether the end of the given value does not match the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotEndWith(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String,System.String)">
            <summary>
            Checks whether the end of the given value does not match the specified <paramref name="value"/>.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotEndWith(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String,System.StringComparison)">
            <summary>
            Checks whether the end of the given value does not match the specified <paramref name="value"/> 
            using the specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.DoesNotEndWith(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{System.String},System.String,System.StringComparison,System.String)">
            <summary>
            Checks whether the end of the given value does not match the specified <paramref name="value"/> 
            using the specified comparison option.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="value">The value to compare.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison"/> values that determines how 
            this string and value are compared</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is a null reference and <paramref name="value"/> is not a null reference, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> ends with <paramref name="value"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsOfType``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Type)">
            <summary>
            Checks whether the <see cref="T:System.Type"/> of the given value is of <paramref name="type"/>.
            An exception is thrown otherwise.
            When the given value is a null reference, the check will always pass, regardless of the specified
            <paramref name="type"/>. Please use the <b>IsNotNull</b> method to check for null references).
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="type">The <see cref="T:System.Type"/> that will be used to perform the check.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsOfType``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Type,System.String)">
            <summary>
            Checks whether the <see cref="T:System.Type"/> of the given value is of <paramref name="type"/>.
            An exception is thrown otherwise.
            When the given value is a null reference, the check will always pass, regardless of the specified
            <paramref name="type"/>. Please use the <b>IsNotNull</b> method to check for null references).
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="type">The <see cref="T:System.Type"/> that will be used to perform the check.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is not of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotOfType``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Type)">
            <summary>
            Checks whether the <see cref="T:System.Type"/> of the given value is not of <paramref name="type"/>.
            An exception is thrown otherwise.
            When the given value is a null reference, the check will always pass, regardless of the specified
            <paramref name="type"/>. Please use the <b>IsNotNull</b> method to check for null references).
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="type">The <see cref="T:System.Type"/> that will be used to perform the check.</param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ValidatorExtensions.IsNotOfType``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator{``0},System.Type,System.String)">
            <summary>
            Checks whether the <see cref="T:System.Type"/> of the given value is not of <paramref name="type"/>.
            An exception is thrown otherwise.
            When the given value is a null reference, the check will always pass, regardless of the specified
            <paramref name="type"/>. Please use the <b>IsNotNull</b> method to check for null references).
            </summary>
            <typeparam name="T">The type of the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/>.</typeparam>
            <param name="validator">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1"/> that holds the value that has to be checked.</param>
            <param name="type">The <see cref="T:System.Type"/> that will be used to perform the check.</param>
            <param name="conditionDescription">
            The description of the condition that should hold. The string may hold the placeholder '{0}' for 
            the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.ArgumentName">ArgumentName</see>.
            </param>
            <returns>The specified <paramref name="validator"/> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Requires``1(``0,System.String)">Requires</see> extension method.</exception>
            <exception cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.PostconditionException">Thrown when the <see cref="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator"/> is of the specified <paramref name="type"/>, while the specified <paramref name="validator"/> is created using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>      
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ExtractCommands.ExtractGraphicsLayerById">
            <summary>
            Gets the ExtractGraphicsLayerById command.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ExtractCommands.ExtractFeatureSet">
            <summary>
            Gets the ExtractFeatureSet command.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ExtractCommands.ExtractFeatureSetCollectionById">
            <summary>
            Gets the ExtractFeatureSetCollectionById command.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ExtractCommands.ExtractEsriFeatureSet">
            <summary>
            Gets the ExtractEsriFeatureSet command.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FilterBuilderCommands">
            <summary>
            Commands related to the Filter Builder.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FilterBuilderCommands.ShowFilterBuilderView">
            <summary>
            Gets a command to display the Filter Builder View for a specific <see cref="T:Geocortex.Essentials.Client.Layer">Layer</see>
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.InfoCommands">
            <summary>
            Commands used for info operations.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.InfoCommands.ShowHomePanel">
            <summary>
            Gets the command to show the HomePanel view.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerCatalogCommands">
            <summary>
            Commands used to for layer catalog operations.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerCatalogCommands.ShowLayerCatalog">
            <summary>
            Gets the command to show the Layer Catalog view
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerCatalogCommands.AddCatalogLayers">
            <summary>
            Gets the command that receives a comma separated list of layer Ids that are configured in a Layer Catalog and adds their corresponding layers to the map. 
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerDrawingOrderCommands">
            <summary>
            Commands used to for layer drawing order operations.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerDrawingOrderCommands.ShowLayerDrawingOrder">
            <summary>
            Gets the command to show the Layer Drawing Order view
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.PreparedCommandWrapper">
            <summary>
            Wraps a command together with a command parameter for later execution.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.PreparedCommandWrapper.#ctor(Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.PreparedCommandWrapper"/> class.
            </summary>
            <param name="wrapper">The wrapper.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.PreparedCommandWrapper.Execute">
            <summary>
            Executes the command together with the Parameter.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.PreparedCommandWrapper.Parameter">
            <summary>
            Gets or sets the parameter to be used when executing the command.
            </summary>
            <value>The parameter.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartExtentChangedEvent">
            <summary>
            The event that fires when the chart extent changes
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartPointMouseDownEvent">
            <summary>
            The event that fires when a user clicks a chart point
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartPointMouseHoverBeginEvent">
            <summary>
            The event that fires when a user hovers over a chart point
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartPointMouseHoverEndEvent">
            <summary>
            The event that fires when a user stops hovering over a chart point
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartDataGenerationCompleteEvent">
            <summary>
            The event that fires when new chart data has been generated
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartPointEventArgs">
            <summary>
            Chart point event arguments for the given chart
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartDataChangedArgs">
            <summary>
            Event arguments for the given chart
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartDataChangedArgs.#ctor">
            <summary>
            Creates a new instance of ChartDataChangedArgs
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartDataChangedArgs.#ctor(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartViewModel)">
            <summary>
            Creates a new instance of ChartDataChangedArgs
            </summary>
            <param name="chartViewModel">The model for the chart</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartDataChangedArgs.ChartViewModel">
            <summary>
            Gets or sets the ChartViewModel for the sender chart
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartExtentChangedEventArgs">
            <summary>
            Event arguments for the given features
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartExtentChangedEventArgs.#ctor">
            <summary>
            Creates a new instance of ChartExtentChangedEventArgs
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartExtentChangedEventArgs.#ctor(System.Collections.Generic.List{Geocortex.Essentials.Client.Tasks.Feature},Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartViewModel)">
            <summary>
            Creates a new instance of ChartExtentChangedEventArgs
            </summary>
            <param name="features">The list of features</param>
            <param name="chartViewModel">The model for the chart</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartExtentChangedEventArgs.VisibleFeatures">
            <summary>
            Gets or sets the list of visible features
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartExtentChangedEventArgs.ChartViewModel">
            <summary>
            Gets or sets the ChartViewModel for the sender chart
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.OkCancelDialogEvent">
            <summary>
            Event which indicates when an OkCancel dialog is required.
            Reference: http://csharperimage.jeremylikness.com/2009/09/decoupled-childwindow-dialogs-with.html
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.AlertDialogEvent">
            <summary>
            Event which indicates when an Alert dialog is required.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditLayerChangedEvent">
            <summary>
            The event that fires when a the current editing layer changes. 
            </summary>
            <remarks>
            This event refers to a change in which layer is active for editing rather than that an edit has taken place on a layer.
            </remarks>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditLayerVisibilityChangedEvent">
            <summary>
            The event that fires when the visibility of the current edit layer changes.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SaveEditsBeginEvent">
            <summary>
            The event that is fired when an editing operation begins.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SaveEditsCompletedEvent">
            <summary>
            The event that is fired when an editing operation completes successfully.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SaveEditsFailedEvent">
            <summary>
            The event that is fired when an editing operation fails.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.AttributeEditingCompleteEvent">
            <summary>
            The event that is fired when an editing operation succeeds.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAttributesCompleteEvent">
            <summary>
            The event that is fired when the edit attributes view is closed, and hence the user is done editing attributes.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.CopyFeatureStartedEvent">
            <summary>
            The event that is fired when copying a feature begins.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.CopyFeatureCompleteEvent">
            <summary>
            The event that is fired when copying a feature is complete and successful.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.CopyFeatureFailedEvent">
            <summary>
            The event that is fired when copying a feature fails.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditCancelledEvent">
            <summary>
            The event that is fired when an editing operation is cancelled.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.AlignToEdgeOperationCompleted">
            <summary>
            The event that is fired when the Advanced Editing Extension completes an Align to Edge Operation.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingActivatedEvent">
            <summary>
            The event that fires when a feature editing tool has been activated.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingCompletedEvent">
            <summary>
            The event that fires when a feature editing tool has completed.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditLayerChangedEventArgs">
            <summary>
            Event arguments for the editing layer change.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditLayerChangedEventArgs.#ctor(Geocortex.Essentials.Client.Layer)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditLayerChangedEventArgs"/> class.
            </summary>
            <param name="layer">The layer.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditLayerChangedEventArgs.Layer">
            <summary>
            Gets the layer.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditLayerChangedEventArgs.PreviousLayer">
            <summary>
            Gets the previous edit layer.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SaveEditsEventArgs">
            <summary>
            Event arguments for events that involve saving edits to a FeatureLayer.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SaveEditsEventArgs.#ctor(ESRI.ArcGIS.Client.FeatureLayer)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SaveEditsEventArgs"/> class with a FeatureLayer.
            </summary>
            <param name="layer">The layer.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SaveEditsEventArgs.Layer">
            <summary>
            Gets the FeatureLayer that this edit event is related to.
            </summary>
            <value>The layer.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.CopyFeatureStartedEventArgs">
            <summary>
            Event arguments that information about starting to copy a feature.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SaveEditsFailedEventArgs">
            <summary>
            Event arguments that contain information about a failed edit event on a FeatureLayer.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SaveEditsFailedEventArgs.#ctor(ESRI.ArcGIS.Client.FeatureLayer,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SaveEditsFailedEventArgs"/> class with FeatureLayer and Exception information.
            </summary>
            <param name="layer">The layer.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SaveEditsFailedEventArgs.#ctor(ESRI.ArcGIS.Client.FeatureLayer,ESRI.ArcGIS.Client.Tasks.EndEditEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SaveEditsFailedEventArgs"/> class with FeatureLayer and EndEditEventArgs information.
            </summary>
            <param name="layer">The layer.</param>
            <param name="editEventArgs">The <see cref="T:ESRI.ArcGIS.Client.Tasks.EndEditEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SaveEditsFailedEventArgs.Layer">
            <summary>
            Gets the FeatureLayer that this edit event is related to.
            </summary>
            <value>The layer.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SaveEditsFailedEventArgs.Exception">
            <summary>
            Gets the exception that caused the edit operation to fail.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SaveEditsFailedEventArgs.EditEventArgs">
            <summary>
            Gets the EndEditEventArgs that contain information about the results of the edit.
            </summary>
            <value>The edit event args.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditCancelledEventArgs">
            <summary>
            Event arguments that contain information about a cancelled edit.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditCancelledEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditCancelledEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditCancelledEventArgs.Layers">
            <summary>
            Gets the FeatureLayers that this event is related to.
            </summary>
            <value>The layers.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.AlignToEdgeOperationCompletedEventArgs">
            <summary>
            Event arguments that contain information about a Align to Edge operation that has been carried out in the Advanced Editing Extension
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.AlignToEdgeOperationCompletedEventArgs.Graphic">
            <summary>
            Gets or sets the graphic that has had its geometry modified
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingActionEventArgs">
            <summary>
            Editing action event arguments - base for <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingActivatedEventArgs">EditingActivatedEventArgs</see> and <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingCompletedEvent">EditingCompletedEvent</see>.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingActionEventArgs.Action">
            <summary>
            Gets the action.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingActivatedEventArgs.Sender">
            <summary>
            Gets the sender.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingActivatedEventArgs.Editor">
            <summary>
            Gets the <see cref="T:ESRI.ArcGIS.Client.Editor">Editor</see> (if applicable).
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingActivatedEventArgs.CommandParameter">
            <summary>
            Gets the command parameter.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingActivatedEventArgs.Layers">
            <summary>
            Gets the layers that may be affected.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingCompletedEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use when feature editing has completed an edit, whether by ESRI or Geocortex.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingCompletedEventArgs.Sender">
            <summary>
            Gets the sender.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingCompletedEventArgs.Editor">
            <summary>
            Gets the <see cref="T:ESRI.ArcGIS.Client.Editor">Editor</see> (if applicable).
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingCompletedEventArgs.Edits">
            <summary>
            Gets a list of edits.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction">
            <summary>
            Describes the action that caused an <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingCompletedEvent">EditingCompletedEvent</see>.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction.Add">
            <summary>
            The Add action.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction.Remove">
            <summary>
            The Remove action.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction.Cut">
            <summary>
            The Cut action.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction.DeleteSelected">
            <summary>
            The Delete Selected action.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction.ClearSelection">
            <summary>
            The Clear Selection action.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction.Select">
            <summary>
            The Select action.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction.Reshape">
            <summary>
            The Reshape action.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction.Cancel">
            <summary>
            The Cancel action.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction.EditVertices">
            <summary>
            The Edit Vertices action.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction.Save">
            <summary>
            The Save action.
            </summary>
            <remarks>
            The Save action indicates the save command has been submitted but the save action on the server has not yet completed.
            </remarks>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction.UndoEdits">
            <summary>
            The Undo Edits action.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction.Union">
            <summary>
            The Union action.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction.AlignToEdge">
            <summary>
            The Align to Edge action.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction.CopyFeature">
            <summary>
            The Copy Feature action.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction.AddIntersectingVertex">
            <summary>
            The Add Intersecting Vertex action.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditChange">
            <summary>
            Edit changes used by the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingCompletedEvent">EditingCompletedEvent</see> event.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditChange.Layer">
            <summary>
            Gets the layer the change was performed on.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditChange.Graphic">
            <summary>
            Gets the graphic that was changed.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditorEvents.EsriEditorActivatedEvent">
            <summary>
            The event that fires when the Editor class fires it's EditorActivated event.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditorEvents.EsriEditorDeactivatedEvent">
            <summary>
            The event that fires when the Editor class fires it's EditorDeactivated event.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditorEvents.GraphicSelectedEvent">
            <summary>
            The event that signals that a Graphic has been selected by the Editor.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditorEvents.GeometryEditedEvent">
            <summary>
            The event that fires when the EditGeometry editor changes the Geometry of a Graphic.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditorEvents.GraphicDeselectedEvent">
            <summary>
            The event that signals that a Graphic has been deselected by the Editor.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SearchHintRequestedEvent">
            <summary>
            Event raised when a search hint is requested.  
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SearchHintRequestedEventArgs">
            <summary>
            Event args supplied when a search hint is requested.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SearchHintRequestedEventArgs.Sender">
            <summary>
            Gets or sets the sender of the event
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SearchHintRequestedEventArgs.SearchHint">
            <summary>
            Gets or sets the hint requested
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MarkupChangedEvent">
            <summary>
            Event which fires when Markup is changed on the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EsriEditorActivatedEvent">
            <summary>
            Event which fires when the ESRI Editor is activated.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EsriEditorDeactivatedEvent">
            <summary>
            Event which fires when the ESRI Editor is deactivated.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MarkupLayerInScopeEvent">
            <summary>
            Event which fires when a new Markup layer is brought into scope.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MarkupChangedEventArgs">
            <summary>
            The base MarkupChangedEventArgs
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MarkupChangedEventArgs.#ctor(ESRI.ArcGIS.Client.GraphicsLayer)">
            <summary>
            Constructs a MarkupChangedEventArgs object.
            </summary>
            <param name="layer">The <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/> that the Markup has changed on.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MarkupChangedEventArgs.GraphicsLayer">
            <summary>
            Gets or sets the GraphicsLayer
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.RemoveMarkupEventArgs">
            <summary>
            Represents the removal of Markup from the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.RemoveMarkupEventArgs.#ctor(ESRI.ArcGIS.Client.GraphicsLayer,System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Graphic})">
            <summary>
            Constructs a RemoveMarkupEventArgs object.
            </summary>
            <param name="layer">The <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/> that the Markup has been removed from.</param>
            <param name="graphics">The collection of <see cref="T:ESRI.ArcGIS.Client.Graphic">Graphics</see> that have been removed.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.RemoveMarkupEventArgs.Graphics">
            <summary>
            Gets or sets the collection of <see cref="T:ESRI.ArcGIS.Client.Graphic">Graphics</see>
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.AddMarkupEventArgs">
            <summary>
            Represents the addition of Markup to the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.AddMarkupEventArgs.#ctor(ESRI.ArcGIS.Client.GraphicsLayer,ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Constructs an AddMarkupEventArgs object.
            </summary>
            <param name="layer">The <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/> that the Markup has been added to.</param>
            <param name="graphic">The <see cref="T:ESRI.ArcGIS.Client.Graphic"/> that has been added.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.AddMarkupEventArgs.Graphic">
            <summary>
            Gets or sets the <see cref="T:ESRI.ArcGIS.Client.Graphic">Graphic</see> that has been added.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditMarkupEventArgs">
            <summary>
            Represents the beginning or the end of editing of Markup on the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditMarkupEventArgs.#ctor(ESRI.ArcGIS.Client.GraphicsLayer,System.Boolean)">
            <summary>
            Constructs an EditMarkupEventArgs object.
            </summary>
            <param name="layer">The <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/> that the Markup has edited on.</param>
            <param name="isStart" default="true">The flag that represents if the editing is starting or ending</param>
            <remarks>It is up to the listener to determine what has changed on the Layer between starting and finishing the edit.</remarks>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ModuleLoadedEvent">
            <summary>
            Event which fires when a query has completed execution.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ModuleInitializedEvent">
            <summary>
            Event which fires when a query has completed execution.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ModuleLoadEventArgs">
            <summary>
            Event arguments associated with a completed query.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintPreviewActivatedEvent">
            <summary>
            Event which fires when the print preview is activated
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintPreviewDeactivatedEvent">
            <summary>
            Event which fires when the print preview is deactivated
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintPreviewActivatedEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:Geocortex.Essentials.Client.PrintTemplate"/> mouse events.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EventPayload`2">
            <summary>
            A generic typed payload to be used with events.
            </summary>
            <typeparam name="T1">The sender type.</typeparam>
            <typeparam name="T2">The argument type.</typeparam>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EventPayload`2.#ctor(`0,`1)">
            <summary>
            Creates an instance of the EventPayload class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EventPayload`2.Sender">
            <summary>
            Gets or sets the sender object.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EventPayload`2.Args">
            <summary>
            Gets or sets the argument object.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintPreviewActivatedEventArgs.#ctor(System.Object,Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintPreviewActivatedEventArgsPayload)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintPreviewActivatedEventArgs"/> class.
            </summary>
            <param name="sender">The sender.</param>.
            <param name="args">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintPreviewActivatedEventArgsPayload"/>.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintPreviewDeactivatedEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:Geocortex.Essentials.Client.PrintTemplate"/> mouse events.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintPreviewDeactivatedEventArgs.#ctor(System.Object,Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintPreviewDeactivatedEventArgsPayload)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintPreviewDeactivatedEventArgs"/> class.
            </summary>
            <param name="sender">The sender.</param>.
            <param name="args">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintPreviewDeactivatedEventArgsPayload"/>.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintPreviewActivatedEventArgsPayload">
            <summary>
            Parameters related to the preview activating.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintPreviewDeactivatedEventArgsPayload">
            <summary>
            Parameters related to the preview deactivating.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintParametersChangedEvent">
            <summary>
            Event which fires when printing parameters are changed
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintParametersChangedEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:Geocortex.Essentials.Client.PrintTemplate"/> mouse events.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintParametersChangedEventArgs.#ctor(Geocortex.Essentials.Client.PrintTemplate,Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintParametersChangedEventArgsPayload)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintParametersChangedEventArgs"/> class.
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.PrintTemplate"/></param>.
            <param name="args">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintParametersChangedEventArgsPayload"/></param>.
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.PrintParametersChangedEventArgsPayload">
            <summary>
            Represents the newly selected print parameters.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.QueryCompletedEvent">
            <summary>
            Event which fires when a query has completed execution.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.QueryCompletedEventArgs">
            <summary>
            Event arguments associated with a completed query.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.QueryCompletedEventArgs.#ctor(Geocortex.Essentials.Client.Layer,ESRI.ArcGIS.Client.Tasks.Query,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.QueryCompletedEventArgs"/> class.
            </summary>
            <param name="layer">The layer.</param>
            <param name="query">The query.</param>
            <param name="error">The error.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.QueryCompletedEventArgs.Layer">
            <summary>
            Gets the layer on which the query executed.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.QueryCompletedEventArgs.Query">
            <summary>
            Gets the query.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.QueryCompletedEventArgs.Error">
            <summary>
            Gets the error associated with a failed query.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureDetailsTabCreatedEvent">
            <summary>
            The event that fires when a tab is created in the feature details dialog
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureDetailsTabCreatedEventArgs">
            <summary>
            Event arguments for the FeatureDetailsTabCreatedEvent
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureDetailsTabCreatedEventArgs.#ctor">
            <summary>
            Creates a new instance of FeatureDetailsTabCreatedEventArgs
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureDetailsTabCreatedEventArgs.Sender">
            <summary>
            Gets or sets the sender of the event - typically, the FeatureDetailsContent control
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureDetailsTabCreatedEventArgs.DataGrid">
            <summary>
            Gets or sets the data grid that will display the feature's details
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureDetailsTabCreatedEventArgs.Feature">
            <summary>
            Gets or sets the feature in question
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureDetailsTabCreatedEventArgs.DataLinkTable">
            <summary>
            Gets or sets the linked data - might be a table from a data link result, or it might be a data table from related records
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SenderEventArgs">
            <summary>
            Event arguments that includes the instance of the sender that raised the event.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SenderEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SenderEventArgs"/> class.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SenderEventArgs.Sender">
            <summary>
            Gets the instance of the sender that raised the event.
            </summary>
            <value>
            The sender.
            </value>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.DataLinkCsvExportHelper.FindDataLinkHeaders(System.Collections.ObjectModel.ObservableCollection{Geocortex.Essentials.Client.Tasks.Feature},System.Int32)">
            <summary>
            Finds a feature in a feature collection that has a valid data link table within its DataLinkResult at the specified index.
            </summary>
            <param name="features">A collection of features</param>
            <param name="index">Index within DataLinkResults</param>
            <returns>a feature if one is found, otherwise null</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.DataLinkCsvExportHelper.GetDataLinkCount(Geocortex.Essentials.Client.Tasks.FeatureSet)">
            <summary>
            Find the max number of data links any given feature in the feature set may have
            </summary>
            <param name="featureSet">Feature Set to examine</param>
            <returns>A max count of the number of data links.</returns>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.CSVFileAndZipBundleHelper.DefaultCsvDelimiter">
            <summary>
            The default delimiter ",".
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.CSVFileAndZipBundleHelper.Export(Geocortex.Essentials.Client.Tasks.FeatureSet,System.String,System.Boolean,System.Boolean)">
            <summary>
            Given a feature set and delimiter will choose to export a zip file or single CSV file depending on whether the feature set contains data links.
            </summary>
            <param name="featureSet">Set of features to export.</param>
            <param name="delimiter">Delimiter to be used for separation within the CSV file(s).</param>
            <param name="includeDataLinks">Include/Exclude Data links</param>
            <param name="includeRelationships">Include/Exclude Relationship Feature Information</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.CSVFileAndZipBundleHelper.ExportFeaturesAndExtras(Geocortex.Essentials.Client.Tasks.FeatureSet,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create a zip package of files which contain the feature attributes, the data links (if applicable) and the attributes of related features (if applicable).
            </summary>
            <param name="featureSet">The set of features to export.</param>
            <param name="delimiter">String to use to delimit the CSV elements</param>
            <param name="includeDataLinks">Export Data Links?</param>
            <param name="includeRelationships">Export Relationship Features?</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.CSVFileAndZipBundleHelper.FeatureSetHasDatalinks(Geocortex.Essentials.Client.Tasks.FeatureSet)">
            <summary>
            Given a feature set, determine if there is any valid data to pull from the data linking results. Sometimes the data linking does not work, however
            all the easy indicators may say that there are valid links (layer and feature), but they can just be null references in place of data tables.
            </summary>
            <param name="featureset">Feature set to examine.</param>
            <returns>True if there is valid data to capture, otherwise returns false.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.CSVFileAndZipBundleHelper.FeatureSetHasRelationships(Geocortex.Essentials.Client.Tasks.FeatureSet)">
            <summary>
            Determine if a feature set contains valid data in its Relationships for export
            </summary>
            <param name="featureset">Feature Set to examine.</param>
            <returns>True if valid data exists, otherwise false.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.CSVFileAndZipBundleHelper.AddEntryToZip(ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String,System.String)">
            <summary>
            Add an entry (file) to a outgoing Zip file.
            </summary>
            <param name="zip">Zip file to add file to</param>
            <param name="filename">Name of the file to add</param>
            <param name="contents">Contents of that file</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.CSVFileAndZipBundleHelper.CreateFileName(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Create a Windows-safe file name from a string. 
            </summary>
            <param name="original">Original Filename</param>
            <param name="extension">Extension to add to the file name</param>
            <param name="usedNames">List of filenames already in the Zip Package.</param>
            <returns>A Windows acceptable filename string to be used as a filename.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.CSVFileAndZipBundleHelper.ExportFeatures(Geocortex.Essentials.Client.Tasks.FeatureSet,System.String)">
            <summary>
            Exports a CSV file of the attributes of the feature(s).
            </summary>
            <param name="featureSet">Feature set to export.</param>
            <param name="delimiter">Delimiter to use in the file.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.CSVFileAndZipBundleHelper.FormatCsvElement(System.Object,System.String)">
            <summary>
            Formats a given element to ensure that it is in valid CSV format when using the specified delimiter.
            </summary>
            <param name="element">The element.</param>
            <param name="delimiter">The delimiter used to separate values.</param>
            <returns>
            A formatted CSV element value, or an empty string if the element is null.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.CSVFileAndZipBundleHelper.ProcessTableRow``1(System.Collections.ObjectModel.Collection{``0},System.String)">
            <summary>
            Processes a row of a table and returns a CSV version of that row.
            </summary>
            <typeparam name="T">Type of collection, generally Object or String.</typeparam>
            <param name="row">Collection of items to parse into CSV format.</param>
            <param name="delimiter">Delimiter to use in CSV format.</param>
            <returns>A CSV acceptable string with the delimiter parameter used as the delimiter.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.FeatureAttachmentsExportHelper">
            <summary>
            Encapsulates functionality around zipping and downloading feature attachments.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.FeatureAttachmentsExportHelper.ExportFeatureAttachment(Geocortex.Essentials.Client.AttachmentInfo)">
            <summary>
            Exports a single feature attachment.
            </summary>
            <param name="ai">The attachment to export.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.FeatureAttachmentsExportHelper.ExportAttachment(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Saves a single feature attachment given a SaveAttachmentArgs instance.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.DoWorkEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.FeatureAttachmentsExportHelper.ExportFeatureAttachments(Geocortex.Essentials.Client.Tasks.Feature)">
            <summary>
            Exports a specified feature's attachments as a compressed ZIP file.
            </summary>
            <param name="feature">The feature to export attachments for.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.FeatureAttachmentsExportHelper.ZipAttachments(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Zips the attachments given a ZipArgs instance.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.DoWorkEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.FeatureAttachmentsExportHelper.Export_Complete(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Handles the Complete event of the export attachments work task.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.FeatureAttachmentsExportHelper.ExportArgs">
            <summary>
            Encapsulates args related to a request to export one or all attachments of a feature.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.FeatureAttachmentsExportHelper.ExportArgs.AttachmentInfo">
            <summary>
            Gets the attachment info for which a single attachment will be saved locally.
            </summary>
            <value>
            The attachment info.
            </value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.FeatureAttachmentsExportHelper.ExportArgs.Feature">
            <summary>
            Gets the feature for which all attachments will be zipped and exported.
            </summary>
            <value>
            The feature.
            </value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.FeatureAttachmentsExportHelper.ExportArgs.FileName">
            <summary>
            Gets the name of the zip file created for export.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.FeatureAttachmentsExportHelper.ExportArgs.FileStream">
            <summary>
            Gets the file stream to pipe zipped content into.
            </summary>
            <value>
            The file stream.
            </value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.FeatureAttachmentsExportHelper.ExportArgs.Dispatcher">
            <summary>
            Gets the dispatcher for the thread on which the FileStream was opened 
            so that it may eventually be closed/disposed using this same dispatcher.
            </summary>
            <value>
            The dispatcher.
            </value>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.RelatedFeaturesCsvExportHelper.ConvertRelatedFeatureDataToCSV(Geocortex.Essentials.Client.Tasks.FeatureSet,System.String)">
            <summary>
            Create a list of tuples. that contain the suggested filename and file contents for each relationship on a set of features.
            </summary>
            <param name="featureSet">Feature set to pull data from.</param>
            <param name="delimiter">Delimiter to use in the CSV formatting.</param>
            <returns>A list of tuples containing the filename in item1 and contents in item2</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.RelatedFeaturesCsvExportHelper.GetRelatedRecords(Geocortex.Essentials.Client.Tasks.FeatureSet,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Create a dictionary of the names and field counts of all the related records in a feature set.
            </summary>
            <param name="featureSet">Features set to parse</param>
            <param name="records">Dictionary to add records to.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.RelatedFeaturesCsvExportHelper.FindRelatedRecords(Geocortex.Essentials.Client.Tasks.Feature,System.String,System.Int32)">
            <summary>
            Finds the correct feature set of related features given a display name and attribute count of the related record.
            </summary>
            <param name="feature">Feature to attempt to find related records on.</param>
            <param name="recordName">Display name of the related record you are looking for.</param>
            <param name="attributeCount">Number of attributes the features of the related record you are looking for have.</param>
            <returns>The feature set looked for, or null if it could not be found.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.HelpRequestedEvent">
            <summary>
            Event raised when the something has invoked a request for help.  The event args provide the context to determine what help should shown.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.HelpRequestedEventArgs">
            <summary>
            Event args supplied when help is requested.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.HelpRequestedEventArgs.Sender">
            <summary>
            Gets or sets the sender of the event
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.FeatureEditing.EditingState">
            <summary>
            Provides a shared set of information / data about the current editing session.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.FeatureEditing.UnifiedEditor">
            <summary>
            This class attempts to combine an <see cref="T:ESRI.ArcGIS.Client.Editor"/> and an <see cref="T:ESRI.ArcGIS.Client.EditGeometry"/>
            together based on the currently selected Graphic. It also exposes a number of edit-specific events.
            </summary>
            <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditorEvents.EsriEditorActivatedEvent"/>
            <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditorEvents.EsriEditorDeactivatedEvent"/>
            <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditorEvents.GraphicSelectedEvent"/>
            <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditorEvents.GeometryEditedEvent"/>
            <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditorEvents.GraphicDeselectedEvent"/>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.NotificationObjectBase.RaiseAllPropertiesChanged">
            <summary>
            This can be used to indicate that all property values have changed.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.NotificationObjectBase.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            This raises the INotifyPropertyChanged.PropertyChanged event to indicate
            a specific property has changed value. This version provides a compile-time safe
            way to indicate the property through the use of an expression tree / lambda.
            Be aware that for high-volume changes this version might be much slower than
            the above "magic-string" version due to the creation of an expression and runtime lookup.
            </summary>
            <example>
            <![CDATA[
               // Raise the PropertyChanged event for the Name property, even from outside the setter
               RaisePropertyChanged(() => this.Name);
            ]]>
            </example>
            <typeparam name="T">Type where it is being raised.</typeparam>
            <param name="propExpr">Property to raise PropertyChanged event on.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.NotificationObjectBase.RaisePropertyChanged(System.String)">
            <summary>
            This raises the INotifyPropertyChanged.PropertyChanged event to indicate
            a specific property has changed value.
            </summary>
            <example>
            <![CDATA[
               public string Name
               {
                  get { return _name; }
                  set
                  {
                      _name = value;
                      RaisePropertyChanged();
                  }
               }
            ]]>
            </example>
            <param name="propertyName">Name of the property to raise PropertyChanged event on.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.NotificationObjectBase.SetPropertyValueWithNotify``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            This is used to set a specific value for a property and raise the
            INotifyPropertyChanged.PropertyChanged event if that value changed.
            This version provides a compile-time safe way to indicate the property
            through the use of an expression tree / lambda.
            </summary>
            <typeparam name="T">Type where it is being raised.</typeparam>
            <param name="storageField">The backing field behind the property.</param>
            <param name="newValue">The new value to set the backing field to.</param>
            <param name="propExpr">Property to raise PropertyChanged event on.</param>
            <returns>
            <value>true</value> if the backing field changed value and fired a PropertyChanged event, <value>false</value> otherwise.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.NotificationObjectBase.SetPropertyValueWithNotify``1(``0@,``0,System.String)">
            <summary>
            This is used to set a specific value for a property and raise the
            INotifyPropertyChanged.PropertyChanged event if that value changed.
            </summary>
            <example>
            <![CDATA[
               public string Name
               {
                  get { return _name; }
                  set
                  {
                      // Set _name to value and raise the PropertyChanged event on Name if _name changed
                      SetPropertyValueWithNotify<string>(ref _name, value);
                  }
               }
            ]]>
            </example>
            <typeparam name="T">Type where it is being raised.</typeparam>
            <param name="storageField">The backing field behind the property.</param>
            <param name="newValue">The new value to set the backing field to.</param>
            <param name="propertyName">Name of the property to raise PropertyChanged event on.</param>
            <returns>
            <value>true</value> if the backing field changed value and fired a PropertyChanged event, <value>false</value> otherwise.
            </returns>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.NotificationObjectBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.FeatureEditing.UnifiedEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.FeatureEditing.UnifiedEditor"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.FeatureEditing.UnifiedEditor.OnImportsSatisfied">
            <summary>
            Called when a part's imports have been satisfied and it is safe to use.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.FeatureEditing.UnifiedEditor.EventAggregator">
            <summary>
            Gets or sets the event aggregator.
            </summary>
            <value>The event aggregator.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.FeatureEditing.UnifiedEditor.Site">
            <summary>
            Gets or sets the site.
            </summary>
            <value>The site.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Interactivity.MouseOutToHideBehavior">
            <summary>
            This is a behavior that can be attached to any FrameworkElement that automatically hides
            the associated object after a timed delay of the mouse being off that object.  The associated
            associated object is also hidden on a click of the RootVisual.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Interactivity.MouseOutToHideBehavior.ExecuteHide">
            <summary>
            Begins the hide animation to hide the associated object.  This is so that controls can manually
            hide the associated object (for example on an item click).
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.HelpCommands.ShowHelpTopic">
            <summary>
            Gets the command for showing help for the supplied unique topic key.
            </summary>
            <value>The show help.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.HelpCommands.InvokeClickHelp">
            <summary>
            Gets the command that puts the system into a state to capture a mouse click
            to launch context sensitive help, as well as then raise the HelpRequested event.
            </summary>
            <value>The invoke click help.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Help.HelpManager">
            <summary>
            A central manager class responsible for maintaining a mapping of help topic keys to help topic actions.  The
            action to perform for a topic type is extensible and is supplied external to HelpManager.  For example, if a
            Uri is used in the help system, then a Uri handler can be registered that opens a Uri in a popup window.  Then
            Uris can be registered as unique topics.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Help.HelpManager.RegisterHelpTopicHandler``1(System.Action{``0})">
            <summary>
            Registers a help topic handler for the given topic type.
            </summary>
            <typeparam name="T">The type of topic that the handler handles.</typeparam>
            <param name="action">The action to perform on that type.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Help.HelpManager.RegisterHelpTopic``1(System.String,``0)">
            <summary>
            Registers topic with the HelpManager for the given type T.
            This function will overwrite previously registered handlers.
            </summary>
            <typeparam name="T">The Type of the help topic content</typeparam>
            <param name="topicKey">The topic key.</param>
            <param name="topic">The topic.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Help.HelpManager.ExecuteHelpAction(System.String)">
            <summary>
            Executes the help action on the help topic with the registered handler.
            </summary>
            <param name="topicKey">The topic key.</param>
            <returns>true if the action ran successfully; false if it didn't</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Help.HelpManager.RegisterHelpTopicLookup(System.Windows.DependencyObject,System.String)">
            <summary>
            Registers a topic key with a UI object.
            This function will overwrite any key previously registered for that object handle.
            </summary>
            <param name="handle">The UI object to associate with the topic key.</param>
            <param name="topicKey">The topic key.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Help.HelpManager.GetHelpTopicKey(System.Windows.DependencyObject)">
            <summary>
            Gets the most relevant help topic key associated with the handle by 
            walking up the visual tree and finding the first match.
            </summary>
            <param name="handle">The handle.</param>
            <returns>the key if found; null if not</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Help.HelpManager.GetContainingHandle(System.Windows.DependencyObject)">
            <summary>
            Gets the containing handle.
            </summary>
            <param name="childControl">The child control.</param>
            <returns>the containing object if found; null if not</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Help.HelpManager.HasHelpTopic(System.String)">
            <summary>
            Determines whether the HelpManager has the specific help topic key.
            </summary>
            <param name="topicKey">The topic key.</param>
            <returns>
            <c>true</c> if help topic exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Help.HelpManager.RemoveHelpTopic(System.String)">
            <summary>
            Removes the help topic for the specific key.
            </summary>
            <param name="topicKey">The topic key.</param>
            <returns>true if the topic was found and removed; otherwise false</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Help.HelpRequestContext">
            <summary>
            Information about the context in which help is being requested.  It might be possible
            for help to be requested by invoking the request from within a UI object, or by clicking
            somewhere on the user interface with the intention of obtaining help for the item clicked on.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Help.HelpRequestContext.MouseClickPoint">
            <summary>
            Gets or sets the mouse click point.
            </summary>
            <value>The mouse click point.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Help.HelpRequestContext.SourceObject">
            <summary>
            Gets or sets the source object for which help is being requested.
            </summary>
            <value>The source object.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CalloutCommands">
            <summary>
            Commands performed on the results list
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CalloutCommands.AddCallout">
            <summary>
            Gets the command for adding a callout to the map.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CalloutCommands.EnumerateCallouts">
            <summary>
            Gets the command for enumerating callouts.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CalloutCommands.RemoveAllCallouts">
            <summary>
            Gets the command for removing all map callouts.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CalloutCommands.RemoveCallout">
            <summary>
            Gets the command for removing a callout based on the graphic provided.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CalloutCommands.RemoveCalloutsFromLayer">
            <summary>
            Gets the command for removing all map callouts for a specified layer.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeCommandCanExecuteMode">
            <summary>
            Enum for specifying the mode in which the CanExecute method will run.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeCommandCanExecuteMode.RequireAny">
            <summary>
            Requires only a single ICommand.CanExecute to return true in order to return true for the CompositeDelegateCommand.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeCommandCanExecuteMode.RequireAll">
            <summary>
            Requires all ICommand.CanExecute to return true in order to return true for the CompositeDelegateCommand.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeCommandExecuteMode">
            <summary>
            Enum for specifying which of the registered commands the composite command will invoke.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeCommandExecuteMode.ExecuteAll">
            <summary>
            Iterates, tests, and executes all of the registered commands for which CanExecute returns true.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeCommandExecuteMode.ExecuteFirst">
            <summary>
            Iterates, testes, and executes only the first registered command for which CanExecute returns true.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeCommandExecutePriority">
            <summary>
            Enumeration used when registering a command with a composite command.  Commands registered with priority High
            will be tested and run before commands with priority Normal.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeCommandExecutePriority.Normal">
            <summary>
            The default execution priority level for registering commands with a composite command.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeCommandExecutePriority.High">
            <summary>
            When performing check's on a command's CanExecute as well as actually executing a command, commands
            that are registered with priority High will be checked/executed before commands with priority Normal.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommandBase">
            <summary>
            Base class to implement strongly typed relative to the CompositeCommand.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommandBase.Commands">
            <summary>
            The <see cref="T:Microsoft.Practices.Prism.Commands.CompositeCommand"/> used in the core of this Class
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommandBase.ClearCommands">
            <summary>
            Clears all registered commands.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommandBase.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommandBase.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommandBase.ExecuteCommand(System.Windows.Input.ICommand,System.Object)">
            <summary>
            Executes the command.
            </summary>
            <param name="command">The command.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommandBase.CanExecuteMode">
            <summary>
            Gets or sets the mode used for evaluating CanExecute.
            </summary>
            <value>
            The CanExecute mode.
            </value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommandBase.ExecuteMode">
            <summary>
            Gets or sets the mode used when executing registered commands.
            </summary>
            <value>The Execute mode.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommandBase.ExecuteAsynchronously">
            <summary>
            Gets or sets a value indicating whether the command should execute the registered delegate commands asynchronously or not.
            If set to true, the commands will be invoked on thread pool threads.  If false, the commands will be invoked synchronously
            on the UI thread.
            </summary>
            <value>
            <c>true</c> if the command should execute registered delegate commands asynchronously on thread pool threads; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommandBase.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.EditingCommands.StartAttributeEditingCommand">
            <summary>
            Gets the start attribute editing command.  This command sets up the map so
            that you can click on a feature and have an edit attributes form be displayed.
            </summary>
            <value>The start attribute editing command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.EditingCommands.CancelAttributeEditingCommand">
            <summary>
            Gets or sets the cancel attribute editing command.  This command cancels the process
            started by StartAttributeEditingCommand.  After executing this command, you can no longer
            click on a feature to edit it.
            </summary>
            <value>The cancel attribute editing command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.EditingCommands.FindGraphicsToEditAttributesCommand">
            <summary>
            Gets the command to find graphics to edit attributes.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.EditingCommands.EditAttributesCommand">
            <summary>
            Gets the edit attributes command.  This command shows a form allow you to edit
            feature attributes.
            </summary>
            <value>The edit attributes command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.EditingCommands.AddFeatureToEditLayerCommand">
            <summary>
            Gets a command that copies a graphic to the active editing layer.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.EditingCommands.EnableCommitEditedLayer">
            <summary>
            Gets the command to enable the Save Edits button for the layer currently being edited.  Note that uncommitted edits must still be present for the button to actually be enabled.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.EditingCommands.DisableCommitEditedLayer">
            <summary>
            Gets the command to disable the Save Edits button for the layer currently being edited.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.EditingCommands.CommitEditedLayer">
            <summary>
            Gets the command to save edits.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.EditingCommands.StartAddIntersectingVertexToolCommand">
            <summary>
            Gets the command to start the Add Intersecting Vertex tool.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.EditingCommands.CancelAddIntersectingVertexToolCommand">
            <summary>
            Gets the command to cancel the Add Intersecting Vertex tool.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.EditingCommands.FindIntersectingVerticesCommand">
            <summary>
            Gets the command to find intersecting vertices.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.EditingCommands.StartEditGeometryToolCommand">
            <summary>
            Gets the command to start the Edit Geometry tool.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.EditingCommands.CancelEditGeometryToolCommand">
            <summary>
            Gets the command to cancel the Edit Geometry tool.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.EditingCommands.FindGraphicsToEditGeometryCommand">
            <summary>
            Gets the command to find graphics to edit geometry.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ExportMapCommands">
            <summary>
            Commands used to export the map
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ExportMapCommands.ShowExportMapDialog">
            <summary>
            Gets the ExportMap command.
            </summary>
            <value>The ExportMap command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureSetManagerCommands.OpenFeatureSetCollection">
            <summary>
            Gets the command to open a particular feature set collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureSetManagerCommands.CloseFeatureSetCollection">
            <summary>
            Gets the command to close a particular feature set collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureSetManagerCommands.OpenDefaultFeatureSetCollection">
            <summary>
            Gets the command to open the default feature set collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureSetManagerCommands.CloseDefaultFeatureSetCollection">
            <summary>
            Gets the command to close the default feature set collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureSetManagerCommands.AppendToDefaultCollection">
            <summary>
            Gets the command to append the specified feature set collection to the default collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureSetManagerCommands.AppendToDefaultCollectionByID">
            <summary>
            Gets the command to append the feature set collection specified by the id to the default collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureSetManagerCommands.RemoveCollection">
            <summary>
            Gets the command to remove a particular feature set collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureSetManagerCommands.RemoveCollectionByID">
            <summary>
            Gets the command to remove a particular feature set collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureSetManagerCommands.SetActiveCollectionID">
            <summary>
            Gets the command to set the specified feature collection as active.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureSetManagerCommands.SetActiveFeatureSetID">
            <summary>
            Gets the command to set the specified feature set as active.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureSetManagerCommands.SetActiveCollection">
            <summary>
            Gets the command to set the specified feature collection as active.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureSetManagerCommands.SetDefaultCollectionToActiveCollection">
            <summary>
            Gets the command to set the default feature collection as active.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureSetManagerCommands.SetActiveFeatureSet">
            <summary>
            Gets the command to set the specified feature set as active.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FileCommands">
            <summary>
            Commands performed on files
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FileCommands.#cctor">
            <summary>
            Initializes the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FileCommands"/> class.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FileCommands.OpenCsvDialog">
            <summary>
            Gets the command for displaying and open file dialog for CSV files.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FileCommands.OpenShapefileDialog">
            <summary>
            Gets the command for displaying and open file dialog for Shapefiles.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FileCommands.OpenExcelFileDialog">
            <summary>
            Gets the command for displaying open file dialog for Excel files.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FileCommands.AddShapeFromStream">
            <summary>
            Gets the command for adding shape file from the IsolatedStorageFileStream.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.GeographyCommands">
            <summary>
            Geography related commands.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.GeographyCommands.ForwardGeocode">
            <summary>
            Gets the command for performing a forward geocode operation.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.GeographyCommands.ProjectGeometry">
            <summary>
            Gets the command for projecting geometry from one coordinate system to another.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.GeographyCommands.ReverseGeocode">
            <summary>
            Gets the command for performing a reverse geocode operation on a string.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.GeographyCommands.ReverseGeocodePoint">
            <summary>
            Gets the command for performing a reverse geocode operation on a point
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerThemeCommands.SwitchToLayerTheme">
            <summary>
            Gets the command to switch to a layer theme.
            This command takes a parameter which is either the layer theme ID or the display name.
            It activates the theme and updates the map based on the theme settings in the site.
            </summary>
            <value>The switch to theme command.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LogCommands">
            <summary>
            Logging related commands.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LogCommands.ShowLog">
            <summary>
            Gets the command for showing the log.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LogCommands.HideLog">
            <summary>
            Gets the command for hiding the log.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MarkupCommands">
            <summary>
            Commands related to markup functionality.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MarkupCommands.AddMarkup">
            <summary>
            Gets the add markup command.
            </summary>
            <value>The add markup command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MarkupCommands.AddCustomMarkup">
            <summary>
            Gets the add custom markup command.
            </summary>
            <value>The add custom markup command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MarkupCommands.AddTextMarkup">
            <summary>
            Gets the add markup command.
            </summary>
            <value>The add markup command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MarkupCommands.AddMarkupFeature">
            <summary>
            Gets the add markup feature command.
            </summary>
            <value>The add markup feature command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MarkupCommands.ClearMarkup">
            <summary>
            Gets the clear markup command.
            </summary>
            <value>The clear markup command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MarkupCommands.ClearMarkupQuiet">
            <summary>
            Gets the clear markup quiet command.
            </summary>
            <value>The clear markup quiet command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MarkupCommands.ExtractMarkup">
            <summary>
            Gets the extract markup command.
            </summary>
            <value>The extract markup command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MarkupCommands.AddTemporaryMarkup">
            <summary>
            Gets the add temporary markup command.
            </summary>
            <value>The add temporary markup command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MarkupCommands.AddTemporaryMarkupGeometry">
            <summary>
            Gets the add temporary markup geometry command.
            </summary>
            <value>The add temporary markup geometry command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MarkupCommands.ClearTemporaryMarkup">
            <summary>
            Gets the clear temporary markup command.
            </summary>
            <value>The clear temporary markup command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MarkupCommands.SetDrawMode">
            <summary>
            Gets the set Draw mode command.
            </summary>
            <value>The set Draw mode command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MarkupCommands.UndoMarkup">
            <summary>
            Gets the Undo Markup command.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MarkupCommands.RedoMarkup">
            <summary>
            Gets the Redo Markup command.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.OptimizerCommands.LogEvent">
            <summary>
            Gets the LogEvent command.
            </summary>
            <value>The Log Event command.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands">
            <summary>
            Commands used to perform searches
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.SwitchToLayerView">
            <summary>
            Gets the command for switching to the layer list view
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.SwitchToLegendView">
            <summary>
            Gets the command for switching to the legend view
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.SelectBaseMap">
            <summary>
            Gets the command for selecting the given base map (by layer name)
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.ClusterFeatures">
            <summary>
            Gets the command to cluster features of a layer
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.DeclusterFeatures">
            <summary>
            Gets the command to decluster features of a layer
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.ClusterEsriFeatures">
            <summary>
            Gets the command to cluster features of an Esri layer
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.DeclusterEsriFeatures">
            <summary>
            Gets the command to decluster features of an Esri layer
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.AddHeatMapFromLayer">
            <summary>
            Gets the command to create a heap map from a layer
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.ModifyHeatMapFromLayer">
            <summary>
            Gets the command to modify a heap map from a layer
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.RemoveHeatMapFromLayer">
            <summary>
            Gets the command to remove a heat map from a layer and restore the graphics layer
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.AddHeatMapFromEsriLayer">
            <summary>
            Gets the command to create a heap map from an Esri layer
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.ModifyHeatMapFromEsriLayer">
            <summary>
            Gets the command to modify a heap map from an Esri layer
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.RemoveHeatMapFromEsriLayer">
            <summary>
            Gets the command to remove a heat map from an Esri layer and restore the graphics layer
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.SetDefaultHeatMapAttributes">
            <summary>
            Gets the command to set a heat map with its default attributes
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.ShowHeatMapView">
            <summary>
            Gets the command to show the Heat Maps panel from an Esri layer
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.UpdateLayer">
            <summary>
            Gets the command to reload or update from the layer source
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.AddMapLayerInteractive">
            <summary>
            Gets the command for adding an interactive layer
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.LayerListCommands.AddMapLayerNonInteractive">
            <summary>
            Gets the command for adding a layer non interactively.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapTipCommands">
            <summary>
            Commands related to Map Tips.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapTipCommands.DisableMapTips">
            <summary>
            Gets the command for disabling map tips.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapTipCommands.EnableMapTips">
            <summary>
            Gets the command for enabling map tips.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapTipCommands.HideMapTips">
            <summary>
            Gets the command for hiding map tips if they are enabled.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapTipCommands.HideFeatureDetails">
            <summary>
            Gets the command for hiding feature details.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapTipCommands.ShowMapTips">
            <summary>
            Gets the command for showing map tips if they are enabled.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapTipCommands.ShowMapTip">
            <summary>
            Gets the command for showing the details of a feature
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapTipCommands.MaximizeMapTip">
            <summary>
            Gets the command for maximizing the map tip.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapTipCommands.HideAllMapTips">
            <summary>
            Gets the command for hiding all map tips
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapTipCommands.RestoreAllMapTips">
            <summary>
            Gets the command for restoring all map tips
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapTipCommands.SuspendMapTips">
            <summary>
            Gets the command for suspending map tips.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapTipCommands.ResumeMapTips">
            <summary>
            Gets the command for resuming map tips.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandWrapper">
            <summary>
            An object that wraps an <see cref="T:System.Windows.Input.ICommand"/> and its parameter type.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandWrapper"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandWrapper.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandWrapper.CanExecute(System.Object,System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
            <param name="context">The context, for token value substitution - such as a Feature.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandWrapper.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandWrapper.Execute(System.Object,System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
            <param name="context">The context, for token value substitution - such as a Feature.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandWrapper.Command">
            <summary>
            Gets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandWrapper.ParameterType">
            <summary>
            Gets or sets the type of the command parameter.
            </summary>
            <value>The type of the command parameter.</value>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandWrapper.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandRegistry">
            <summary>
            A registry of named commands.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandRegistry.#ctor(Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleTracker)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandRegistry"/> class.
            </summary>
            <param name="moduleTracker">The module tracker.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandRegistry.RegisterCommand(System.String,System.Windows.Input.ICommand,System.Type)">
            <summary>
            Registers the command.
            </summary>
            <param name="id">The id of the command.</param>
            <param name="command">The command.</param>
            <param name="parameterType">Type of the command parameter.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandRegistry.GetCommand(System.String,System.String)">
            <summary>
            Gets the command from the registry.
            </summary>
            <param name="id">The id of the command.</param>
            <param name="moduleName">Name of the module.</param>
            <returns>The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandWrapper"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If id is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandRegistry.GetCommand(System.String)">
            <summary>
            Gets the command from the registry.
            </summary>
            <param name="id">The id of the command.</param>
            <returns>The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandWrapper"/>.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandRegistry.Register(System.String,System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Registers the specified id.
            </summary>
            <param name="id">The id.</param>
            <param name="executeAction">The execute action.</param>
            <param name="canExecutePredicate">The can execute predicate.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommand`1">
            <summary>
            A strongly typed relative to the CompositeCommand - Used to register DelegateCommand with a parameter type
            </summary>
            <typeparam name="T">The type of parameter passed to the command.</typeparam>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommand`1.RegisterCommand(Microsoft.Practices.Prism.Commands.DelegateCommand{`0})">
            <summary>
            Registers the command.
            </summary>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">If command is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommand`1.RegisterCommand(Microsoft.Practices.Prism.Commands.DelegateCommand{`0},Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeCommandExecutePriority)">
            <summary>
            Registers the command.
            </summary>
            <param name="command">The command.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommand`1.UnregisterCommand(Microsoft.Practices.Prism.Commands.DelegateCommand{`0})">
            <summary>
            Unregisters the command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommand">
            <summary>
            A strongly typed relative to the CompositeCommand - Used to register DelegateCommand without a parameter type
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommand.RegisterCommand(Microsoft.Practices.Prism.Commands.DelegateCommand)">
            <summary>
            Registers the command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommand.RegisterCommand(Microsoft.Practices.Prism.Commands.DelegateCommand,Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeCommandExecutePriority)">
            <summary>
            Registers the command.
            </summary>
            <param name="command">The command.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CompositeDelegateCommand.UnregisterCommand(Microsoft.Practices.Prism.Commands.DelegateCommand)">
            <summary>
            Unregisters the command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ExportCommands">
            <summary>
            Collection of commands related to exporting.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ExportCommands.ExportFeaturesToCsv">
            <summary>
            Gets the export features to CSV command.
            </summary>
            <value>The export features to CSV command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ExportCommands.ExportFeaturesToCsvSemicolonDelimited">
            <summary>
            Gets the export features to CSV (semicolon delimited) command.
            </summary>
            <value>The export features to CSV (semicolon delimited) command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ExportCommands.ExportFeaturesToCsvWithDataLinks">
            <summary>
            Gets the export features to CSV with Data Links command.
            </summary>
            <value>The export features to CSV with Data Links command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ExportCommands.ExportFeaturesToCsvWithDataLinksSemicolonDelimited">
            <summary>
            Gets the export features to CSV (semicolon delimited) with Data Links command.
            </summary>
            <value>The export features to CSV (semicolon delimited) with Data Links command. </value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ExportCommands.ExportFeaturesToCsvWithExtras">
            <summary>
            Gets the export features to CSV with extras (Data Links and Related Features) command.
            </summary>
            <value> The export features to CSV with extras (Data Links and Related Features) command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ExportCommands.ExportFeaturesToCsvWithExtrasSemicolonDelimited">
            <summary>
            Gets the export features to CSV (semicolon delimited) with extras (Data Links and Related Features) command.
            </summary>
            <value>The export features to CSV (semicolon delimited) with extras (Data Links and Related Features) command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ExportCommands.ExportFeatureAttachment">
            <summary>
            Gets the export feature attachment command.
            </summary>
            <value>The export feature attachment command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ExportCommands.ExportFeatureAttachments">
            <summary>
            Gets the export feature attachments command.
            </summary>
            <value>The export feature attachments command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureCommands.ShowBufferFeaturesOptions">
            <summary>
            Gets the Buffer feature command. (Deprecated, use IdentifyCommands.IdentifyBufferedFeatureSet)
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureCommands.BufferFeatures">
            <summary>
            Gets the Buffer features command.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureCommands.ClearHighlights">
            <summary>
            Gets the command to clear the highlight layer graphics
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureCommands.HighlightFeature">
            <summary>
            Gets the command to highlight the given feature
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureCommands.HighlightFeatureSet">
            <summary>
            Gets the command to highlight the given feature
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureCommands.ListFeatureSet">
            <summary>
            Gets the command to list the given feature set
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureCommands.HighlightFeatures">
            <summary>
            Gets the command to highlight the given feature
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.FeatureCommands.ShowFeatureDetails">
            <summary>
            Gets the command for showing the details of a feature
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.IdentifyCommands">
            <summary>
            Commands related to identify functionality.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.IdentifyCommands.DisplayForSelectNone">
            <summary>
            Gets the command to clear the list of "Display For" identifiable layers.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.IdentifyCommands.DisplayForSelectAll">
            <summary>
            Gets the command to select all items in the list of "Display For" identifiable layers.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.IdentifyCommands.DisplayForEnableLayer">
            <summary>
            Gets the command to enable the specified <see cref="T:Geocortex.Essentials.Client.Layer"/> in the "Display For" list 
            of identifiable layers.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.IdentifyCommands.DisplayForEnableLayerInfo">
            <summary>
            Gets the command to enable the specified <see cref="T:Geocortex.Essentials.Client.Layer"/> in the "Display For" list of 
            identifiable layers from an <see cref="T:Geocortex.Essentials.Client.EssentialsLayerInfo"/> object.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.IdentifyCommands.DisplayForDisableLayer">
            <summary>
            Gets the command to disable the specified <see cref="T:Geocortex.Essentials.Client.Layer"/> in the "Display For" list 
            of identifiable layers.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.IdentifyCommands.DisplayForDisableLayerInfo">
            <summary>
            Gets the command to disable the specified <see cref="T:Geocortex.Essentials.Client.Layer"/> in the "Display For" list of 
            identifiable layers from an <see cref="T:Geocortex.Essentials.Client.EssentialsLayerInfo"/> object.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands">
            <summary>
            Collection of Commands related to the Map.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ZoomToInitialExtent">
            <summary>
            Gets the command for Zoom to Initial Extent.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ZoomToExtent">
            <summary>
            Gets the command for Zoom to Extent.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ZoomInToExtent">
            <summary>
            Gets the command for Zoom In to Extent.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ZoomOutToExtent">
            <summary>
            Gets the command for Zoom Out to Extent.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ZoomToFullExtent">
            <summary>
            Gets the command for zoom to full extent.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ZoomToPreviousExtent">
            <summary>
            Gets the command to zoom to the previous saved extent.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ZoomToNextExtent">
            <summary>
            Gets the command to zoom to the next saved extent.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ZoomToLayerVisible">
            <summary>
            Gets the command for Zoom to a given resolution
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ZoomToEsriLayerVisible">
            <summary>
            Gets the command for Zoom to a given resolution
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ZoomToMapServiceVisible">
            <summary>
            Gets the command for Zoom to a given resolution
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ZoomToResolution">
            <summary>
            Gets the command for Zoom to a give resolution
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ZoomToScale">
            <summary>
            Gets the command for Zoom to a given resolution
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ZoomToFeature">
            <summary>
            Gets the command for Zoom to a given feature
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ZoomToAllFeatures">
            <summary>
            Gets the command for Zoom to a given feature set.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ZoomToFeatures">
            <summary>
            Gets the command for Zoom to a given feature set.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.PanToFeature">
            <summary>
            Gets the command for Pan to a given feature
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.PanToPoint">
            <summary>
            Gets the command to Pan to a given point
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.PanToAllFeatures">
            <summary>
            Gets the command for Pan to a given feature set.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.SnapToPoint">
            <summary>
            Gets the command to Pan to a given point without an animation
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.StepZoomIn">
            <summary>
            Gets the command for incrementally zooming in.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.StepZoomOut">
            <summary>
            Gets the command for incrementally zooming out.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.PanLeft">
            <summary>
            Gets the command for incrementally panning left.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.PanRight">
            <summary>
            Gets the command for incrementally panning right.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.PanUp">
            <summary>
            Gets the command for incrementally panning up.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.PanDown">
            <summary>
            Gets the command for incrementally panning down.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.RemoveEsriLayer">
            <summary>
            Gets the command for removing a <see cref="T:ESRI.ArcGIS.Client.Layer"/> from the map.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.RemoveEssentialsLayer">
            <summary>
            Gets the command for removing an essentials layer.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.RemoveDuplicatedLayer">
            <summary>
            Gets the command for removing a layer that was duplicated using the DuplicateLayer command.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.SetLayerState">
            <summary>
            Gets the command for toggling the visibility of an Essentials layer.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.SetEsriLayerState">
            <summary>
            Gets the command for toggling the visibility or opacity of an ESRI layer.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.SetMapServiceState">
            <summary>
            Gets the command for toggling the visibility or opacity of a map service.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.SetTimeExtent">
            <summary>
            Gets the command to set the time extent of the <see cref="T:ESRI.ArcGIS.Client.Map"/>.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.SetPrimaryTimeAwareMapService">
            <summary>
            Gets the command to set the primary time aware layer for the map
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.CaptureCurrentExtent">
            <summary>
            Gets the command for capturing the current extent to clipboard.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.DuplicateLayer">
            <summary>
            Gets the command for creating a duplicate <see cref="T:ESRI.ArcGIS.Client.Layer"/> of the specified layer.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.DuplicateLayerAndSymbolize">
            <summary>
            Gets the command for creating a duplicate <see cref="T:ESRI.ArcGIS.Client.Layer"/> of the specified layer and then symbolize it.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ShowLayerOptions">
            <summary>
            Gets the command for showing <see cref="T:ESRI.ArcGIS.Client.Layer"/> options.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ShowCrosshair">
            <summary>
            Gets the command for setting the visibility of a Crosshair in the center of the map.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ToggleLayerVisibility">
            <summary>
            Gets the command for toggling a Layer's visibility by name.  The first parameter in the tuple is
            the ID of the map service, and the second parameter in the tuple is the ID of the layer.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MapCommands.ToggleServiceVisibility">
            <summary>
            Gets the command for toggling a MapService's visibility by name.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MeasurementCommands">
            <summary>
            Commands related to measurement tools and activities.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MeasurementCommands.ClearMeasurementMarkup">
            <summary>
            Gets the command for clearing all measurement markup.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MeasurementCommands.SetMeasurementUnit">
            <summary>
            Gets the command for setting the current measurement unit.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MeasurementCommands.SetMeasurementProjection">
            <summary>
            Gets the command for setting the current measurement projection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.MeasurementCommands.SetMeasurementProjectionUnits">
            <summary>
            Gets the command for setting the current measurement projection.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.NamedCommandAttribute">
            <summary>
            An attribute used to assign well known names to public static <see cref="T:System.Windows.Input.ICommand"/> 
            properties. This is used to register commands in a <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandRegistry"/>.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.NamedCommandAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.NamedCommandAttribute"/> class.
            </summary>
            <param name="name">The well known name of the command.</param>
            <param name="parameterType">Type of the command's parameter.</param>
            <exception cref="T:System.ArgumentNullException">If name is null.</exception>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.NamedCommandAttribute.Name">
            <summary>
            Gets the name of the command.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.NamedCommandAttribute.ParameterType">
            <summary>
            Gets the type of the command parameter.
            </summary>
            <value>The type of the parameter.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.PrintTemplatesCommands">
            <summary>
            Commands used to perform searches
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.PrintTemplatesCommands.PrintMap">
            <summary>
            Gets the PrintMap command.
            </summary>
            <value>The print map command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ProjectCommands.OpenProjectFromByteArray">
            <summary>
            Gets a command to open a project from a byte array without reloading the viewer.
            </summary>
            <remarks>Doesn't provide a named command as it required a byte array to work and therefore not a candidate to be called by name.</remarks>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ProjectCommands.SaveProjectToByteArray">
            <summary>
            Gets a command to save a project to a byte array.
            </summary>
            <remarks>Doesn't provide a named command as it required a callback to work and therefore not a candidate to be called by name.</remarks>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ReportingCommands">
            <summary>
            Commands related to reporting functionality.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ReportingCommands.RunFeaturesReport">
            <summary>
            Gets the run features report command.
            </summary>
            <value>The run features report command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ReportingCommands.RunFeatureReport">
            <summary>
            Gets the run feature report command.
            </summary>
            <value>The run feature report.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ReportingCommands.RunReport">
            <summary>
            Gets the run report command.
            </summary>
            <value>The run report command.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands">
            <summary>
            Commands performed on the results list
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.SwitchToResultsView">
            <summary>
            Gets the command for switching to the results view (either list or tabular, depending on which is active)
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.SwitchToTabularResultsView">
            <summary>
            Gets the command for switching to the results tabular view
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.SwitchToListResultsView">
            <summary>
            Gets the command for switching to the results list view
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.SwitchToSelectionView">
            <summary>
            Gets the command for switching to the selection view
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.SwitchToHistoryView">
            <summary>
            Gets the command for switching to the history view
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.RefineSearchResults">
            <summary>
            Gets the command to show the refine results dialog
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.SelectAllResults">
            <summary>
            Gets the command to add all results to the selection
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.DeselectAllResults">
            <summary>
            Gets the command to remove all results from the selection
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.ClearResults">
            <summary>
            Gets the command to remove all results from the selection
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.HideFeatureSet">
            <summary>
            Gets the command to hide a feature set from the results.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.SwitchToListView">
            <summary>
            Gets the command for switching to the list results view.
            </summary>
            <remarks>OBSOLETE!</remarks>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.SwitchToTabularView">
            <summary>
            Gets the command for switching to the tabular results view.
            </summary>
            <remarks>OBSOLETE!</remarks>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.SwitchToWideView">
            <summary>
            Gets the command for switching the results view to wide
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.SwitchToTallView">
            <summary>
            Gets the command for switching the results view to tall
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.ShowSearchHistory">
            <summary>
            Gets the command for showing the search history view.
            </summary>
            <remarks>OBSOLETE!</remarks>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.HideSearchHistory">
            <summary>
            Gets the command for hiding the search history view.
            </summary>
            <remarks>OBSOLETE!</remarks>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.ShowFeatureSet">
            <summary>
            Gets the command for showing a FeatureSet in the results list.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.ShowFeatureSetCollection">
            <summary>
            Gets the command for showing a FeatureSetCollection in the results list.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.LeaveFeature">
            <summary>
            Gets the command for the implementation for the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureLeaveEvent"/> event.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.ExecuteFeature">
            <summary>
            Gets the command for the implementation for the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureExecuteEvent"/> event.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.HoverOverFeature">
            <summary>
            Gets the command for the implementation for the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureHoverEvent"/> event
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ResultsListCommands.SelectFeature">
            <summary>
            Gets the command for the implementation for the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureSelectEvent"/> event
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SearchCommands">
            <summary>
            Commands used to perform searches
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SearchCommands.SearchAttributes">
            <summary>
            Gets the command for performing simple attribute-based searches.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SearchCommands.GlobalSearch">
            <summary>
            Gets the command for executing a global string search.
            </summary>
            <value>The global search.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SearchCommands.EnableInstantSearch">
            <summary>
            Gets the command for enabling instant search
            </summary>
            <value>The global search.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SelectionCommands.AddFeatureSetToSelection">
            <summary>
            Gets the command to append the specified feature set collection to the default collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SelectionCommands.AddFeatureToSelection">
            <summary>
            Gets the command to append the specified feature set collection to the default collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SelectionCommands.AddFeatureSetsToSelection">
            <summary>
            Gets the command to append the specified feature set collection to the default collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SelectionCommands.AddFeaturesToSelection">
            <summary>
            Gets the command to append the specified feature set collection to the default collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SelectionCommands.IntersectFeatureSetWithSelection">
            <summary>
            Gets the command to append the specified feature set collection to the default collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SelectionCommands.RemoveFeatureSetFromSelection">
            <summary>
            Gets the command to remove the specified feature set from the default collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SelectionCommands.RemoveFeatureFromSelection">
            <summary>
            Gets the command to remove the specified feature from the default collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SelectionCommands.RemoveFeatureSetsFromSelection">
            <summary>
            Gets the command to remove the specified feature sets from the default collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SelectionCommands.RemoveFeaturesFromSelection">
            <summary>
            Gets the command to remove the specified features from the default collection.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SelectionCommands.ClearSelection">
            <summary>
            Gets the command to clear the collection of selected features
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands">
            <summary>
            Commands used to manipulate the shell
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.ExecuteSaveRegionToJpgCommand(System.String)">
            <summary>
            Given a region name, save the region to a jpg file. This command really isn't meant to be used
            in practice but rather to demonstrate how to use the region.ToJpg extension method
            </summary>
            <param name="regionName">The name of the region in question</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.BringToFront">
            <summary>
            Gets the command for bringing the given UI element into view
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.CaptureViewerState">
            <summary>
            Gets the command for generating a URL representing viewer state.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.CloseDataFrame">
            <summary>
            Gets the command for closing the data frame.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.CloseOverviewMap">
            <summary>
            Gets the command for closing the overview map.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.CloseResultsFrame">
            <summary>
            Gets the command for closing the results frame.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.Hide">
            <summary>
            Gets the command to hide the given UI element
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.NavigateToUri">
            <summary>
            Gets the command for navigating to a Uri in a new window. This can be called independent 
            of user actions (such as button click). You must provide an absolute URI.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.NavigateCurrentWindowToUri">
            <summary>
            Gets the command for navigating to a Uri in the current window. This can be called independent 
            of user actions (such as button click).
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.OpenDataFrame">
            <summary>
            Gets the command for opening the data frame.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.OpenOverviewMap">
            <summary>
            Gets the command for opening the overview map.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.OpenResultsFrame">
            <summary>
            Gets the command for opening the results frame.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.OpenWebPage">
            <summary>
            Gets the command for opening web pages in new windows. This command must be
            called from code that results from direct use action (such as a button click).
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.ParkDataFrameLeft">
            <summary>
            Gets the command for parking the dataframe left.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.ParkDataFrameRight">
            <summary>
            Gets the command for parking the dataframe right.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.PublishModuleUrlState">
            <summary>
            Gets the command to publish module macro state into the parameter collection, allowing an unknown number of unknown modules to build a shareable URL.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.ShowModalErrorDialog">
            <summary>
            Gets the command to show the modal error dialog.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.ToggleDataFrame">
            <summary>
            Gets the command for toggling the data frame.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.ToggleFullscreen">
            <summary>
            Gets the command for toggling fullscreen mode.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.SaveRegionToJpg">
            <summary>
            Gets the command for toggling fullscreen mode.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ShellCommands.ToggleMouseCoordinates">
            <summary>
            Gets the command for toggling the mouse coordinates view.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SymbolCommands">
            <summary>
            Commands used to manipulate symbols
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SymbolCommands.ShowSymbolizeGraphicsLayerDialog">
            <summary>
            Gets the command for displaying a dialog to symbolize a <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SymbolCommands.ResetSymbolizeGraphicsLayer">
            <summary>
            Gets the command to reset symbolization attributes to default values of a <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SymbolCommands.RestoreSymbolizeGraphicsLayer">
            <summary>
            Gets the command to restore symbolization attributes to previous set values of a <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/>.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SymbolCommands.ShowSymbolizeDynamicLayer">
            <summary>
            Gets the command for displaying a dialog to symbolize a <see cref="T:Geocortex.Essentials.Client.Layer"/> with dynamic rendering support.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SymbolCommands.ResetCustomRendererCommand">
            <summary>
            Gets the command for resetting the custom renderer on a <see cref="T:Geocortex.Essentials.Client.Layer"/>.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SymbolCommands.RestoreCustomRendererCommand">
            <summary>
            Gets the command for resetting the custom renderer on a <see cref="T:Geocortex.Essentials.Client.Layer"/>.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SymbolCommands.ShowSymbolizeDynamicLayerNewAttribute">
            <summary>
            Gets the command for displaying a dialog to symbolize a <see cref="T:Geocortex.Essentials.Client.Layer"/> with dynamic rendering support starting on the choose attribute page.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SymbolCommands.ShowSymbolizeDynamicLayerById">
            <summary>
            Gets the command for displaying a dialog to symbolize a <see cref="T:Geocortex.Essentials.Client.Layer"/> with dynamic rendering support.
            The parameter should be a comma-separated pair of IDs, the first for Map Service ID and the second for Layer ID (e.g. "0,1").
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.SymbolCommands.ShowSymbolizeDynamicLayerSelection">
            <summary>
            Gets the command for displaying a dialog to select a layer with dynamic rendering support.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ToolbarCommands">
            <summary>
            Commands related to the toolbar and tools.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ToolbarCommands.ActivateTool">
            <summary>
            Gets the activate tool command.
            </summary>
            <value>The activate tool command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ToolbarCommands.ClearActiveTool">
            <summary>
            Gets the clear active tool command.
            </summary>
            <value>The clear active tool command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ToolbarCommands.HideAdvancedTools">
            <summary>
            Gets the command to collapse the advanced toolbar. 
            </summary>
            <value>The HideAdvancedTools command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ToolbarCommands.SetCurrentTab">
            <summary>
            Gets the command that attempts to set the current toolbar tab.
            </summary>
            <value>The SetCurrentTab command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ToolbarCommands.HideToolbarTab">
            <summary>
            Gets the command to hide a tab from the toolbar.
            </summary>
            <value>The HideToolbarTab command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ToolbarCommands.HideToolbarItem">
            <summary>
            Gets the command to hide an item (tool, button, group, region) from the toolbar.
            </summary>
            <value>The HideToolbarItem command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ToolbarCommands.ShowToolbarItem">
            <summary>
            Gets the command to show an item (tool, button, group, region) in the toolbar.
            </summary>
            <value>The ShowToolbarItem command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ToolbarCommands.ShowAdvancedTools">
            <summary>
            Gets the command to expand the advanced toolbar.
            </summary>
            <value>The ShowAdvancedTools command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ToolbarCommands.ToggleAdvancedTools">
            <summary>
            Gets the command to toggle the state of the advanced toolbar.
            </summary>
            <value>The ToggleAdvancedTools command.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.VisualStatusCommands">
            <summary>
            Commands related to visual status and GUI tasks.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.VisualStatusCommands.PulseProgressTask">
            <summary>
            Gets the command for pulsing a progress task.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.VisualStatusCommands.RegisterProgressTask">
            <summary>
            Gets the command for registering a progress task.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.VisualStatusCommands.UnregisterProgressTask">
            <summary>
            Gets the command for unregistering a progress task.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ProgressTaskParams">
            <summary>
            Defines a set of parameters used to register, unregister, and pulse commands.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ProgressTaskState">
            <summary>
            ProgressTaskState represents the state of a progress task.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ProgressTaskState.Pending">
            <summary>
            The task has not started execution, but it exists and is queued or pending some other operation.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ProgressTaskState.Active">
            <summary>
            The task is actively executing and considered alive.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ProgressTaskState.TimedOut">
            <summary>
            The task was not pulsed within its timeout period, and is now lingering.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ProgressTaskState.Cancelled">
            <summary>
            The task was cancelled.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ProgressTaskState.Completed">
            <summary>
            The task completed and is now lingering.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ProgressTaskState.Error">
            <summary>
            The task completed erroneously and is now lingering.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ProgressTaskType">
            <summary>
            ProgressTaskType represents the type of a progress task.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ProgressTaskType.Deterministic">
            <summary>
            A Deterministic task is one where progress is quantifiable as a percentage of completion.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ProgressTaskType.NonDeterministic">
            <summary>
            A NonDeterministic task is one where accurate estimations of quantifiable progress are not possible.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.WebMapIntegrationCommands">
            <summary>
            Commands related to 3rd party map integration.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.WebMapIntegrationCommands.SetMapViewpoint">
            <summary>
            Gets the command for setting the map viewpoint position for a given viewer.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.WebMapIntegrationCommands.BroadcastCurrentViewpoint">
            <summary>
            Gets the command for setting the integration indicator.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.WebMapIntegrationCommands.RemoveViewpointIndicator">
            <summary>
            Gets the command for removing a integration indicator.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.WorkflowCommands.ShowWorkflowContainerTransition">
            <summary>
            Gets the command to show a transition from one activity to the next, when inside a workflow container.
            The parameter is the name of the workflow container.
            </summary>
            <value>The show container activity complete transition.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationAggregator">
            <summary>
            Recursively aggregates the configuration of a viewer at a specified configuration Uri with the various
            externally referenced configuration files it may point to.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationAggregator.AggregateAsync(System.Uri)">
            <summary>
            Asynchronously aggregates the configuration specified at Uri with all externally referenced Uris.
            </summary>
            <param name="configurationUri">The configuration URI.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationAggregator.TreeLoadCompleted(System.Object)">
            <summary>
            Fired when the tree is fully loaded.  The list of configuration Uris can then be obtained for merging.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationAggregator.MergeDocs(System.Collections.Generic.List{System.Xml.Linq.XDocument})">
            <summary>
            Merges a List of XDocuments into a single XDocument.  The rules are fairly simple:
            -A new module is added to the modules collection.
            -A module with a matching ID replaces an existing module.
            -A module with Remove="true" removes the module (if matched).
            -Basically the same for Xaps/libraries.
            </summary>
            <param name="docs">The docs.</param>
            <returns>The merged XDocument</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationAggregator.LoadConfiguration(System.Xml.Linq.XDocument)">
            <summary>
            Loads the configuration.
            </summary>
            <param name="xdoc">The xdoc.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationAggregator.RaiseCompletedIfReady">
            <summary>
            Raises the completed event if we're ready to do so.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationAggregator.PreProcessor">
            <summary>
            Gets the pre processor.
            </summary>
            <value>The pre processor.</value>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationHelper.GetConfigurationElement(System.Xml.Linq.XDocument)">
            <summary>
            Gets the Configuration element.
            </summary>
            <param name="xDoc">The x doc.</param>
            <returns>The Configuration XElement.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationHelper.GetModulesElement(System.Xml.Linq.XDocument)">
            <summary>
            Gets the Modules element.
            </summary>
            <param name="xDoc">The x doc.</param>
            <returns>The Modules XElement.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationHelper.GetLibrariesElement(System.Xml.Linq.XDocument)">
            <summary>
            Gets the Libraries element.
            </summary>
            <param name="xDoc">The x doc.</param>
            <returns>The Libraries XElement.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationHelper.GetResourcesElement(System.Xml.Linq.XDocument)">
            <summary>
            Gets the resources element.
            </summary>
            <param name="xDoc">The x doc.</param>
            <returns>The Resources element.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLibrary">
            <summary>
            ConfigurationLibrary represents the aggregated configuration used to launch a viewer.
            </summary>
            <remarks>
            ConfigurationLibrary is the final aggregation of various configuration files into a single object that
            can referenced by various system components to determine how the viewer should be configured.  The primary
            content is a collection of ModuleConfiguration and LibraryConfiguration instances mapped to unique string Ids.
            </remarks>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLibrary.AddModuleConfiguration(Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ModuleConfiguration)">
            <summary>
            Adds a ModuleConfiguration to the ConfigurationLibrary.
            </summary>
            <param name="configuration">The configuration.</param>
            <exception cref="T:System.ArgumentNullException">If configuration is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLibrary.GetModuleConfigurations(System.String)">
            <summary>
            Gets the module configurations for a given module name.
            </summary>
            <param name="moduleName">Name of the module.</param>
            <returns>A list of module configurations</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLibrary.GetModuleConfigurations">
            <summary>
            Gets the module configurations.
            </summary>
            <returns>All available module configurations.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLibrary.CreateModuleInfo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ModuleConfiguration)">
            <summary>
            Creates a ModuleInfo from a ModuleConfiguration.
            </summary>
            <param name="moduleConfig">The module config.</param>
            <returns>A moduleinfo</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLibrary.AddLibraryConfiguration(Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.LibraryConfiguration)">
            <summary>
            Adds the library configuration to the configuration library.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLibrary.GetLibraryConfigurations(System.String)">
            <summary>
            Gets the library configurations .
            </summary>
            <param name="libraryId">The library id.</param>
            <returns>The LibraryConfiguration if found, or null if nothing is found for the ID.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLibrary.GetLibraryConfigurations">
            <summary>
            Gets all the library configurations.
            </summary>
            <returns>All of the Library configurations.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLibrary.UpdateModulesWithLibraries">
            <summary>
            Updates all the module configurations with all of the libraries.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLibrary.UpdateModuleWithLibraries(Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ModuleConfiguration)">
            <summary>
            Updates a specific module configuration with all of the libraries.
            </summary>
            <param name="moduleConfig">The module config.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLibrary.ApplyLibraryConfigToModuleConfig(Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.LibraryConfiguration,Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ModuleConfiguration)">
            <summary>
            Applies the library config to module config.
            </summary>
            <param name="libraryConfig">The library config.</param>
            <param name="moduleConfig">The module config.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLibrary.ApplyToCatalog(Microsoft.Practices.Prism.Modularity.ModuleCatalog)">
            <summary>
            Applies this configuration library to the supplied ModuleCatalog.
            </summary>
            <param name="catalog">The catalog.</param>
            <exception cref="T:System.ArgumentNullException">If catalog is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLibrary.GetAssemblyVersion">
            <summary>
            Gets the version of this assembly.
            </summary>
            <returns>The assembly version of the current assembly.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationTree">
            <summary>
            A tree of configuration Uris and associated metadata.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationTree.#ctor(System.Uri,System.Boolean,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationTree"/> class.
            </summary>
            <param name="uri">The configuration Uri.</param>
            <param name="includeExternal">if set to <c>true</c> parse externally referenced configuration.</param>
            <param name="defaultConfigUri">The default config URI.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationTree.LoadAsync">
            <summary>
            Load this ConfigurationTree asynchronously.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationTree.ToFlattenedList(Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.PreProcessor)">
            <summary>
            Generates a flattened list of all XDocuments in the order of precedence.
            </summary>
            <param name="preProcessor">The pre processor.</param>
            <returns>
            A flattened list of configuration XDocuments.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationTree.ToFlattenedListInternal(System.Collections.Generic.List{Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationTree},Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ApplyDefaultConfig@)">
            <summary>
            Internal generation of flattened list used to pass back up the recursion whether the default
            configuration should be applied or not.
            </summary>
            <param name="list">The list.</param>
            <param name="shouldApply">The should apply.</param>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationTree.TreeLoadCompleted">
            <summary>
            Occurs when tree is fully loaded.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationTree.XDocument">
            <summary>
            Gets the XDocument associated with this tree node.
            </summary>
            <value>The X document.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationTree.Loaded">
            <summary>
            Gets a value indicating whether this <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationTree"/> is loaded.
            </summary>
            <value><c>true</c> if loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ApplyDefaultConfig">
            <summary>
            Values indicating how default configuration should be applied to this tree node.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ApplyDefaultConfig.Yes">
            <summary>
            Apply default configuration.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ApplyDefaultConfig.No">
            <summary>
            Don't apply default configuration.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ApplyDefaultConfig.Inherit">
            <summary>
            Inherit whether to apply configuration from the parent.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.PreProcessor">
            <summary>
            Preprocesses configuration.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.PreProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.PreProcessor"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.PreProcessor.NewContext">
            <summary>
            News the context.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.PreProcessor.Consume(System.Xml.Linq.XContainer)">
            <summary>
            Consumes the specified container.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.PreProcessor.SetValue(System.String,System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.PreProcessor.Execute">
            <summary>
            Executes the preprocessor.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.PreProcessor.Globals">
            <summary>
            Gets all the resolved globals.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.Settings">
            <summary>
            Represents a collection of mappings from viewer IDs to viewer configuration URIs.  Also
            holds references to external configuration sources, and will recursively parse those files if 
            requested.  This file is usually synonymous with Viewer.Settings.xml.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.Settings.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.Settings"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.Settings.GetViewerConfigSettings(System.Boolean,System.Boolean)">
            <summary>
            Gets the viewer config settings.
            </summary>
            <param name="onlyVisible">Whether or not to return only the visible settings.</param>
            <param name="includeExternal">if set to <c>true</c> recursively fetch the external 
            ConfigurationSource objects and return a flattened list of viewer settings.</param>
            <returns>The viewer config settings</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.Settings.GetViewerConfigSettingsInternal(System.Boolean)">
            <summary>
            Gets the viewer config settings.
            </summary>
            <param name="onlyVisible">Whether or not to return only the visible settings.</param>
            <returns>The viewer config settings</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.Settings.GetViewerMappingsInternal(System.Boolean)">
            <summary>
            Gets the mapping of viewer IDs to configuration URIs.
            </summary>
            <param name="onlyVisible">Whether or not to return only the visible mappings.</param>
            <returns>Configuration mappings of viewer IDs to URIs.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.Settings.LoadAsync">
            <summary>
            Loads this configuration asynchronously by downloading the xml configuration from the Uri 
            passed into the constructor.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.Settings.GetViewerMappings(System.Boolean,System.Boolean)">
            <summary>
            Gets the viewer mappings.
            </summary>
            <param name="onlyVisible">Whether or not to return only the mappings that are configured as visible.</param>
            <param name="includeExternal">if set to <c>true</c> recursively fetch the external 
            ConfigurationSource objects and return a flattened list of viewer mappings.</param>
            <returns>A flattened list of viewer ID to viewer configuration URI mappings.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.Settings.GetViewerMappings(System.Boolean)">
            <summary>
            Gets the viewer mappings.
            </summary>
            <param name="onlyVisible">Whether or not to return only mappings that are visible.</param>
            <returns>The mapping of viewer IDs to configuration URIs.</returns>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.Settings.LoadSettingsCompleted">
            <summary>
            Occurs when a ConfigurationSource has completed loading.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.Settings.SettingsList">
            <summary>
            Gets the configuration sources that this ConfigurationSource references.
            </summary>
            <value>The configuration sources.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.Settings.Uri">
            <summary>
            Gets or sets the URI of this ConfigurationSource.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.Settings.LaunchButtonContent">
            <summary>
            Gets the launch button content.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.Settings.Loaded">
            <summary>
            Gets a value indicating whether this <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.Settings"/> is loaded.
            </summary>
            <value><c>true</c> if loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.SettingsList">
            <summary>
            Represents a List of ConfigurationSource objects, plus the capability to load them all
            and be alerted when they have all finished loading.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.IConfigurableView">
            <summary>
            Implement this interface to have view specific Xml configuration injected into the view
            when it is registered with a region.
            </summary>
            <remarks>This interface extends IConfigurationInjection and adds the additional functionality of
            creating the view model and injecting it back into the view.  The reason for doing this is it
            allows the framework to create the view model as well.  The framework then checks to see if the view
            model implements IConfigurationInjection and injects the view and module configuration into it as well.  
            This is important because it's often the view model that needs the configuration, rather than the
            view.</remarks>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.IConfigurationInjection">
            <summary>
            This interface can be implemented by a view that is being created via configuration and that wishes to
            have both the module and view configuration injected into it.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.IConfigurableView.InjectViewModel(System.Object)">
            <summary>
            Is called to inject the view model instance back into the view.  
            </summary>
            <param name="viewModel">The view model.</param>
            <remarks>This will typically be called by the framework to inject an instance of a view model back into
            the view.  The implementor of this function will typically cast it to the view model type and then 
            data bind the view model to the view.</remarks>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.IConfigurableView.ViewModelType">
            <summary>
            Gets the type of the view model.  The view model must have a parameterless constructor for instantiation
            to happen properly.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewConfiguration.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewConfiguration.Type">
            <summary>
            Gets or sets the type for the view.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewConfiguration.Region">
            <summary>
            Gets or sets the region name that the view should be placed into.
            </summary>
            <value>The region.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewConfiguration.XmlConfiguration">
            <summary>
            Gets or sets the arbitrary XML configuration for this view.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewConfiguration.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewConfiguration"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewConfiguration.ConfiguredVisible">
            <summary>
            Gets or sets a value indicating whether this view has been explicitly configured to be visible.
            </summary>
            <value><c>true</c> if this view is explicitly configured to be visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewConfiguration.AssociatedHelpTopicKey">
            <summary>
            Gets or sets a unique key to associate this view with a help topic.
            </summary>
            <value>The help topic key.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.LibraryConfiguration">
            <summary>
            Encapsulates the configuration for a Library file reference.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.LibraryConfiguration.Id">
            <summary>
            Gets or sets the unique identifier for this LibraryConfiguration.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.LibraryConfiguration.Uri">
            <summary>
            Gets or sets the URI where the Library can be downloaded from.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.LibraryConfiguration.AssemblyName">
            <summary>
            Gets or sets the name of the assembly that will be loaded from the Library file.
            </summary>
            <value>The name of the assembly.</value>
            <remarks>The {version} placeholder can be used in this property.  At runtime, {version}
            will be replaced with the version number of the running viewer framework.</remarks>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.LibraryConfiguration.ClassNameTemplate">
            <summary>
            Gets or sets the class name template used to load various types of classes from the Library/assembly.
            </summary>
            <value>The class name template.</value>
            <remarks>The template is used to load modules and views from the Library file.  {_ModuleName} can be used
            to substitute the name of the module from configuration.  {_Type} can be used as a placeholder
            for loading either modules or views.  If the framework is loading a module, the text "Module" will
            replace {_Type}.  Similarly, if the framework is loading a view, the text "View" will replace {type}.
            {_Version} can also be used, and will be replaced with the assembly version of the framework.</remarks>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.LibraryConfiguration.Default">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.LibraryConfiguration"/> is the default configuration.
            If it is, then it is not necessary to specify with Library ID is being used to load a module configuration.
            </summary>
            <value><c>true</c> if default; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewerConfigSetting">
            <summary>
            A class describing a viewer configuration.
            This class is usually synonymous with ViewerConfig elements in a Viewer.Settings.xml file.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewerConfigSetting.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewerConfigSetting.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <remarks>If the display name is not set this will return the Id.</remarks>
            <value>The display name.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewerConfigSetting.Uri">
            <summary>
            Gets or sets the URI to the viewer configuration file.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewerConfigSetting.Hidden">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewerConfigSetting"/> is hidden.
            </summary>
            <value><c>true</c> if hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewerConfigSetting.OAuth2ClientID">
            <summary>
            Gets or sets the OAuth2 client ID.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewerConfigSetting.OAuth2AuthorizeUri">
            <summary>
            Gets or sets the OAuth2 authorize URI.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.ITraceContextProvider">
            <summary>
            Provides access to trace context for an object.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.ITraceContextProvider.TraceContext">
            <summary>
            Gets or sets the trace context for this object.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.ITraceListener">
            <summary>
            Listens for trace events.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.ITraceListener.OnTrace(Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext)">
            <summary>
            Called when a trace event arrives.
            </summary>
            <param name="context">The trace context</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.Trace">
            <summary>
            Utility methods for logging.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.Trace.TraceMethod(System.String,System.Object[])">
            <summary>
            Call when you wish to log the start of a method
            </summary>
            <param name="format">The format string</param>
            <param name="args">The objects to format arguments</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.Trace.TraceMethod">
            <summary>
            Call when you wish to log the start of a method
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.Trace.TraceBegin(System.Object,System.Object[])">
            <summary>
            Begin a trace session.
            </summary>
            <param name="message">The message to format..</param>
            <param name="args">The values to format with.</param>
            <returns>Returns a context which must be disposed at the end.</returns>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.Trace.TraceCritical(System.Object,System.Object[])">
            <summary>
            Logs a trace.
            </summary>
            <param name="message">The message to format..</param>
            <param name="args">The values to format with.</param>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.Trace.TraceFailure(System.Object,System.Object[])">
            <summary>
            Logs a trace.
            </summary>
            <param name="message">The message to format..</param>
            <param name="args">The values to format with.</param>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.Trace.TraceError(System.Object,System.Object[])">
            <summary>
            Logs a trace.
            </summary>
            <param name="message">The message to format..</param>
            <param name="args">The values to format with.</param>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.Trace.TraceException(System.Exception)">
            <summary>
            Logs a trace.
            </summary>
            <param name="e">The exception to format..</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.Trace.TraceWarning(System.Object,System.Object[])">
            <summary>
            Logs a trace.
            </summary>
            <param name="message">The message to format..</param>
            <param name="args">The values to format with.</param>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.Trace.TraceInfo(System.Object,System.Object[])">
            <summary>
            Logs a trace.
            </summary>
            <param name="message">The message to format..</param>
            <param name="args">The values to format with.</param>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.Trace.TraceDebug(System.Object,System.Object[])">
            <summary>
            Logs a trace.
            </summary>
            <param name="message">The message to format..</param>
            <param name="args">The values to format with.</param>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.Trace.Manager">
            <summary>
            Gets the manager for tracing.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext">
            <summary>
            Contains information about a trace.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext.Manager">
            <summary>
            Gets the trace manager for this context.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext.Sequence">
            <summary>
            Gets the sequence of occurrence.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext.When">
            <summary>
            Gets the time of occurrence.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext.CallerContext">
            <summary>
            Gets the caller context.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext.ObjectContext">
            <summary>
            Gets the object context.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext.Level">
            <summary>
            Gets the trace level (ERROR, WARNING, etc).
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext.HeaderText">
            <summary>
            Gets the header text.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext.FirstFrameText">
            <summary>
            Gets the first frame text.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext.DetailsText">
            <summary>
            Gets the details text.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext.TraceText">
            <summary>
            Gets the trace text.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext.TraceDetailsText">
            <summary>
            Gets the trace details text.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceExtensions">
            <summary>
            Trace extension methods for objects.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceExtensions.TraceBegin(System.Object,System.Object,System.Object[])">
            <summary>
            Traces the begin.
            </summary>
            <param name="contextProvider">The context provider.</param>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
            <returns>A trace context</returns>
            <exception cref="T:System.ArgumentNullException">If contextProvider or message is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceExtensions.TraceBeginInitialize(System.Object,System.Object,System.Object[])">
            <summary>
            Traces the begin initialize.
            </summary>
            <param name="contextProvider">The context provider.</param>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
            <returns>Returns the trace instance that must be disposed.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceExtensions.TraceInitialize(System.Object,System.Object,System.Object[])">
            <summary>
            Initializes the instance for relevant information for tracing.
            </summary>
            <param name="contextProvider">The instance of hte object to correlate this trace with.</param>
            <param name="message">The message to format..</param>
            <param name="args">The values to format with.</param>
            <exception cref="T:System.ArgumentNullException">If contextProvider or message is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceExtensions.TraceCritical(System.Object,System.Object,System.Object[])">
            <summary>
            Logs a trace.
            </summary>
            <param name="contextProvider">The instance of hte object to correlate this trace with.</param>
            <param name="message">The message to format..</param>
            <param name="args">The values to format with.</param>
            <exception cref="T:System.ArgumentNullException">If contextProvider or message is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceExtensions.TraceFailure(System.Object,System.Object,System.Object[])">
            <summary>
            Logs a trace.
            </summary>
            <param name="contextProvider">The instance of hte object to correlate this trace with.</param>
            <param name="message">The message to format..</param>
            <param name="args">The values to format with.</param>
            <exception cref="T:System.ArgumentNullException">If contextProvider or message is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceExtensions.TraceError(System.Object,System.Object,System.Object[])">
            <summary>
            Logs a trace.
            </summary>
            <param name="contextProvider">The instance of hte object to correlate this trace with.</param>
            <param name="message">The message to format..</param>
            <param name="args">The values to format with.</param>
            <exception cref="T:System.ArgumentNullException">If contextProvider or message is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceExtensions.TraceWarning(System.Object,System.Object,System.Object[])">
            <summary>
            Logs a trace.
            </summary>
            <param name="contextProvider">The instance of hte object to correlate this trace with.</param>
            <param name="message">The message to format..</param>
            <param name="args">The values to format with.</param>
            <exception cref="T:System.ArgumentNullException">If contextProvider or message is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceExtensions.TraceInfo(System.Object,System.Object,System.Object[])">
            <summary>
            Logs a trace.
            </summary>
            <param name="contextProvider">The instance of hte object to correlate this trace with.</param>
            <param name="message">The message to format..</param>
            <param name="args">The values to format with.</param>
            <exception cref="T:System.ArgumentNullException">If contextProvider or message is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceExtensions.TraceDebug(System.Object,System.Object,System.Object[])">
            <summary>
            Logs a trace.
            </summary>
            <param name="contextProvider">The instance of hte object to correlate this trace with.</param>
            <param name="message">The message to format..</param>
            <param name="args">The values to format with.</param>
            <exception cref="T:System.ArgumentNullException">If contextProvider or message is null.</exception>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceLevel">
            <summary>
            Trace levels.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceLevel.None">
            <summary>
            No tracing.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceLevel.Critical">
            <summary>
            Critical trace level.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceLevel.Failure">
            <summary>
            Failure trace level .
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceLevel.Error">
            <summary>
            Error trace level.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceLevel.Warning">
            <summary>
            Warning trace level.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceLevel.Info">
            <summary>
            Info trace level.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceLevel.Debug">
            <summary>
            Debug trace level.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceManager">
            <summary>
            Performs efficient handling of traces.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceManager"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceManager.AddTrace(Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext)">
            <summary>
            Adds the trace.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceManager.AddTraceListener(Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.ITraceListener)">
            <summary>
            Adds the trace listener.
            </summary>
            <param name="listener">The listener.</param>
            <exception cref="T:System.ArgumentNullException">If listener is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceManager.RemoveTraceListener(Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.ITraceListener)">
            <summary>
            Removes the trace listener.
            </summary>
            <param name="listener">The listener.</param>
            <exception cref="T:System.ArgumentNullException">If listener is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceManager.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceManager.CurrentContext">
            <summary>
            Gets or sets the current context.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceManager.SyncRoot">
            <summary>
            Gets the sync root.
            </summary>
            <value>The sync root.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.QueueViewSource">
            <summary>
            Offers an efficient view of a queue for visualization.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.QueueViewSource.Enqueue(System.Object)">
            <summary>
            Enqueues the item and invalidates the view.
            </summary>
            <param name="item">The item to enqueue.</param>
            <exception cref="T:System.ArgumentNullException">If item is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.QueueViewSource.Dequeue">
            <summary>
            Dequeues an item and invalidates the view.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.QueueViewSource.Clear">
            <summary>
            Clears the view.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.QueueViewSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.QueueViewSource"/> class.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.QueueViewSource.PendingCount">
            <summary>
            Gets the pending count; that is, the count the view is converging to.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceSender">
            <summary>
            Handles sending of traces to a simple URL.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceSender.Geocortex#EssentialsSilverlightViewer#Infrastructure#Diagnostics#ITraceListener#OnTrace(Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext)">
            <summary>
            Called when a trace event arrives.
            </summary>
            <param name="context">Contains information about a trace</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceSender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceSender"/> class.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceSender.RelaxInterval">
            <summary>
            Gets or sets the relax interval.
            </summary>
            <value>The relax interval.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceSender.MinQueueSize">
            <summary>
            Gets or sets the size of the min queue.
            </summary>
            <value>The size of the min queue.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceSender.MaxQueueSize">
            <summary>
            Gets or sets the size of the max queue.
            </summary>
            <value>The size of the max queue.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceSender.PostUrl">
            <summary>
            Gets or sets the post URL.
            </summary>
            <value>The post URL.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Log.LogColorConverter">
            <summary>
            Show the log in different color depending on the severity (log level).
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Log.LogColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts various types into a <see cref="T:System.Windows.Visibility"/>
            1. objects... if value==null then Collapsed else Visible
            2. boolean... if value==false then Collapsed else Visible
            3. integer or double... if value smaller or equal to numeric threshold property then Collapsed else Visible  
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target Type.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The <see cref="T:System.Windows.Visibility"/> value.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Log.LogColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>Doesn't return.</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Log.LogColorConverter.InfoColor">
            <summary>
            Gets or sets the color for the log level INFO
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Log.LogColorConverter.WarningColor">
            <summary>
            Gets or sets the color for the log level WARNING
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Log.LogColorConverter.ErrorColor">
            <summary>
            Gets or sets the color for the log level ERROR
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.FeatureAttribute">
            <summary>
            Contains feature attribute information appropriate for storage.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.FeatureAttributes">
            <summary>
            Contains a collection of feature attributes appropriate for storage.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.ChartAreaToLineVisibilityConverter">
            <summary>
            This converter takes an area definition and returns a <see cref="T:Telerik.Windows.Controls.ChartView.GridLineVisibility"/> representing
            either the chart's configured GridLine Visibility, or StripLine Visibility
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.ChartAxisConverter">
            <summary>
            This converter takes either a <see cref="T:Geocortex.Essentials.Client.Charting.ChartDefinition"/> or a 
            <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel"/> as input. If a <see cref="T:Geocortex.Essentials.Client.Charting.ChartDefinition"/> is used, it returns the
            x-axis. If a <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel"/> is used, it returns the y-axis for that series.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.ChartLegendVisibilityConverter">
            <summary>
            This converter takes a ChartLegend enum and returns a visibility for the legend element of the chart.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.ChartPointLabelConnectorVisibilityConverter">
            <summary>
            This converter takes an Enum and returns <see cref="T:Telerik.Windows.Controls.ChartView.ChartSeriesLabelConnectorsSettings"/> with a defined
            brush stroke style depending on whether the user has enabled label connectors.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.ChartPointLabelVisibilityConverter">
            <summary>
            This converter takes an Enum and returns a boolean value indicating whether or not point labels are enabled
            for the series.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.BooleanToChartAxisLocationConverter">
            <summary>
            This converter takes a boolean and a parameter representing the axis location property (horizontal
            or vertical), and returns an <see cref="T:Telerik.Charting.AxisHorizontalLocation"/> or <see cref="T:Telerik.Charting.AxisVerticalLocation"/>.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.ChartAxisLabelModeConverter">
            <summary>
            This converter takes a <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartAxisLabelMode"/> value and converts it into the corresponding
            <see cref="T:Telerik.Charting.AxisLabelFitMode"/> value.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.ChartValueToLabelVisibilityConverter">
            <summary>
            This converter takes a <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/> and returns a <see cref="T:System.Windows.Visibility"/> variable representing
            whether or not it contains a valid value and should be displayed.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.DataPointToPaletteBrushConverter">
            <summary>
            This converter exists to take a DataPoint and try to convert it into a fill color based
            on the palette of the Chart that the DataPoint is a part of.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.DecimalToPercentageConverter">
            <summary>
            This converter takes a decimal value and converts it to a formatted string in the form of a percentage.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.LegendPositionGridConverter">
            <summary>
            This converter exists to take a LegendPosition and return the correct position (i.e. row/column) to place the legend
            within a 9x9 grid; at the middle of which is the Chart itself (Row=1, Col=1)
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.LegendPositionOrientationConverter">
            <summary>
            This converter exists to take a LegendPosition and return the correct window orientation position.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.MarkerTypeDataTemplateConverter">
            <summary>
            This converter takes a <see cref="T:Geocortex.Essentials.Client.Charting.ChartSeriesDefinition"/> and returns the data template for
            that series' chart point marker.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.ChartPointToSeriesLabelVisibilityConverter">
            <summary>
            This converter takes a <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/> and returns a <see cref="T:System.Windows.Visibility"/> variable representing
            whether labels are displayed for the series.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.SeriesViewModelsToLegendItemsConverter">
            <summary>
            This converter exists to take a collection of <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel"/>s and create a 
            <see cref="T:Telerik.Windows.Controls.Legend.LegendItemCollection"/> containing the items that will be displayed in the chart legend.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.SeriesViewModelToPaletteConverter">
            <summary>
            This converter exists to take a collection of <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel"/>s and create a 
            Telerik <see cref="T:Telerik.Windows.Controls.ChartView.ChartPalette"/> for the series in the collection. Colors are ordered
            specifically for the Telerik charting data model.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Converters.ToolTipCategoryConverter">
            <summary>
            This converter takes a ChartPoint and returns a label for the chart tool tip.
            The category will be returned for a linear chart, and a percentage will be returned for a pie chart.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ChartExtensions.GetPriority(Geocortex.Essentials.Client.Charting.ChartSeriesType)">
            <summary>
            Returns a priority for a series type, which determines the order in which
            series are rendered
            </summary>
            <param name="type">The type of chart series</param>
            <returns>An integer representing series priority; higher numbers indicate that
            the series will be drawn on top of a series with lower priority</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ChartExtensions.TryGetFieldValue(Geocortex.Essentials.Client.Charting.ChartFieldDefinition,Geocortex.Essentials.Client.Tasks.Feature)">
            <summary>
            Gets the value for the specified field of a feature.
            </summary>
            <param name="field">The ChartFieldDefinition of the ChartPoint's field</param>
            <param name="feature">The Geocortex Feature</param>
            <returns>The value for the specified feature's field</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ChartExtensions.EqualsDefinition(Geocortex.Essentials.Client.Charting.ChartFieldDefinition,Geocortex.Essentials.Client.Charting.ChartFieldDefinition)">
            <summary>
            Determines whether two <see cref="T:Geocortex.Essentials.Client.Charting.ChartFieldDefinition"/>s are equal in terms
            of field types.
            </summary>
            <param name="definition1">The first field definition</param>
            <param name="definition2">The second field definition</param>
            <returns>A boolean indicating whether the two definitions are equal</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ChartExtensions.CompareFields(Geocortex.Essentials.Client.Essentials.Charting.ChartPoint,System.String)">
            <summary>
            Checks whether the <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/>'s series field alias is the same
            field as the non-alias field string. Because the chart point's DisplayValue is
            generated from the field alias, it might not match the field in the ChartDefinition;
            thus, we need to check whether the field alias matches the field in the item's
            feature attributes.
            </summary>
            <param name="item">The <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/></param>
            <param name="seriesField">The string of the series to compare</param>
            <returns>True if the field alias is equivalent</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ChartExtensions.GetFieldAlias(Geocortex.Essentials.Client.Essentials.Charting.ChartPoint,System.Boolean)">
            <summary>
            Gets the field alias for a chart's series or category.
            </summary>
            <param name="item">The <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/></param>
            <param name="isCategory">True if getting the category field alias, and
            false if getting the series field alias. False by default.</param>
            <returns>The alias of the series/category field.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ChartPointExtensions">
            <summary>
            These extension methods provide methods which make a <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPointCollection"/> easier to use in code.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ChartPointExtensions.GetCategorySortingStrings(System.Collections.Generic.IEnumerable{Geocortex.Essentials.Client.Essentials.Charting.ChartPoint})">
            <summary>
            This method gets the various Category sorting strings from an IEnumerable of <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/> objects.
            </summary>
            <param name="items">The IEnumerable of <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/></param>
            <returns>An IEnumerable of strings</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ChartPointExtensions.GetSeriesStrings(System.Collections.Generic.IEnumerable{Geocortex.Essentials.Client.Essentials.Charting.ChartPoint})">
            <summary>
            This method takes an IEnumerable of ChartPoints and returns a dictionary keyed on 
            <see cref="T:Geocortex.Essentials.Client.Charting.ChartSeriesDefinition">SeriesDefinition</see> with the list of strings of the series associated with 
            that <see cref="T:Geocortex.Essentials.Client.Charting.ChartSeriesDefinition">SeriesDefinition</see>.
            </summary>
            <param name="items">The IEnumerable of <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/></param>
            <returns>A Dictionary (key=SeriesConfigId, value=List(Series))</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ChartPointExtensions.GetSeriesGroupedChartPoints(System.Collections.Generic.IEnumerable{Geocortex.Essentials.Client.Essentials.Charting.ChartPoint})">
            <summary>
            Returns an IEnumerable of <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartPointGroup"/> objects which represent a group of <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint">ChartPoints</see> that
            all have the same <see cref="T:Geocortex.Essentials.Client.Charting.ChartSeriesDefinition"/>, and the same SortingValue
            </summary>
            <param name="items">The IEnumerable of <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/> objects</param>
            <returns>An IEnumerable of <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartPointGroup"/> objects</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ChartPointExtensions.GetSeriesChartPoints(System.Collections.Generic.IEnumerable{Geocortex.Essentials.Client.Essentials.Charting.ChartPoint},Geocortex.Essentials.Client.Charting.ChartSeriesDefinition,System.String)">
            <summary>
            This method returns an IEnumerable of <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/> objects that pertain to a particular SeriesConfigId
            </summary>
            <param name="items">The collection to filter</param>
            <param name="seriesDefinition">The id of the <see cref="T:Geocortex.Essentials.Client.Charting.ChartSeriesDefinition"/></param>
            <param name="sortingSeries">The name of the series to get items for</param>
            <returns>An IEnumerable of <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint">ChartPoints</see></returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ChartPointExtensions.GetGroupedChartPoints(System.Collections.Generic.IEnumerable{Geocortex.Essentials.Client.Essentials.Charting.ChartPoint})">
            <summary>
            This method takes an IEnumerable of <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/> objects and creates an IEnumerable of 
            <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartPointGroup"/> objects  which contain <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/> objects which share the same 
            SeriesConfigId, Category, Series, and SeriesBreakValue (if it exists). This method is useful for aggregating
            as all of the items in each <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartPointGroup"/> can be aggregated over to create one <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/>.
            </summary>
            <param name="items">An IEnumerable of <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint">ChartPoints</see> to group</param>
            <returns>An IEnumerable of IGroupings; the key for the IGroupings is a tuple in the format Tuple(Series,Category)</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ChartPointExtensions.GetBounds(System.Collections.Generic.IEnumerable{Geocortex.Essentials.Client.Essentials.Charting.ChartPoint},System.Func{Geocortex.Essentials.Client.Essentials.Charting.ChartPoint,System.Nullable{System.Double}})">
            <summary>
            Gets the min and max bounds of the IEnumerable of <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/> objects.
            </summary>
            <param name="items">The items</param>
            <param name="valueFunction"></param>
            <returns>Returns a Tuple in the form of (min,max)</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ColorExtensions.GenerateSatLumPalette(System.Windows.Media.Color,System.Int32,System.Double,System.Double)">
            <summary>
            By using the HSL color system, this extension method generates a palette of colors
            based on a root color by altering the Saturation and Luminosity of the colors.
            </summary>
            <param name="color">The root <see cref="T:System.Windows.Media.Color"/> to generate the palette from</param>
            <param name="numColors">The number or <see cref="T:System.Windows.Media.Color">Colors</see> to generate in the palette</param>
            <param name="luminosityRatio">The ratio of the luminosity spectrum to use in the palette</param>
            <param name="saturationRatio">The ratio of the saturation spectrum to use in the palette</param>
            <returns>IEnumerable of Color objects that represent the generated palette</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ColorExtensions.GenerateOrthogonalHues(System.Windows.Media.Color,System.Int32)">
            <summary>
            By using the HSL color system, this extension method generates a palette of colors
            based on a root color by changing the Hue as much as possible given the number of colors required.
            </summary>
            <param name="color">The root <see cref="T:System.Windows.Media.Color"/> to generate the palette from</param>
            <param name="numColors">The number of colors to generate in the palette</param>
            <returns>IEnumerable of Color objects that represent the generated palette</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ColorExtensions.GetSelectionColor(System.Windows.Media.Color)">
            <summary>
            Generates a "Selection" color based on the existing color.  For now,
            this method simply sets the alpha of the new color to half of the original.
            </summary>
            <param name="color">The original color</param>
            <returns>A new "Selection" <see cref="T:System.Windows.Media.Color"/> </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ColorExtensions.GetLineColor(System.Windows.Media.Color)">
            <summary>
            Generates a line color based on the existing color. The method chooses
            a lighter color (higher luminosity)
            </summary>
            <param name="color">The original color</param>
            <returns>A new line color</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ColorExtensions.GetStrokeColor(System.Windows.Media.Color)">
            <summary>
            Generates a Stroke color based on the existing color.  For now,
            this method simply sets the increases the luminosity of the new color.
            </summary>
            <param name="color">The original color</param>
            <returns> stroke <see cref="T:System.Windows.Media.Color"/> </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ObjectExtensions.IsNumeric(System.Object)">
            <summary>
            This extension method determines whether or not an arbitrary object is numeric
            </summary>
            <param name="obj">the <see cref="T:System.Object"/> to test</param>
            <returns>A <see cref="T:System.Boolean">Boolean</see> representing whether or not this object is numeric</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ObjectExtensions.NumericValue(System.Object)">
            <summary>
            This extension method tries to return the numeric value of an arbitrary object
            </summary>
            <param name="obj">the <see cref="T:System.Object"/> to get the numeric value of</param>
            <returns>A nullable <see cref="T:System.Double"/> with the objects numeric value</returns>
            <remarks>Returns null if the object is not numeric</remarks>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ChartPaletteExtensions">
            <summary>
            These extension methods provide the ability to easily generate selection palettes from 
            existing palettes / colors, which get used to display the Geocortex Charts.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ChartPaletteExtensions.GetSelectionPalette(Telerik.Windows.Controls.ChartView.ChartPalette)">
            <summary>
            Generates a Selection Palette using the <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.ColorExtensions.GetSelectionColor(System.Windows.Media.Color)"/> from an existing palette.
            </summary>
            <param name="palette"> Existing Palette</param>
            <returns>A new <see cref="T:Telerik.Windows.Controls.ChartView.ChartPalette"/> with the selection colors</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.TelerikExtensions.ConfigureAxis(Telerik.Windows.Controls.ChartView.Axis,Geocortex.Essentials.Client.Charting.ChartCategoryDefinition)">
            <summary>
            Binds the Axis' at to those defined in the <see cref="T:Geocortex.Essentials.Client.Charting.ChartCategoryDefinition"/> object.
            </summary>
            <param name="axis">The axis to be configured</param>
            <param name="categoryDefinition">The Category Configuration</param>
            <returns>The axis that was configured</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.TelerikExtensions.ConfigureAxis(Telerik.Windows.Controls.ChartView.Axis,Geocortex.Essentials.Client.Charting.ChartSeriesDefinition,Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel)">
            <summary>
            Binds the Axis' color properties to those defined in the <see cref="T:Geocortex.Essentials.Client.Charting.ChartSeriesDefinition"/> object.
            </summary>
            <param name="axis">The axis to be configured</param>
            <param name="seriesDefinition">The Series Configuration</param>
            <param name="seriesViewModel">The SeriesViewModel for the axis</param>
            <returns>The axis that was configured</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.TelerikExtensions.ConfigureAxis(Telerik.Windows.Controls.ChartView.Axis,Geocortex.Essentials.Client.Charting.ChartDefinition)">
            <summary>
            Binds the Axis' color properties to those defined in the <see cref="T:Geocortex.Essentials.Client.Charting.ChartDefinition"/> object.
            </summary>
            <param name="axis">the Axis to be configured</param>
            <param name="chartDefinition">The Chart Configuration</param>
            <returns>The axis that was configured</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.TelerikExtensions.ConfigureAxis(Telerik.Windows.Controls.ChartView.Axis,Geocortex.Essentials.Client.Charting.ChartAxisDefinition)">
            <summary>
            Binds the Axis attributes to those defined in the <see cref="T:Geocortex.Essentials.Client.Charting.ChartAxisDefinition"/> object.
            </summary>
            <param name="axis">the Axis to be configured</param>
            <param name="definition">The <see cref="T:Geocortex.Essentials.Client.Charting.ChartAxisDefinition"/> to use</param>
            <returns>The axis that was configured</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Extensions.TelerikExtensions.SetAxisVisibility(Telerik.Windows.Controls.ChartView.Axis,System.Boolean)">
            <summary>
            Sets the axis visibility. Directly setting the axis to Visibility.Collapsed cuts off
            values on other axes, so we need to do a bit of a hack and individually remove all
            visible axis elements.
            </summary>
            <param name="axis">the Axis to be configured</param>
            <param name="visibility">Whether or not the axis is visible</param>
            <returns>The axis that was configured</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Selectors.RadPieChartSliceSelector">
            <summary>
            Class used to grab a <see cref="T:Telerik.Charting.PieDataPoint"/> and bind events to the underlying pie
            slice whenever the data has been changed.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Selectors.RadChartSeriesDescriptorSelector">
            <summary>
            Takes a <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel"/> and returns a Telerik <see cref="T:Telerik.Windows.Controls.ChartView.ChartSeriesDescriptor"/>
            for the type of chart series.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Selectors.RadChartTemplateSelector">
            <summary>
            Takes a <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartViewModel"/> as input, and returns a Telerik <see cref="T:System.Windows.DataTemplate"/>
            for the chart type (currently only Cartesian and Pie).
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.FeatureSelectedDelegate">
            <summary>
            A delegate to handle when a feature becomes selected.
            </summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.FeatureSelector">
            <summary>
            A user control that allows the selection of a feature from a list of features.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.FeatureSelector.SetItems(System.Collections.Generic.IEnumerable{Geocortex.Essentials.Client.Tasks.Feature})">
            <summary>
            Sets the items.
            </summary>
            <param name="features">The features.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.FeatureSelector.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.FeatureSelector.IncludeDescription">
            <summary>
            Gets or sets a value indicating whether to include feature descriptions in the menu.
            </summary>
            <value>
              <c>true</c> if feature descriptions are to be included in the menu; otherwise, <c>false</c>.  Default is <c>false</c>.
            </value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.FeatureSelector.FeatureSelectedDelegate">
            <summary>
            Gets or sets the feature selected delegate.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SuggestionBox">
            <summary>
            User control for suggestion and search operation.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SuggestionBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.IUndoable">
            <summary>
            The Interface for an Undoable operation that can be managed by an <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.UndoRedoManager"/>.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.IUndoable.Execute">
            <summary>
            Method used by the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.UndoRedoManager"/> to Do/Redo the operation.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.IUndoable.Undo">
            <summary>
            Method used by the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.UndoRedoManager"/> to Undo the operation.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.UndoRedoManager">
            <summary>
            This classes manages <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.IUndoable"/> operations and provides the interface for
            Doing, Undoing and Redoing operations.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.UndoRedoManager.#ctor">
            <summary>
            Object Constructor
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.UndoRedoManager.CanUndo">
            <summary>
            Returns if there are any <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.IUndoable"/> operations to Undo
            </summary>
            <returns> Boolean representing if there are Undoable changes to markup available. </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.UndoRedoManager.CanRedo">
            <summary>
            Returns if there are any <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.IUndoable"/> operations to Redo
            </summary>
            <returns> Boolean representing if there are Redoable changes to markup available.  </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.UndoRedoManager.Add(Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.IUndoable)">
            <summary>
            Adds an <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.IUndoable"/> to the undo stack silently
            </summary>
            <param name="operation"><see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.IUndoable"/> operation </param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.UndoRedoManager.Do(Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.IUndoable)">
            <summary>
            Calls the execute method on the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.IUndoable"/> and then adds it to the undo stack
            </summary>
            <param name="operation"><see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.IUndoable"/> operation</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.UndoRedoManager.Undo">
            <summary>
            Undoes the last <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.IUndoable"/> operation
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.UndoRedoManager.Redo">
            <summary>
            Redoes the last undone <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.IUndoable"/> operation
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.UndoRedoManager.UndoStack">
            <summary>
            Gets the UndoStack
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UndoRedo.UndoRedoManager.RedoStack">
            <summary>
            Gets the RedoStack
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.EventArgsExtensions">
            <summary>
            Offers extension methods for various EventArgs classes for convenience.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.EventArgsExtensions.ToEditingActivatedEventArgs(ESRI.ArcGIS.Client.Editor.CommandEventArgs,System.Object,ESRI.ArcGIS.Client.Editor)">
            <summary>
            Converts an ESRI <see cref="T:ESRI.ArcGIS.Client.Editor.CommandEventArgs">CommandEventArgs</see> to an Essentials <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingActivatedEventArgs">EditingActivatedEventArgs</see>.
            </summary>
            <param name="commandEventArgs">An ESRI <see cref="T:ESRI.ArcGIS.Client.Editor.CommandEventArgs">CommandEventArgs</see>.</param>
            <param name="sender">The sender</param>
            <param name="editor">The <see cref="T:ESRI.ArcGIS.Client.Editor">Editor</see> (if applicable).</param>
            <returns>An Essentials <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingActivatedEventArgs">EditingActivatedEventArgs</see>.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.EventArgsExtensions.ToEditingCompletedEventArgs(ESRI.ArcGIS.Client.Editor.EditEventArgs,System.Object,ESRI.ArcGIS.Client.Editor)">
            <summary>
            Converts an ESRI <see cref="T:ESRI.ArcGIS.Client.Editor.EditEventArgs">EditEventArgs</see> to an Essentials <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingCompletedEventArgs">EditingCompletedEventArgs</see>.
            </summary>
            <param name="editEventArgs">The <see cref="T:ESRI.ArcGIS.Client.Editor.EditEventArgs">EditEventArgs</see> instance containing the event data.</param>
            <param name="sender">The sender.</param>
            <param name="editor">The <see cref="T:ESRI.ArcGIS.Client.Editor">Editor</see> (if applicable).</param>
            <returns>An Essentials <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditingCompletedEventArgs">EditingCompletedEventArgs</see>.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.EventArgsExtensions.ToEssentialsEditAction(ESRI.ArcGIS.Client.Editor.EditAction)">
            <summary>
            Converts an ESRI <see cref="T:ESRI.ArcGIS.Client.Editor.EditAction">EditAction</see> to an Essentials <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction">EditAction</see>.
            </summary>
            <param name="esriAction">The ESRI <see cref="T:ESRI.ArcGIS.Client.Editor.EditAction">EditAction</see>.</param>
            <returns>An Essentials <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditAction">EditAction</see>.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.EventArgsExtensions.ToEssentialsEditChange(ESRI.ArcGIS.Client.Editor.Change)">
            <summary>
            Converts an ESRI <see cref="T:ESRI.ArcGIS.Client.Editor.Change">Change</see> to an Essentials <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditChange">EditChange</see>.
            </summary>
            <param name="esriChange">The ESRI <see cref="T:ESRI.ArcGIS.Client.Editor.Change">Change</see>.</param>
            <returns>An Essentials <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EditChange">Change</see>.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MGRSConversionUtility.FormatMGRSPointString(ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            This function converts a Geographical Coordinate into a MGRS Coordinate string with 1m precision.
            </summary>
            <param name="point">Geographical Map Point (WKID 4326)</param>
            <returns>MGRS Coordinate String (Example: 10UDU6471837194)</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MGRSConversionUtility.ParseMGRSString(System.String,System.Boolean,System.Double@,System.Double@)">
            <summary>
            This method takes a MGRS coodinate as a string and produces its coresponding Latitude and Longitude.
            Use the centerOfGrid parameter to specify whether to use to coordinate as a grid center or as an absolute coordinate.
            </summary>
            <param name="value">MGRS Coordinate String to Parse</param>
            <param name="centerOfGrid">If true, uses the grids center, if false, uses the southwest corner of the grid square</param>
            <param name="lon">Longitude of the MGRS coordinate</param>
            <param name="lat">Latitude of the MGRS coordinate</param>
            <returns>True if the parsing was a success, false otherwise</returns>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureDetailsContentSection.Unchanged">
            <summary>
            Represents the same section that the feature details is currently set to.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureDetailsContentSection.Description">
            <summary>
            Represents the description section of the feature details content.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureDetailsContentSection.Attributes">
            <summary>
            Represents the attributes section of the feature details content.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureDetailsContentSection.Hyperlinks">
            <summary>
            Represents the hyperlinks section of the feature details content.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureDetailsContentSection.DataLinks">
            <summary>
            Represents the datalinks section of the feature details content.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureDetailsContentSection.Chart">
            <summary>
            Represents the chart section of the feature details content.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.IPrepareMenuItemParameter">
            <summary>
            An interface for classes that can prepare menu item parameters.
            </summary>
            <remarks>
            Classes that implement this interface should also export this interface type.
            </remarks>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.IPrepareMenuItemParameter.PrepareParameter(Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MenuItem,System.Object)">
            <summary>
            Prepares the menu item for the given parameter. Typically this is done by 
            assigning the CommandParameter property of the menu item.
            </summary>
            <param name="item">The menu item to potentially prepare.</param>
            <param name="parameter">The parameter.</param>
            <returns>A value indicating whether the menu item was prepared.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectUtils">
            <summary>
            Class providing static utilities for dealing with Projects
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectUtils.ProjectQueryStringKey">
            <summary>
            Query String key representing projects.
            </summary>
            <remarks>Query strings are case sensitive by nature in Silverlight</remarks>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectUtils.IsProject">
            <summary>
            Indicates if the viewer is currently using a project.
            </summary>
            <returns>True if the viewer is currently showing a project.</returns>
            <remarks>This is done by checking the presence of the Project query string in the url.</remarks>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.RegionExtensions">
            <summary>
            Extension methods for Prism regions
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.RegionExtensions.CopyTo(Microsoft.Practices.Prism.Regions.IRegion,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Given a region, copy the image of the contents of the first active view in the region 
            to the stream. Note: All images in this region must originate in the applications current 
            domain regardless of cross domain policies otherwise security exceptions will be raised
            </summary>
            <param name="region">The name of the region in question</param>
            <param name="stream">The output stream</param>
            <param name="width">The width of the resultant bitmap</param>
            <param name="height">The height of the resultant bitmap</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.RegionExtensions.SaveToFile(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream)">
            <summary>
            Code From http://stackoverflow.com/questions/1139200/using-fjcore-to-encode-silverlight-writeablebitmap        
            Convert a writable bitmap into a form suitable for the FluxxJpeg package to process.
            </summary>
            <param name="bitmap">The bitmap in question</param>
            <param name="streamOut">The stream to write the jpg to</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.ISearchHintProvider">
            <summary>
            Interface for providing search hints given a search string.  Not to be confused with actual
            search results, search hints are simply strings of things that are related to or match the 
            provided search text.  A typical use of search hints is in an autocomplete drop down box.
            </summary>
            <remarks>
            This interface is a companion to ISearchProvider.  If a class implements ISearchProvider, 
            then it might optionally implement this class to provide search hints.  It's up to the 
            consumer of the search provider to actually make use of this functionality.  In the
            Silverlight viewer, SearchManager manages the search providers and exposes the associated
            ISearchHintProvider implementations.
            </remarks>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.ISearchHintProvider.GetSearchHints(System.Collections.ObjectModel.ObservableCollection{System.String},System.String)">
            <summary>
            Returns a collection of strings that match or are related to the provided search text.  
            This is typically used for auto complete dropdown boxes.
            </summary>
            <param name="hints">The collection of hints.  This collection should be manipulated (added)
            to by the implementation.</param>
            <param name="searchText">The text the user is searching on.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerThemeChangingEvent">
            <summary>
            This event occurs just before a theme is changed.  At this point, the active theme property will be set,
            but the theme will not yet have been applied to the map.  You can get the new theme from LayerThemesInfo.Active
            and the old theme from LayerThemesInfo.Previous.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerThemeChangedEvent">
            <summary>
            This event occurs just after a theme is changed.  At this point the theme will have been applied to the map.
            You can get the new theme from LayerThemesInfo.Active and the old theme from LayerThemesInfo.Previous.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerThemeEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:Geocortex.Essentials.Client.Map"/> extent changes.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SerializableEventArgs`1">
            <summary>
            A generic helper class for dealing with strongly typed event arguments.
            </summary>
            <typeparam name="T">The event args type to be converted into serializable.</typeparam>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SerializableEventArgs">
            <summary>
            A representation of event arguments that is serializable, typically using DataContract and DataMember attributes.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SerializableEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SerializableEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SerializableEventArgs.Initialize(System.Object)">
            <summary>
            Initializes the specified class with the supplied event arguments.  Functionality that converts non-serializable event arguments into serializable 
            ones should go here.
            </summary>
            <param name="eventArgs">The non-serializable event arguments.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SerializableEventArgs`1.Initialize(System.Object)">
            <summary>
            Initializes the specified class with the supplied event arguments.
            </summary>
            <param name="eventArgs">The non-serializable event arguments.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SerializableEventArgs`1.Initialize(`0)">
            <summary>
            Initializes the specified event args.
            </summary>
            <param name="eventArgs">The event args.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.ISearchProvider">
            <summary>
            Interface definition for a search provider. Register Search providers with the search manager programatically or export a class that implements ISearchProvider
            See Core Modules GlobalSearchProvider for details.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.ISearchProvider.Search(Geocortex.Essentials.Client.Tasks.FeatureSetCollection,System.String)">
            <summary>
            Search method
            </summary>
            <param name="targetCollection">Where search results are to go</param>
            <param name="searchText">What to search for</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.ISearchProvider.CancelSearch">
            <summary>
            Cancel a search
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.ISearchProvider.Name">
            <summary>
            Gets the unique name of the provider - may be displayed on the ui
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.ISearchProvider.Description">
            <summary>
            Gets a description of a provider
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.ISearchProvider.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the provider is enabled
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.ISearchProvider.Status">
            <summary>
            Gets the current search status
            </summary>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.ISearchProvider.Progress">
            <summary>
            Event to obtain progress notifications. When a search completes, status must be set to idle or error
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager">
            <summary>
            The search manager is the central access point for all things search within the viewer.
            The idea is that various search providers will be registered with the search manager
            and will all be used when a search takes place.
            -
            Search providers are discovered or can be explicitly registered. To have your search provider
            discovered, simply create a class that implements ISearch provider, tag it with an Export attribute
            and you're good to go. 
            -
            You can also import the search manager and explicitly call RegisterSearchProvider, The net result is the same.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager._languageResources">
            <summary>
            A reference to the Language Resource Dictionary which contains translateable strings
            used for error messages.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager._globalSearchCommand">
            <summary>
            SearchMananger provides an implementation for the GlobalSearchCommand. I toyed with the idea of registering the GlobalSearch command externally to
            the SearchManager but that would have meant making more search manager properties and methods public and it felt a little dirty. This seems
            to be a lot nicer
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager._importsSatisfied">
            <summary>
            I want to ensure that (mostly during development) the search manager's imports are satisfied before anyone tries to use the class.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager._searchProviders">
            <summary>
            The list of currently registered search providers
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager.CancelSearch">
            <summary>
            Cancel any currently running searches. Yes, this manager only allows a single search to occur at a time. We can add concurrent
            searches in the future but for now, this meets our needs. In those rare cases where you actually need to search concurrently, maybe
            try instantiating an individual search provider and calling it directly.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager.CanExecuteGlobalSearch(System.String)">
            <summary>
            CanExecute part of the GlobalSearch command.
            </summary>
            <param name="searchText">The text to search for</param>
            <returns>True or false</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager.ExecuteGlobalSearch(System.String)">
            <summary>
            The execute part of the global search command.
            </summary>
            <param name="searchText">The text to search for</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager.OnImportsSatisfied">
            <summary>
            Finish initialization of search manager
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager.OnProgress(System.Object,Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchProgressEventArgs)">
            <summary>
            Check search progress. If no longer searching, then close feature set collection
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The progress event args</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager.RegisterSearchProvider(Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.ISearchProvider)">
            <summary>
            Allow a caller to manually register a search provider. Note duplicate registrations will throw
            </summary>
            <param name="provider">The provider to register</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager.RegisterAllSearchProvider(Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.ISearchProvider)">
            <summary>
            Register <paramref name="provider"/> of type <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.ISearchProvider"/>.
            </summary>
            <param name="provider">The provider to register</param>
            <remarks>
            As we don't register geocoding provider as a SearchProvider if IncludeInGlobalSearch is false, 
            we cant use them for reverse geocoding.
            This method register all the provider which will be contained in its separate collection        
            </remarks>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager.EnabledProviderCount">
            <summary>
            Gets the number of enabled search providers
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager.FeatureSetManager">
            <summary>
            Gets or sets the application's feature set manager
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager.IsSearching">
            <summary>
            Gets a value indicating whether any provider is searching then we're searching
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager.SearchProviders">
            <summary>
            Gets the registered search providers. Initial set is discovered by MEF
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchManager.AllSearchProviders">
            <summary>
            Gets the registered search providers.
            </summary>
            <remarks>
            This collection contains all the search providers, without any conditions.        
            </remarks>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchStatus">
            <summary>
            Denotes the status of a search
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchStatus.Idle">
            <summary>
            Search is not executing
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchStatus.Searching">
            <summary>
            Search is underway
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchStatus.Error">
            <summary>
            Search ended with an error
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchProgressEventArgs">
            <summary>
            Event args for search tasks
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchProgressEventArgs.Status">
            <summary>
            Gets or sets the status of the executing search
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchProgressEventArgs.Exception">
            <summary>
            Gets or sets any exception that might have been thrown
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchProgressEventArgs.Message">
            <summary>
            Gets or sets a message that might be displayed to the user. In the event of an exception, 
            then usually e.Message
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Search.SearchProgressEventArgs.Results">
            <summary>
            Gets or sets the results of the search (required). 
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineResource">
            <summary>
            This object is for internal use only by related code.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineServiceDiscoveryProvider">
            <summary>
            Contains functionality for discovering services using ArcGIS Online.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryProvider">
            <summary>
            Implementation basis for allowing discovery of services.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryProvider.GetContentAsync(System.Uri,System.Action{System.String})">
            <summary>
            Gets the content at the specified URL asynchronously.
            </summary>
            <param name="url">The URL.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryProvider.AddWorker(System.Object,System.Action)">
            <summary>
            Adds the worker.
            </summary>
            <param name="worker">The worker.</param>
            <param name="disposeAction">The dispose action.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryProvider.TryRemoveWorker(System.Object)">
            <summary>
            Tries the remove worker.
            </summary>
            <param name="worker">The worker.</param>
            <returns>Returns a value indicating if the worker concluded normally.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryProvider.OnStarting(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Starting"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryProvider.OnFinished(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Finished"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryProvider.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryProvider.OnServiceDiscovered(Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveredEventArgs)">
            <summary>
            Raises the <see cref="E:ServiceDiscovered"/> event.
            </summary>
            <param name="e">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveredEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryProvider.Start(Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters,System.Int32)">
            <summary>
            Starts discovering services.
            </summary>
            <param name="p">The p.</param>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryProvider.StartAt(Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters,System.Int32,System.Int32)">
            <summary>
            Starts discovering services at the location specified.
            </summary>
            <param name="p">The p.</param>
            <param name="startIndex">The start index.</param>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryProvider.Abort">
            <summary>
            Aborts discovering services.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryProvider.CanStartAt">
            <summary>
            Gets a value indicating whether this provider is capable of providing paging.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineServiceDiscoveryProvider.#ctor(Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineServiceDiscoveryConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineServiceDiscoveryProvider"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineServiceDiscoveryProvider.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineServiceDiscoveryProviderFactory">
            <summary>
            Contains functionality for discovering map services from ArcGIS Online.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.IServiceDiscoveryProviderFactory">
            <summary>
            Models functionality from which ServiceDiscoveryProvider instances are created.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.IServiceDiscoveryProviderFactory.CreateProviders">
            <summary>
            Creates the provider instances.
            </summary>
            <returns>Returns the new set of pvoviders.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineServiceDiscoveryProviderFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineServiceDiscoveryProviderFactory"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineServiceDiscoveryProviderFactory.CreateProviders">
            <summary>
            Creates the provider instances.
            </summary>
            <returns>Returns the new set of providers.</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineServiceDiscoveryProviderFactory.Configurations">
            <summary>
            Gets the configurations.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISServerResource">
            <summary>
            This object is for internal use only by related code.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISServerServiceDiscoveryConfiguration">
            <summary>
            Contains settings for discovering map services from  an ArcGIS server.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISServerServiceDiscoveryConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISServerServiceDiscoveryConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISServerServiceDiscoveryConfiguration.EndPointTemplates">
            <summary>
            Gets the end point templates.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISServerServiceDiscoveryConfiguration.SearchEndPoints">
            <summary>
            Gets the search end points.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISServerServiceDiscoveryConfiguration.Tokens">
            <summary>
            Gets the tokens.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISServerServiceDiscoveryProvider">
            <summary>
            Contaisn functionality for discovering map services from an ArcGIS server.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISServerServiceDiscoveryProvider.Start(Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters,System.Int32)">
            <summary>
            Starts discovering services.
            </summary>
            <param name="p">The p.</param>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISServerServiceDiscoveryProvider.#ctor(Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISServerServiceDiscoveryConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISServerServiceDiscoveryProvider"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISServerServiceDiscoveryProvider.Configuration">
            <summary>
            Gets  the configuration.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineServiceDiscoveryConfiguration">
            <summary>
            Contains settings for accessing ArcGIS Online when participating in service discovery.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineServiceDiscoveryConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineServiceDiscoveryConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineServiceDiscoveryConfiguration.Community">
            <summary>
            Gets or sets the community.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineServiceDiscoveryConfiguration.SearchEndPoint">
            <summary>
            Gets or sets the search end point from which to pull results.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ArcGIS.ArcGISOnlineServiceDiscoveryConfiguration.Tokens">
            <summary>
            Gets the tokens which may be used when accessing services.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Bing.BingServiceDiscoveryProvider">
            <summary>
            Contains functionality for discovering Bing map services.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Bing.BingServiceDiscoveryProvider.Start(Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters,System.Int32)">
            <summary>
            Starts discovering services.
            </summary>
            <param name="p">The p.</param>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Bing.BingServiceDiscoveryProvider.#ctor(Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Bing.BingServiceDiscoveryConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Bing.BingServiceDiscoveryProvider"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Bing.BingServiceDiscoveryProvider.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Bing.BingServiceDiscoveryConfiguration">
            <summary>
            Contains settings for discoverying Bing map services.
            </summary>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Definition.PreviewProperties.AsyncOperationCompleted">
            <summary>
            Occurs when there is no pending item left or there is an error during asynchronous operation.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ExportServiceDiscoveryProviderFactory">
            <summary>
            Contains functionality for creating provider instances from composition.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ExportServiceDiscoveryProviderFactory.CreateProviders">
            <summary>
            Creates the provider instances.
            </summary>
            <returns>Returns the new set of providers</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ExportServiceDiscoveryProviderFactory.ProviderExportFactories">
            <summary>
            Gets or sets the provider export factories capable of creating provider instances.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GeometryEditAction">
            <summary>
            An enumeration of geometry editing actions.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GeometryEditAction.VertexAdded">
            <summary>
            Vertex added.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GeometryEditAction.VertexRemoved">
            <summary>
            Vertex removed.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GeometryEditAction.VextedMoved">
            <summary>
            Vertex moved.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GeometryEditAction.EditCompleted">
            <summary>
            Edit completed.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GeometryEditAction.EditStarted">
            <summary>
            Edit started.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GeometryEditEventArgs">
            <summary>
            Event arguments for geometry editing operations.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GeometryEditEventArgs.Graphic">
            <summary>
            Gets the graphic.
            </summary>
            <value>The graphic.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GeometryEditEventArgs.NewPoints">
            <summary>
            Gets the new points.
            </summary>
            <value>The new points.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GeometryEditEventArgs.OldPoints">
            <summary>
            Gets the old points.
            </summary>
            <value>The old points.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GeometryEditEventArgs.Action">
            <summary>
            Gets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GraphicsLayerEditor.#ctor(ESRI.ArcGIS.Client.Map,ESRI.ArcGIS.Client.GraphicsLayer)">
            <summary>
            Initializes a new instance of the <see cref="T:ESRI.ArcGIS.Client.Editor"/> class.
            </summary>
            <param name="map">The map you're editing on.</param>
            <param name="layer">The layer you want to edit.</param>
            <exception cref="T:System.ArgumentNullException">If map or layer is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GraphicsLayerEditor.GraphicsLayer_MouseLeftButtonDown(System.Object,ESRI.ArcGIS.Client.GraphicMouseButtonEventArgs)">
            <summary>
            Called when a feature is clicked. Makes the clicked feature "active" for editing,
            by creating a set of vertices in an edit layer
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.GraphicMouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GraphicsLayerEditor.StartEdit(ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Starts editing a graphic.
            </summary>
            <param name="graphic">The graphic.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GraphicsLayerEditor.StopEdit">
            <summary>
            Stops editing a graphic.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GraphicsLayerEditor.BuildHoverLines(ESRI.ArcGIS.Client.Graphic,ESRI.ArcGIS.Client.Geometry.PointCollection,System.Boolean)">
            <summary>
            Adds hover lines and vertices to track mouseover on the polygon outline and line segments.
            </summary>
            <param name="graphic">The graphic.</param>
            <param name="ps">The points.</param>
            <param name="includeLastPoint">set to <c>true</c> for lines and <c>false</c> for polygons.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GraphicsLayerEditor.VertexLayer_MouseLeave(System.Object,ESRI.ArcGIS.Client.GraphicMouseEventArgs)">
            <summary>
            Removes the snap vertex.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.GraphicMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GraphicsLayerEditor.VertexLayer_MouseMove(System.Object,ESRI.ArcGIS.Client.GraphicMouseEventArgs)">
            <summary>
            Shows and moves the snap vertex.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.GraphicMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GraphicsLayerEditor.FindPointOnLineClosestToPoint(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Finds the point on a line closest to point (used for line snapping).
            </summary>
            <param name="p0">Start of line segment.</param>
            <param name="p1">End of line segment.</param>
            <param name="p">Point to snap.</param>
            <returns>The point on a line closest to point specified.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GraphicsLayerEditor.Vertex_DoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the Double click event extension on Graphic and deletes the vertex.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GraphicsLayerEditor.StartTracking">
            <summary>
            Hooks up mouse events for moving the geometry/vertex
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GraphicsLayerEditor.StopTracking">
            <summary>
            Unhooks mouse events and stops tracking vertex dragging
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GraphicsLayerEditor.MyMap_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the MouseLeave event of the MyMap control (cancels vertex drag tracking).
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GraphicsLayerEditor.Map_MouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseLeftButtonUp event of the Map control (cancels vertex drag tracking).
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GraphicsLayerEditor.Map_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the MouseMove event of the Map control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GraphicsLayerEditor.GeometryEdit">
            <summary>
            Occurs when geometry edit operations happen.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.GraphicsLayerEditor.IsEnabled">
            <summary>
            Gets or sets a value indicating whether editing is enabled.
            </summary>
            <value>
                <c>true</c> if editing is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.MouseExtensions">
            <summary>
            Extension methods for tracking double clicking on graphics.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.MouseExtensions.AddDoubleClick(ESRI.ArcGIS.Client.Graphic,System.Windows.Input.MouseButtonEventHandler)">
            <summary>
            Adds a double click event handler.
            </summary>
            <param name="element">The Element to listen for double clicks on.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Editing.MouseExtensions.RemoveDoubleClick(ESRI.ArcGIS.Client.Graphic,System.Windows.Input.MouseButtonEventHandler)">
            <summary>
            Removes a double click event handler.
            </summary>
            <param name="element">The element.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.AuthenticatingEvent">
            <summary>
            Event which fires when the application is authenticating
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.AuthenticationSucceededEvent">
            <summary>
            Event which fires when authentication succeeded
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.AuthenticationFailedEvent">
            <summary>
            Event which fires when authentication failed
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.AuthenticationEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:Geocortex.Essentials.Client.Map"/> mouse events.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.AuthenticationEventArgs.#ctor(Geocortex.Essentials.Client.Site,Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.AuthenticationEventArgsPayload)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapMouseEventArgs"/> class.
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Map"/></param>.
            <param name="args">The <see cref="T:System.Windows.Input.MouseEventArgs"/></param>.
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.AuthenticationEventArgsPayload">
            <summary>
            Represents the result of an authentication event.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EventRegistry">
            <summary>
            A central registry for events that are given a unique string name.  Events can then be referenced by string name in places like configuration and workflow.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EventRegistry.#ctor(Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleTracker,Microsoft.Practices.Prism.Events.IEventAggregator)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EventRegistry"/> class.
            </summary>
            <param name="moduleTracker">The module tracker.</param>
            <param name="eventAggregator">The event aggregator.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EventRegistry.Subscribe(System.String,System.Action{System.Object})">
            <summary>
            Subscribes to a named event using the supplied handler.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="handler">The handler.</param>
            <returns>The Type of the event arguments that will be passed to handler.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EventRegistry.Unsubscribe(System.String,Microsoft.Practices.Prism.Events.SubscriptionToken)">
            <summary>
            Unsubscribes the specified event name.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EventRegistry.LoadNamedEvents(System.Reflection.Assembly)">
            <summary>
            Loads the named events for the supplied assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EventRegistry.GetEventType(System.String)">
            <summary>
            Gets the Type of the event for the supplied event name.
            </summary>
            <param name="eventName">Name of the event.</param>
            <returns>The Type corresponding to the named event.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EventRegistry.GetSerializableEventArgs(System.String,System.Object)">
            <summary>
            Gets the event serializer.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="eventArgs">The event args.</param>
            <returns>The Json serializer.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EventRegistry.GetEventArgsType(System.String)">
            <summary>
            Gets the Type of the event args that will be returned to the handler for the supplied event name.
            </summary>
            <param name="eventName">Name of the event.</param>
            <returns>The Type of the event args corresponding to the named event.</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureSetManagerEventArgs.Sender">
            <summary>
            Gets or sets the sender of the event
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectProgressEvent">
            <summary>
            Occurs when project interactions are occurring.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectProgressEventArgs">
            <summary>
            Contains information regarding project interactions.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectOperaton">
            <summary>
            Indicates what project operation is underway.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectOperaton.None">
            <summary>
            Nothing is happening.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectOperaton.Load">
            <summary>
            A project is being loaded.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectOperaton.Save">
            <summary>
            a project is being saved.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectAction">
            <summary>
            Indicates what project action occurred.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectAction.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectAction.ApplyState">
            <summary>
            State was applied to a component.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectAction.StoreState">
            <summary>
            State was stored from a component.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectAction.LoadEntry">
            <summary>
            Project entry was loaded.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectAction.SaveEntry">
            <summary>
            Project entry was saved.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectAction.LoadState">
            <summary>
            Component has read state from the project.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectAction.SaveState">
            <summary>
            Component has written state to the project.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectAction.Connecting">
            <summary>
            Connecting to server.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectAction.Receiving">
            <summary>
            Receiving project.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ProjectAction.Sending">
            <summary>
            Sending project.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.NamedEventAttribute">
            <summary>
            Attribute for giving an event a unique string name that can be used to identify it in places like
            configuration, JavaScript, and workflow.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.NamedEventAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.NamedEventAttribute"/> class.
            </summary>
            <param name="name">The unique name of the event.</param>
            <param name="toSerializableType">Type of the json serializer.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.NamedEventAttribute.Name">
            <summary>
            Gets the unique name of the event.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.NamedEventAttribute.SerializableEventArgsType">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureHoverEvent">
            <summary>
            The event that fires when a user hovers over a feature 
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureLeaveEvent">
            <summary>
            The event that fires when a user stops hovering over a feature 
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureSelectEvent">
            <summary>
            The event that fires when a user selects a feature
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureExecuteEvent">
            <summary>
            The event that fires when a user double clicks a feature
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.BufferFeatureCompleteEvent">
            <summary>
            The event that fires when a buffer feature operation completes.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.InteractiveClusterClickedEvent">
            <summary>
            The event that fires when an interactive cluster is clicked on.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureSymbolClickedEvent">
            <summary>
            The event that fires when a feature that belongs to an interactive cluster is clicked on..
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureSymbolClickedEventArgs">
            <summary>
            Event arguments for interacting with features
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureSymbolClickedEventArgs.#ctor">
            <summary>
            Creates a new instance of FeatureSelectEventArgs
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureSymbolClickedEventArgs.Sender">
            <summary>
            Gets or sets the sender of the event
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureSymbolClickedEventArgs.FeatureSymbol">
            <summary>
            Gets or sets the graphic object that user clicks on
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureSelectEventArgs">
            <summary>
            Event arguments for the given features
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureSelectEventArgs.#ctor">
            <summary>
            Creates a new instance of FeatureSelectEventArgs
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureSelectEventArgs.Sender">
            <summary>
            Gets or sets the sender of the event
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureSelectEventArgs.PreviouslySelectedFeatures">
            <summary>
            Gets or sets the list of features that used to be selected
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FeatureSelectEventArgs.SelectedFeatures">
            <summary>
            Gets or sets the list of features in question
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FullscreenModeEnteredEvent">
            <summary>
            Event that is fired when fullscreen mode is entered.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.FullscreenModeExitedEvent">
            <summary>
            Event that is fired when fullscreen mode is exited.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapControlDimensionsChangingEvent">
            <summary>
            Event that is fired when the UI dimensions are changing. A workaround because the Map only fires the ExtentChanging event when the 
            Map is being directly manipulated and not in response to changes that are due to changes in the viewable map area.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ShellRenderingEvent">
            <summary>
            Event that is fired with the shell begins rendering its child views.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ViewShownEventArgs">
            <summary>
            Custom EventArgs associated with the <see cref="T:ViewShownEvent"/>.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ViewShownEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ViewShownEventArgs"/> class.
            </summary>
            <param name="viewId">The id of the view that was shown.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ViewShownEventArgs.ViewId">
            <summary>
            Gets the id of the view that was shown.
            </summary>
            <value>The id of the view that was shown.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ViewHiddenEventArgs">
            <summary>
            Custom EventArgs associated with the <see cref="T:ViewShownEvent"/>.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ViewHiddenEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ViewHiddenEventArgs"/> class.
            </summary>
            <param name="viewId">The id of the view that was hidden.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ViewHiddenEventArgs.ViewId">
            <summary>
            Gets the id of the view that was hidden.
            </summary>
            <value>The id of the view that was hidden.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EnableMacrosEvent">
            <summary>
            Event which modules should fire when they are ready to execute macros.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EnableMacrosEventArgs">
            <summary>
            Custom EventArgs associated with the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EnableMacrosEvent"/>
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EnableMacrosEventArgs.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of the <see cref="T: Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EnableMacrosEventArgs"/>
            </summary>
            <param name="sender">The <see cref="T:System.String"/> sender</param>
            <param name="args">The name of the module.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ActiveToolChangedEvent">
            <summary>
            Event which fires when the currently active tool changes.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ToolBeginEvent">
            <summary>
            Event which fires when the currently active tool begins map interaction.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ToolVertexAddedEvent">
            <summary>
            Event which fires when the currently active tool adds a vertex through map interaction.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ToolCompleteEvent">
            <summary>
            Event which fires when the currently active tool completes map interaction.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ActiveToolChangedEventArgs">
            <summary>
            Custom EventArgs associated with the <see cref="T:ActiveToolChangedEvent"/>.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ActiveToolChangedEventArgs.#ctor(Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarTool)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ActiveToolChangedEventArgs"/> class.
            </summary>
            <param name="tool">The tool.</param>
            <exception cref="T:System.ArgumentNullException">If tool is null.</exception>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ActiveToolChangedEventArgs.ActiveTool">
            <summary>
            Gets the active tool.
            </summary>
            <value>The active tool, or null if there is no currently active tool.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ToolEventPayload`2">
            <summary>
            Custom EventArgs associated with a tool event.
            </summary>
            <typeparam name="T1">The sender type.</typeparam>
            <typeparam name="T2">The argument type.</typeparam>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ToolEventPayload`2.#ctor(Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarTool,`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ToolEventPayload`2"/> class.
            </summary>
            <param name="tool">The tool.</param>
            <param name="sender">The sender.</param>
            <param name="args">The args.</param>
            <exception cref="T:System.ArgumentNullException">If tool, sender, or args is null.</exception>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ToolEventPayload`2.Tool">
            <summary>
            Gets the tool.
            </summary>
            <value>The tool.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapExtentChangingEvent">
            <summary>
            Event which fires when the <see cref="T:Geocortex.Essentials.Client.Map"/> extent is changing.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapExtentChangedEvent">
            <summary>
            Event which fires when the <see cref="T:Geocortex.Essentials.Client.Map"/> extent has changed.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapResolutionChangingEvent">
            <summary>
            Event which fires when the <see cref="T:Geocortex.Essentials.Client.Map"/> resolution in changing.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapResolutionChangedEvent">
            <summary>
            Event which fires when the <see cref="T:Geocortex.Essentials.Client.Map"/> resolution has changed.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapGotFocusEvent">
            <summary>
            Event which fires when the <see cref="T:Geocortex.Essentials.Client.Map"/> gets focus.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapHoverBeginEvent">
            <summary>
            Event which fires when the user begins hovering over the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapHoverEndEvent">
            <summary>
            Event which fires when the user ends hovering over the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapQuickHoverBeginEvent">
            <summary>
            Event which fires when the user begins hovering almost immediately over the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapQuickHoverEndEvent">
            <summary>
            Event which fires when the user ends hovering almost immediately over the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapKeyDownEvent">
            <summary>
            Event which fires when a key has been pressed with focus on the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapKeyUpEvent">
            <summary>
            Event which fires when a key has been raised with focus on the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapLostFocusEvent">
            <summary>
            Event which fires when the <see cref="T:Geocortex.Essentials.Client.Map"/> loses focus.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapMouseClickedEvent">
            <summary>
            Event which fires when the mouse has clicked on the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapMouseLeftButtonDownEvent">
            <summary>
            Event which fires when the left mouse button has been pressed down in the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapMouseLeftButtonUpEvent">
            <summary>
            Event which fires when the left mouse button has been released in the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapMouseRightButtonDownEvent">
            <summary>
            Event which fires when the right mouse button has been pressed down in the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapMouseRightButtonUpEvent">
            <summary>
            Event which fires when the released mouse button has been released down in the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapMouseMoveEvent">
            <summary>
            Event which fires when the mouse moves in the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapProgressEvent">
            <summary>
            Event which fires when the <see cref="T:Geocortex.Essentials.Client.Map"/> progress event is fired.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapLayerPropertyChangedEvent">
            <summary>
            Event which fires when the visibility of a <see cref="T:Geocortex.Essentials.Client.Layer"/> in the <see cref="T:Geocortex.Essentials.Client.Map"/> changes.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EsriMapLayerPropertyChangedEvent">
            <summary>
            Event which fires when the visibility or opacity of a <see cref="T:ESRI.ArcGIS.Client.Layer"/> in the <see cref="T:Geocortex.Essentials.Client.Map"/> changes.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapServicePropertyChangedEvent">
            <summary>
            Event which fires when the visibility or opacity of a <see cref="T:Geocortex.Essentials.Client.MapService"/> in the <see cref="T:Geocortex.Essentials.Client.Map"/> changes.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapFilesDroppedEvent">
            <summary>
            Event which fires when files are dropped on the <see cref="T:Geocortex.Essentials.Client.Map"/>.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapItemsFilteredCollectionChangedEvent">
            <summary>
            Event which fires when either the <see cref="T:Geocortex.Essentials.Client.Map.MapServicesFilteredView"/> collection changes, or
            the <see cref="T:Geocortex.Essentials.Client.MapService.LayersFilteredView"/> collection changes in any of the map's map services.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.CatalogLayersLoadedFromProject">
            <summary>
            Event which fires when a project that includes catalog layers are restored and the catalog layers added to the map.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapTimeExtentChangedEvent">
            <summary>
            Event which fires when the <see cref="T:ESRI.ArcGIS.Client.Map.TimeExtent"/> is changed using the <see cref="T:Geocortex.Essentials.Infrastructure.Commands.MapCommands.SetTimeExtent"/> Command
            </summary>
            <remarks> This event will only be raised by the command mentioned in the summary </remarks>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EssentialsMapEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use for MapEvents that don't have any other arguments.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapServiceEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use for MapService events that don't have any other arguments.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapExtentEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:Geocortex.Essentials.Client.Map"/> extent changes.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapExtentEventArgs.#ctor(ESRI.ArcGIS.Client.Map,ESRI.ArcGIS.Client.ExtentEventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapExtentEventArgs"/> class.
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Map"/></param>.
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.ExtentEventArgs"/></param>.
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapFocusEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:Geocortex.Essentials.Client.Map"/> focus changes.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapFocusEventArgs.#ctor(ESRI.ArcGIS.Client.Map,System.Windows.RoutedEventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapFocusEventArgs"/> class.
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Map"/></param>.
            <param name="args">The <see cref="T:System.Windows.RoutedEventArgs"/></param>.
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapHoverEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:Geocortex.Essentials.Client.Map"/> hover events.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapHoverEventArgs.#ctor(ESRI.ArcGIS.Client.Map,Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MapHoverInfo)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapFocusEventArgs"/> class.
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Map"/></param>.
            <param name="args">The <see cref="T:System.Windows.Input.MouseEventArgs"/></param>.
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapKeyEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:Geocortex.Essentials.Client.Map"/> key presses.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapKeyEventArgs.#ctor(ESRI.ArcGIS.Client.Map,System.Windows.Input.KeyEventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapKeyEventArgs"/> class.
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Map"/></param>.
            <param name="args">The <see cref="T:System.Windows.Input.KeyEventArgs"/></param>.
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapLayerPropertyChangedEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:Geocortex.Essentials.Client.Layer"/> visibility changes.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapLayerPropertyChangedEventArgs.#ctor(ESRI.ArcGIS.Client.Map,Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.LayerStateInfo)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapLayerPropertyChangedEventArgs"/> class.
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Map"/></param>.
            <param name="info">The <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EsriMapLayerPropertyChangedEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:ESRI.ArcGIS.Client.Layer"/> visibility and opacity changes.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EsriMapLayerPropertyChangedEventArgs.#ctor(ESRI.ArcGIS.Client.Map,Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.EsriLayerStateInfo)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EsriMapLayerPropertyChangedEventArgs"/> class.
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Map"/></param>.
            <param name="info">The <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapServicePropertyChangedEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:Geocortex.Essentials.Client.MapService"/> visibility and opacity changes.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapServicePropertyChangedEventArgs.#ctor(ESRI.ArcGIS.Client.Map,Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MapServiceStateInfo,System.EventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapServicePropertyChangedEventArgs"/> class.
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Map"/></param>.
            <param name="info">The <see cref="T:System.EventArgs"/></param>
            <param name="sourceEventArgs">The optional <see cref="T:System.EventArgs"/> from the original source elements event</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapMouseButtonEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:Geocortex.Essentials.Client.Map"/> mouse button events.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapMouseButtonEventArgs.#ctor(ESRI.ArcGIS.Client.Map,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapMouseButtonEventArgs"/> class.
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Map"/></param>.
            <param name="args">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/></param>.
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapMouseClickedEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:Geocortex.Essentials.Client.Map"/> mouse click events.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapMouseClickedEventArgs.#ctor(ESRI.ArcGIS.Client.Map,ESRI.ArcGIS.Client.Map.MouseEventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapMouseClickedEventArgs"/> class.
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Map"/></param>.
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.Map.MouseEventArgs"/></param>.
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapMouseEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:Geocortex.Essentials.Client.Map"/> mouse events.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapMouseEventArgs.#ctor(ESRI.ArcGIS.Client.Map,System.Windows.Input.MouseEventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapMouseEventArgs"/> class.
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Map"/></param>.
            <param name="args">The <see cref="T:System.Windows.Input.MouseEventArgs"/></param>.
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapProgressEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:Geocortex.Essentials.Client.Map"/> extent changes.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapProgressEventArgs.#ctor(ESRI.ArcGIS.Client.Map,ESRI.ArcGIS.Client.ProgressEventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapExtentEventArgs"/> class.
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Map"/></param>.
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.ExtentEventArgs"/></param>.
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapResolutionEventArgs">
            <summary>
            Custom <see cref="T:System.EventArgs"/> class for use with <see cref="T:Geocortex.Essentials.Client.Map"/> extent changes.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapResolutionEventArgs.#ctor(ESRI.ArcGIS.Client.Map,Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ResolutionEventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapExtentEventArgs"/> class.
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Map"/></param>.
            <param name="args">The <see cref="T:ESRI.ArcGIS.Client.ExtentEventArgs"/></param>.
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.TimeExtentChangedEventArgs">
            <summary>
            Custom class for use within <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapTimeExtentEventArgs"/>
            </summary>
            <remarks> This class just holds the old time extent and the new time extent</remarks>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapTimeExtentEventArgs">
            <summary>
            Custom class for use with the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapTimeExtentChangedEvent"/>
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapTimeExtentEventArgs.#ctor(ESRI.ArcGIS.Client.Map,Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.TimeExtentChangedEventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.MapExtentEventArgs"/> class.
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Map"/></param>.
            <param name="args">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.TimeExtentChangedEventArgs"/></param>.
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.InitializationActivityEvent">
            <summary>
            Event fired by components when they delay the site loading process and wish to ensure it doesn't time out.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerInitializedEvent">
            <summary>
            Event which is fired when a <see cref="T:Geocortex.Essentials.Client.Site"/> layer is successfully loaded.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerInitializationFailedEvent">
            <summary>
            Event which is fired when a <see cref="T:Geocortex.Essentials.Client.Site"/>  is not successfully loaded.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerCollectionChangedEvent">
            <summary>
            Event which is fired when the <see cref="T:Geocortex.Essentials.Client.Site"/> layer collection have changed.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ServiceLayersLoadedEvent">
            <summary>
            Event which is fired when all service layers have been added to the Esri map object.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ServiceLayersInitializedEvent">
            <summary>
            Event which is fired when all the service layers have been initialized.
            </summary>
            <remarks>This event only fires once.</remarks>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SiteInitializedEvent">
            <summary>
            Event which is fired when the <see cref="T:Geocortex.Essentials.Client.Site"/> has successfully completed initialization.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SiteInitializationFailedEvent">
            <summary>
            Event which is fired when the <see cref="T:Geocortex.Essentials.Client.Site"/> failed to initialize.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ServiceLayersLoadedEventArgs">
            <summary>
            Custom EventArgs associated with the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ServiceLayersLoadedEvent"/>
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ServiceLayersInitializedEventArgs">
            <summary>
            Custom EventArgs associated with the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ServiceLayersInitializedEvent"/>
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SiteInstancePublishEventArgs">
            <summary>
            Custom EventArgs associated with the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SiteInstancePublishEvent"/>
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.InititializionActivityEventArgs">
            <summary>
            Custom EventArgs associated with the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.InititializionActivityEvent"/>
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SiteInitializedEventArgs">
            <summary>
            Custom EventArgs associated with the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SiteInitializedEvent"/>
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SiteInitializedEventArgs.#ctor(Geocortex.Essentials.Client.Site,System.EventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SiteInitializedEventArgs"/>
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Site"/></param>
            <param name="args">The arguments.</param>
            <exception cref="T:System.ArgumentNullException">If sender is null.</exception>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SiteInitializationFailedEventArgs">
            <summary>
            Custom EventArgs associated with the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SiteInitializationFailedEvent"/>
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SiteInitializationFailedEventArgs.#ctor(Geocortex.Essentials.Client.Site,Geocortex.Essentials.Client.InitializationFailedEventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.SiteInitializationFailedEventArgs"/>
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Site"/></param>
            <param name="args">The arguments.</param>
            <exception cref="T:System.ArgumentNullException">If sender is null.</exception>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerCollectionChangedEventArgs">
            <summary>
            Custom EventArgs associated with the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ServiceLayersLoadedEvent"/>
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerCollectionChangedEventArgs.#ctor(Geocortex.Essentials.Client.Site,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerCollectionChangedEventArgs"/>
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Site"/></param>
            <param name="args">The arguments.</param>
            <exception cref="T:System.ArgumentNullException">If sender is null.</exception>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerInitializedEventArgs">
            <summary>
            Custom EventArgs associated with the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerInitializedEvent"/>
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerInitializedEventArgs.#ctor(Geocortex.Essentials.Client.Site,System.EventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerInitializedEventArgs"/>
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Site"/></param>
            <param name="args">The arguments.</param>
            <exception cref="T:System.ArgumentNullException">If sender is null.</exception>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerInitializationFailedEventArgs">
            <summary>
            Custom EventArgs associated with the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerInitializationFailedEvent"/>
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerInitializationFailedEventArgs.#ctor(Geocortex.Essentials.Client.Site,System.EventArgs)">
            <summary>
            Creates a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.LayerInitializationFailedEventArgs"/>
            </summary>
            <param name="sender">The <see cref="T:Geocortex.Essentials.Client.Site"/></param>
            <param name="args">The arguments.</param>
            <exception cref="T:System.ArgumentNullException">If sender is null.</exception>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ViewerPositionUpdatedEvent">
            <summary>
            Event which modules should fire when they are ready to execute macros.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ViewerPositionUpdatedEventArgs">
            <summary>
            Custom EventArgs associated with the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.EnableMacrosEvent"/>
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ViewerPositionUpdatedEventArgs.#ctor(System.Object,Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.WebMapIntegration.MapViewpointParams)">
            <summary>
            Creates a new instance of the <see cref="T: Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ViewerPositionUpdatedEventArgs"/>
            </summary>
            <param name="sender">The <see cref="T:System.String"/> sender</param>
            <param name="args">The name of the module.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.FeatureSetCsvExportHelper">
            <summary>
            A helper class for exporting feature set data to CSV.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.FeatureSetCsvExportHelper.ConvertFeaturesToCsvFormat(Geocortex.Essentials.Client.Tasks.FeatureSet,System.String,System.Boolean)">
            <summary>
            Converts the features to comma-separated values (CSV) format.
            </summary>
            <param name="featureSet">The feature set.</param>
            <param name="delimiter">The delimiter.</param>
            <param name="useColumnAliases">Whether to use column aliases in place of column names, where applicable.</param>
            <returns>A string representing the features in CSV format.</returns>
            <exception cref="T:System.ArgumentNullException">If featureSet, the underlying EsriFeatureSet, or delimiter is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Export.FeatureSetCsvExportHelper.ConvertFeaturesToCsvFormat(ESRI.ArcGIS.Client.Tasks.FeatureSet,System.String,System.Boolean)">
            <summary>
            Converts the features to comma-separated values (CSV) format.
            </summary>
            <param name="featureSet">The feature set.</param>
            <param name="delimiter">The delimiter.</param>
            <param name="useColumnAliases">Whether to use column aliases in place of column names, where applicable.</param>
            <returns>A string representing the features in CSV format.</returns>
            <exception cref="T:System.ArgumentNullException">If featureSet or delimiter is null.</exception>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager">
            <summary>
            The central clearing-house for all system activities that create and want to expose FeatureSet instances to other areas of the system.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.GetIdEnumerator">
            <summary>
            Gets an enumerator for the FeatureSetCollection Ids.
            </summary>
            <returns>An enumerator of Ids.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.OpenCollection(System.String)">
            <summary>
            Opens the specified collection.
            </summary>
            <param name="id">The Id of the feature set collection to open.</param>
            <remarks>Opening and closing a feature set collection does not actually change the behaviour of the collection.  It is
            used internally to keep track of multiple clients concurrently accessing a collection for the purposes of raising an event
            when the collection is first opened and finally closed.</remarks>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.CloseCollection(System.String)">
            <summary>
            Closes the specified collection.
            </summary>
            <param name="id">The Id of the feature set collection to close.</param>
            <remarks>Opening and closing a feature set collection does not actually change the behaviour of the collection.  It is
            used internally to keep track of multiple clients concurrently accessing a collection for the purposes of raising an event
            when the collection is first opened and finally closed.</remarks>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.OpenDefaultCollection">
            <summary>
            Opens the default collection.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.IsCollectionOpen(System.String)">
            <summary>
            Determines whether the specified collection is open.
            </summary>
            <param name="id">The Id of the collection.</param>
            <returns>
            <c>true</c> if the specified collection is open; otherwise, <c>false</c> if it is closed.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.IsDefaultCollectionOpen">
            <summary>
            Determines whether the default collection is open.
            </summary>
            <returns>
            <c>true</c> if the default collection is open; otherwise, <c>false</c> if it is closed.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.CloseDefaultCollection">
            <summary>
            Closes the default collection.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.AddCollection(Geocortex.Essentials.Client.Tasks.FeatureSetCollection)">
            <summary>
            Adds the specified collection with the given Id.
            </summary>
            <param name="featureSetCollection">The feature set collection to add.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.FeatureSetCollectionCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Fired whenever anything is changed within any of the FeatureSetCollections.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.AddCollection(Geocortex.Essentials.Client.Tasks.FeatureSetCollection,System.Boolean)">
            <summary>
            Adds the specified collection with the given Id.
            </summary>
            <param name="featureSetCollection">The feature set collection to add.</param>
            <param name="isDefault">if set to <c>true</c> the collection becomes the default collection.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.RemoveCollection(Geocortex.Essentials.Client.Tasks.FeatureSetCollection)">
            <summary>
            Removes the specified collection.
            </summary>
            <param name="fsc">The collection to remove.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.RemoveCollection(System.String)">
            <summary>
            Removes the specified collection.
            </summary>
            <param name="id">The id.</param>
            <returns>The removed collection.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.GetCollection(System.String)">
            <summary>
            Gets the specified feature set collection.
            </summary>
            <param name="id">The id.</param>
            <returns>The feature set collection</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.GetFeatureSetCollectionId(Geocortex.Essentials.Client.Tasks.FeatureSetCollection)">
            <summary>
            Gets the feature set collection id for the passed in FeatureSetCollection.
            </summary>
            <param name="featureSetCollection">The feature set collection.</param>
            <returns>The id if the collection is found; null if it's not.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.GetFeatureSetCollectionId(Geocortex.Essentials.Client.Tasks.FeatureSet)">
            <summary>
            Gets the feature set collection id for the supplied featureset.
            </summary>
            <param name="featureSet">The feature set.</param>
            <returns>The ID of the collection if it is found, otherwise null.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.AppendToDefault(Geocortex.Essentials.Client.Tasks.FeatureSetCollection)">
            <summary>
            Appends the specified FeatureSetCollection to the default FeatureSetCollection.
            </summary>
            <param name="collection">The collection to append.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.OnImportsSatisfied">
            <summary>
            Can't do anything until imports are satisfied. Best to do initialization here
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.NotifyDefaultCollectionChanged">
            <summary>
            Notifies that the default collection changed.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.NotifyActiveCollectionChanged">
            <summary>
            Notifies that the active collection changed.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.EventAggregator">
            <summary>
            Gets or sets the event aggregator.
            </summary>
            <value>The event aggregator.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.Item(System.String)">
            <summary>
            Gets the <see cref="T:Geocortex.Essentials.Client.Tasks.FeatureSetCollection"/> with the specified id.
            </summary>
            <param name="id">The id.</param>
            <value>
            The feature set collection for the specified Id.  Null if the Id doesn't exist.
            </value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.DefaultCollectionId">
            <summary>
            Gets or sets the Id to use for the default feature set collection.
            </summary>
            <value>The default id.</value>
            <remarks>In order to changed the Id of the default feature set collection, the collection must already exist and the previous default
            collection must be in a closed state.</remarks>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.DefaultCollection">
            <summary>
            Gets the default feature set collection.
            </summary>
            <value>The default collection.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.FeatureSetManager.ActiveCollection">
            <summary>
            Gets the active feature set collection.
            </summary>
            <value>The active collection.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Exceptions.ErrorDialog">
            <summary>
            Displays an inescapable modal dialog displaying error information.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Exceptions.ErrorDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager">
            <summary>
            Class for managing the highlighting of features in highlight layers.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.CreateHighlightLayer(System.String)">
            <summary>
            Creates a highlight layer with the specified name.
            </summary>
            <param name="layerName">Name of the layer.</param>
            <returns>The created graphics layer.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.CreateHighlightLayer(System.String,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Creates a highlight layer with the specified name and with the specified colors to use for rendering.
            </summary>
            <param name="layerName">Name of the layer.</param>
            <param name="fillColor">Color of the fill.</param>
            <param name="borderColor">Color of the border.</param>
            <returns>The created graphics layer.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.CreateHighlightLayerInternal(System.String,System.Nullable{System.Windows.Media.Color},System.Nullable{System.Windows.Media.Color})">
            <summary>
            Creates the highlight layer internally.
            </summary>
            <param name="layerName">Name of the layer.</param>
            <param name="fillColor">Color of the fill.</param>
            <param name="borderColor">Color of the border.</param>
            <returns>The created graphics layer.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.RemoveHighlightLayer(System.String)">
            <summary>
            Removes the highlight layer with the specified name.
            </summary>
            <param name="layerName">Name of the layer.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.GetHighlightLayer(System.String)">
            <summary>
            Gets an existing highlight layer with the specified name.
            </summary>
            <param name="layerName">Name of the layer.</param>
            <returns>The graphics layer.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.SetBorderColorFromString(System.String)">
            <summary>
            Sets the border color from string.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.SetBorderWidth(System.Nullable{System.Double})">
            <summary>
            Sets the border width from double.
            </summary>
            <param name="width">The width.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.PersistCurrentRendererToActiveLayer">
            <summary>
            Persists the current renderer to the active layer.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.ClearSymbolsFromActiveLayer">
            <summary>
            Clears the symbols from active layer.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.SetFillColorFromString(System.String)">
            <summary>
            Sets the fill color from string.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.UpdateFeatureHighlight(Geocortex.Essentials.Client.Tasks.Feature,ESRI.ArcGIS.Client.Geometry.Geometry,ESRI.ArcGIS.Client.GraphicsLayer)">
            <summary>
            Updates the highlight on a particular graphic in a given Highlight Layer.
            </summary>
            <param name="feature">Feature that is currently highlighted</param>
            <param name="newGeometry">Updated geometry for highlighted graphic</param>
            <param name="gl">The GraphicLayer the Graphic belongs to</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.UnhighlightFeatures(System.Collections.Generic.ICollection{Geocortex.Essentials.Client.Tasks.Feature})">
            <summary>
            Unhighlights the features.
            </summary>
            <param name="features">The features.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.Item(System.String)">
            <summary>
            Gets the <see cref="T:ESRI.ArcGIS.Client.GraphicsLayer"/> with the specified layer name.
            </summary>
            <param name="layerName">The layer name.</param>
            <value>The graphics layer.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.ActiveHighlightLayerName">
            <summary>
            Gets or sets the name of the active highlight layer.
            </summary>
            <value>The name of the active highlight layer.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.ActiveHighlightLayer">
            <summary>
            Gets the active highlight layer.
            </summary>
            <value>The active highlight layer.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.BorderWidth">
            <summary>
            Gets or sets the width of the border.
            </summary>
            <value>The width of the border.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.PolylineWidth">
            <summary>
            Gets or sets the width of the border for polylines.
            </summary>
            <value>The width of the border for polylines.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.FillColor">
            <summary>
            Gets or sets the color of the fill.
            </summary>
            <value>The color of the fill.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Features.HighlightManager.GraphicMap">
            <summary>
            Class used to associate managed (source) graphics, cloned graphics, and graphic layers.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Menus.MenuManager">
            <summary>
            View Model for the "I Want To Menu". The menu functions as both a floating popup menu, and a docked in-frame menu.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Menus.MenuManager.#ctor">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Menus.MenuManager.AddMenuItem(System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MenuItem)">
            <summary>
            Implementation of the "AddMenuItem" command. Appends a menu item to the end of the items list.
            </summary>
            <param name="menuId"> The menu ID. </param>
            <param name="menuItem"> The menu item. </param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Menus.MenuManager.RemoveMenuItem(System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MenuItem)">
            <summary>
            Implementation of the "RemoveMenuItem" command. Removes a menu item by name.
            </summary>
            <param name="menuId"> The menu ID. </param>
            <param name="menuItem"> The menu item. </param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Menus.MenuManager.ClearMenu(System.String)">
            <summary>
            Implementation of the "ClearMenu" command. Clears all menu items from the menu.
            </summary>
            <param name="menuId"> The menu ID. </param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Menus.MenuManager.LoadMenuFromConfiguration(System.String)">
            <summary>
            Loads menu configuration from the stored XML that was used initially.
            </summary>
            <param name="configuration"> The configuration string </param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Menus.MenuManager.ParseItem(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Parses a MenuItemViewModel from configuration.
            </summary>
            <param name="element">The XML element to parse.</param>
            <param name="level">The current level in the item tree.</param>
            <returns>A new MenuItemViewModel.</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Menus.MenuManager.EventAggregator">
            <summary>
            Gets or sets the IEventAggregator used to publish and subscribe to events.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Menus.MenuManager.Site">
            <summary>
            Gets or sets the Site object.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Menus.MenuManager.CommandRegistry">
            <summary>
            Gets or sets the command registry.
            </summary>
            <value>The command registry.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.CoordinateSystem.IsUserCreated">
            <summary>
            Gets or sets a value indicating whether the coordinate system was created by a user (i.e., a non-native coordinate system).
            </summary>
            <value><c>true</c> if the coordinate system was created by a user; otherwise, <c>false</c> (indicating the native coordinate system).</value>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.ErrorDialogCause.Timeout">
            <summary>
            The ErrorDialog was opened because of a timeout.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.ErrorDialogCause.Error">
            <summary>
            The ErrorDialog was opened because of an error.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MapIndicatorBehaviour">
            <summary>
            Bitwise flags that represent desired indicator behaviours.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MapIndicatorModel">
            <summary>
            Represent a visual indicator on the map and it's associated behaviour.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ImageData">
            <summary>
            Contains the image information both as raw and presentable formats.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ImageData.CopyTo(System.IO.Stream)">
            <summary>
            Copies to.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ImageData.Create(System.Int32,System.Int32)">
            <summary>
            Creates the specified width.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>Returns the image data.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ImageData.Create(System.Byte[])">
            <summary>
            Creates the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>Returns the image data.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ImageData.Create(System.IO.Stream)">
            <summary>
            Creates the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Returns the image data.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ImageData.Create(Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType,System.Byte[])">
            <summary>
            Creates the specified content type.
            </summary>
            <param name="contentType">Type of the content.</param>
            <param name="data">The data.</param>
            <returns>Returns the image data.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ImageData.Create(Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType,System.IO.Stream)">
            <summary>
            Creates the specified content type.
            </summary>
            <param name="contentType">Type of the content.</param>
            <param name="stream">The stream.</param>
            <returns>Returns the image data.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ImageData.Create(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Creates the specified bitmap source.
            </summary>
            <param name="bitmapSource">The bitmap source.</param>
            <returns>Returns the image data.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ImageData.Create(System.Windows.FrameworkElement)">
            <summary>
            Creates the specified visual.
            </summary>
            <param name="visual">The visual.</param>
            <returns>Returns the image data.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ImageData.Create(System.Windows.FrameworkElement,System.Int32,System.Int32)">
            <summary>
            Creates the specified visual.
            </summary>
            <param name="visual">The visual.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>Returns the image data.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ImageData.Create(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Creates the specified bitmap source.
            </summary>
            <param name="bitmapSource">The bitmap source.</param>
            <returns>Returns the image data.</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ImageData.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ImageData.ImageSource">
            <summary>
            Gets the image source.
            </summary>
            <value>The image source.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.CollectionExtensions">
            <summary>
            Provides basic methods for query collections involving projects.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.CollectionExtensions.Find(System.Collections.Generic.IEnumerable{Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectEntry},System.String)">
            <summary>
            Finds the specified entries using a pattern. For example, *.xaml.
            </summary>
            <param name="entries">The entries to match on.</param>
            <param name="pattern">The pattern to match on.</param>
            <returns>Returns a collection of project entries that match the pattern.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.CollectionExtensions.Find(System.Collections.Generic.IEnumerable{Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartState},System.String)">
            <summary>
            Finds module state from the specified manifest.
            </summary>
            <param name="manifest">The manifest to search.</param>
            <param name="pattern">The pattern to match on.</param>
            <returns>Returns all the state entries that were found.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.CollectionExtensions.Find``1(System.Collections.Generic.IEnumerable{Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartState},System.String)">
            <summary>
            Finds the specified manifest.
            </summary>
            <typeparam name="T">Identifies the type to filter for.</typeparam>
            <param name="manifest">The manifest.</param>
            <param name="pattern">The pattern.</param>
            <returns>Returns the list of items found.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.CollectionExtensions.SetAutoPersistence(ESRI.ArcGIS.Client.Layer,System.Boolean,System.Boolean)">
            <summary>
            Sets the auto persistence.
            </summary>
            <param name="layer">The layer.</param>
            <param name="canPersist">if set to <c>true</c> [can persist].</param>
            <param name="canPersistContent">if set to <c>true</c> [can persist content].</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType">
            <summary>
            Identifies various feature of content.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.Unspecified">
            <summary>
            Identifies content with no defined features.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.Data">
            <summary>
            Identifies raw content.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.ImagePng">
            <summary>
            Identifies content which is a PNG image.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.TextPlain">
            <summary>
            Identifies content which is text with no structure.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.Binary">
            <summary>
            Identifies raw content which has some kind of known structure.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.Json">
            <summary>
            Identifies text content with JSON structure.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.Xml">
            <summary>
            Identifies text content with XML structure.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.Contract">
            <summary>
            Identifies content which can be translated into a concrete object.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.Document">
            <summary>
            Identifies content which can be translated into XML DOM.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.Serializer">
            <summary>
            Identifies content which can be translated into a concrete object using XML serialization.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.JsonContract">
            <summary>
            Identifies content which can be translated into a concrete object using JSOn contract serialization.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType"/> class.
            </summary>
            <param name="contentTypeString">The content type string.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.Qualify(Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType)">
            <summary>
            Qualifies the specified content type.
            </summary>
            <param name="contentType">Type of the content.</param>
            <returns>Returns content type qualified.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.GetEncoding">
            <summary>
            Gets the encoding.
            </summary>
            <returns>Returns the encoding.</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.MediaSubType">
            <summary>
            Gets the type of the media structure.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.EncodingType">
            <summary>
            Gets the type of the encoding.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.FormatType">
            <summary>
            Gets the type of the format identifying the translation structure.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.FormatSubType">
            <summary>
            Gets the type of the format identifying the translation system.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType.ClrType">
            <summary>
            Gets the CLR-type that sourced the content.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.FeatureData">
            <summary>
            Contains feature information appropriate for storage.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.FeatureData.FeatureDataProperty">
            <summary>
            Attached property that enables the system to retrieve the data.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.FeatureData.GetFeatureData(ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Gets the feature data.
            </summary>
            <param name="feature">The feature.</param>
            <returns>Returns the feature data associated with this feature.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.FeatureData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.FeatureData"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.FeatureData.#ctor(ESRI.ArcGIS.Client.Graphic)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.FeatureData"/> class.
            </summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.FeatureData.Feature">
            <summary>
            Gets or sets the feature.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.FeatureData.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.IProjectApplyStore">
            <summary>
            Fundamental eventing for participating in project actions.
            </summary>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.IProjectApplyStore.ApplyState">
            <summary>
            Occurs when the state in the manifest should get applied.
            </summary>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.IProjectApplyStore.StoreState">
            <summary>
            Occurs when the state in the manifest should get updated;
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.IProjectPart">
            <summary>
            Fundamental eventing for participating in project actions.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.IProjectPart.RegisterComponent(System.Object)">
            <summary>
            Registers an component.
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.IProjectPart.RegisterComponent(System.String,System.Object)">
            <summary>
            Registers the component.
            </summary>
            <param name="path">The path.</param>
            <param name="component">The component.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.IProjectPart.RegisterDataType(System.Type)">
            <summary>
            Registers the type of the data.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.IProjectPart.LoadState">
            <summary>
            Occurs when the state should get loaded from storage.
            </summary>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.IProjectPart.SaveState">
            <summary>
            OCcurs when the state should get saved to storage.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.LayerData.LayerDataProperty">
            <summary>
            Attached property that enables the system to retrieve the data.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.LayerData.GetLayerData(ESRI.ArcGIS.Client.Layer)">
            <summary>
            Gets the layer data.
            </summary>
            <param name="layer">The layer.</param>
            <returns>Returns the layer data assocated with this layer.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.LayerData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.LayerData"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.LayerData.#ctor(ESRI.ArcGIS.Client.Layer)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.LayerData"/> class.
            </summary>
            <param name="layer">The layer.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.LayerData.CanParticipateInPreview">
            <summary>
            Gets or sets a value indicating whether this instance can participate in preview.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.LayerData.CanAutoPersist">
            <summary>
            Gets or sets a value indicating whether this instance can persist.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.LayerData.CanAutoPersistContent">
            <summary>
            Gets or sets a value indicating whether this instance can auto persist content.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.LayerData.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.LayerData.IsUsingDefaultRenderer">
            <summary>
            Gets or sets a value indicating whether the layer is using the default renderer.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.LayerData.Layer">
            <summary>
            Gets or sets the layer.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.LayerData.ZOrder">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.LayerData.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.LayerData.GraphicAttributes">
            <summary>
            Gets or sets the graphic attributes.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.Manager.LoadProjectTask.ApplyProjectState">
            <summary>
            Gets or sets a value indicating whether project state is applied after project has been loaded. 
            Defaults to true.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectList">
            <summary>
            Contains information 
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectList.Add(Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListEntry)">
            <summary>
            Adds the specified entry to the list of results.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectList"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectList.Start(System.String,System.String)">
            <summary>
            Starts the specified URL string.
            </summary>
            <param name="urlString">The URL string.</param>
            <param name="summaryInfoPath">The summary info path.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectList.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectList.Progress">
            <summary>
            Occurs when the task has new information.
            </summary>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectList.Finished">
            <summary>
            Occurs when the task is finished;
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListEntry">
            <summary>
            Contains information about a project.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListEntry.CreateArray(System.IO.Stream)">
            <summary>
            Creates an array of entries as represented in the stream specified.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Returns an array.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListEntry.BuildLaunchUrl">
            <summary>
            Gets the project URL.
            </summary>
            <returns>
            Returns the image source url for the preview.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListEntry.BuildImageUrl(System.Uri,System.Uri)">
            <summary>
            Builds the image URL.
            </summary>
            <param name="siteUrl">The site URL.</param>
            <param name="listUrl">The list URL.</param>
            <returns>
            Returns the image source url for the preview.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListEntry.BuildLaunchUrl(System.Uri)">
            <summary>
            Gets the project URL.
            </summary>
            <param name="pageUrl">The page URL.</param>
            <returns>Returns the project's url.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListEntry.BuildLaunchUrl(System.Uri,Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.SummaryInfo,System.String)">
            <summary>
            Builds the URL for launching this project.
            </summary>
            <param name="pageUrl">The page URL.</param>
            <param name="summary">The summary information for this project.</param>
            <param name="projectId">The ID of this project.</param>
            <returns>Returns the project's url.</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListEntry.LaunchUrl">
            <summary>
            Gets or sets the project URL.
            </summary>
            <value>The project URL.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListEntry.ImageSource">
            <summary>
            Gets or sets the image source.
            </summary>
            <value>The image source.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListEntry.ProjectID">
            <summary>
            Gets or sets the project ID.
            </summary>
            <value>The project ID.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListEntry.Summary">
            <summary>
            Gets or sets the summary.
            </summary>
            <value>The summary.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListGroup">
            <summary>
            Contains projects grouped by name.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListGroup"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListGroup.Add(Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListEntry)">
            <summary>
            Adds the specified entry.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListGroup.Entries">
            <summary>
            Gets the entries.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectListGroup.MostRecent">
            <summary>
            Gets the most recent.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartEventArgs">
            <summary>
            Event information regarding project events.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartEventArgs.#ctor(System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest,Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartEventArgs"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="manifest">The manifest.</param>
            <param name="storage">The storage.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartEventArgs.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartEventArgs.Manifest">
            <summary>
            Gets the manifest.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartEventArgs.Storage">
            <summary>
            Gets the storage.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest">
            <summary>
            Contains state relevant to the manifest
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.Add(System.String,System.Object)">
            <summary>
            Adds the specified key and associated value to the manifest.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.Add(System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType,System.Object)">
            <summary>
            Adds the specified key and associated value to the manifest.
            </summary>
            <param name="key">The key.</param>
            <param name="contentType">Type of the content.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.Set(System.String,System.Object)">
            <summary>
            Sets the specified key assigning the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.Set(System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType,System.Object)">
            <summary>
            Sets the specified key assigning the value.
            </summary>
            <param name="key">The key.</param>
            <param name="contentType">Type of the content.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>Returns true if the key was removed.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.TryGetValue``1(System.String,``0)">
            <summary>
            Tries to get the value given the key, otherwise yields the default value.
            </summary>
            <typeparam name="T">THe type to get.</typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Returns the value of the default value specified.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.TryGetValue``1(System.String,``0@)">
            <summary>
            Tries to get the value.
            </summary>
            <typeparam name="T">The type to get.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>Returns true if the value was retrieved.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>Returns true if the value was retrieved.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>Returns true if the key/value pair was removed.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.Add(Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartState)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.Contains(Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartState)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.CopyTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartState[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.Remove(Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartState)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>Returns true if the item was removed.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>Returns a enumerator.</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartState">
            <summary>
            Holds a key, value, and type information.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartState.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartState.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartState.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartState.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartState.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectEntry">
            <summary>
            Contains rudimentary information about an item in storage.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectEntry.#ctor(Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectEntry"/> class.
            </summary>
            <param name="contentType">Type of the content.</param>
            <param name="entryName">Name of the entry.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectEntry.CompareTo(Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectEntry)">
            <summary>
            Compares to.
            </summary>
            <param name="other">The other.</param>
            <returns>Returns an integer that represents the ordering.</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectEntry.ContentType">
            <summary>
            Gets the type of the content for the entry.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectEntry.EntryName">
            <summary>
            Gets the name of the entry.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage">
            <summary>
            Fundamental storage for state.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.CopyTo(System.IO.Stream)">
            <summary>
            Copies to.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.ToArray">
            <summary>
            To a byte array.
            </summary>
            <returns>The project as a byte array</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.Commit">
            <summary>
            Commits this instance.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.Exists(System.String)">
            <summary>
            Existses the specified entry name.
            </summary>
            <param name="entryName">Name of the entry.</param>
            <returns>Return true if the entry exists.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.Delete(System.String)">
            <summary>
            Deletes the specified entry name.
            </summary>
            <param name="entryName">Name of the entry.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.OpenReader(System.String,System.Type)">
            <summary>
            Opens the reader.
            </summary>
            <param name="entryName">Name of the entry.</param>
            <param name="type">The type.</param>
            <returns>Returns the requested reader.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.OpenReader(System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType,System.Type)">
            <summary>
            Opens the reader.
            </summary>
            <param name="entryName">Name of the entry.</param>
            <param name="contentType">Type of the content.</param>
            <param name="type">The type.</param>
            <returns>Returns teh requested reader.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.OpenWriter(System.String,System.Type)">
            <summary>
            Opens the writer.
            </summary>
            <param name="entryName">Name of the entry.</param>
            <param name="type">The type.</param>
            <returns>Returns the requested writer.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.OpenWriter(System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType,System.Type)">
            <summary>
            Opens the writer.
            </summary>
            <param name="entryName">Name of the entry.</param>
            <param name="contentType">Type of the content.</param>
            <param name="type">The type.</param>
            <returns>Returns the requested writer.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.Read(System.String,System.Type)">
            <summary>
            Reads the specified entry name.
            </summary>
            <param name="entryName">Name of the entry.</param>
            <param name="type">The type.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.Read(System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType,System.Type)">
            <summary>
            Reads the specified entry name.
            </summary>
            <param name="entryName">Name of the entry.</param>
            <param name="contentType">Type of the content.</param>
            <param name="type">The type.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.Write(System.String,System.Object)">
            <summary>
            Writes the specified entry name.
            </summary>
            <param name="entryName">Name of the entry.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.Write(System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType,System.Object)">
            <summary>
            Writes the specified entry name.
            </summary>
            <param name="entryName">Name of the entry.</param>
            <param name="contentType">Type of the content.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.OpenReader``1(System.String)">
            <summary>
            Opens the reader.
            </summary>
            <typeparam name="T">The type of the value to get.</typeparam>
            <param name="entryName">Name of the entry.</param>
            <returns>Returns the requested reader.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.OpenReader``1(System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType)">
            <summary>
            Opens the reader.
            </summary>
            <typeparam name="T">The type of the reader to get.</typeparam>
            <param name="entryName">Name of the entry.</param>
            <param name="contentType">Type of the content.</param>
            <returns>Returns the requested reader.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.OpenWriter``1(System.String)">
            <summary>
            Opens the writer.
            </summary>
            <typeparam name="T">THe type of the writer.</typeparam>
            <param name="entryName">Name of the entry.</param>
            <returns>Returns the requested writer.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.OpenWriter``1(System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType)">
            <summary>
            Opens the writer.
            </summary>
            <typeparam name="T">The type of the writer.</typeparam>
            <param name="entryName">Name of the entry.</param>
            <param name="contentType">Type of the content.</param>
            <returns>Returns the requested writer.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.Read``1(System.String)">
            <summary>
            Reads the specified entry name.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="entryName">Name of the entry.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.Read``1(System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ContentType)">
            <summary>
            Reads the specified entry name.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="entryName">Name of the entry.</param>
            <param name="contentType">Type of the content.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns>Returns a new project storage instance.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.Create(System.IO.Stream)">
            <summary>
            Creates the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Returns a new project storage instance.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage"/> class.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.Entries">
            <summary>
            Gets the entries.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.ContentAdapters">
            <summary>
            Gets the content adapters.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectStorage.ObjectAdapters">
            <summary>
            Gets the object adapters.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.SummaryInfo">
            <summary>
            Contains summary information.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.SummaryInfo.ProductID">
            <summary>
            Gets or sets the product ID.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.SummaryInfo.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.SummaryInfo.DisplayPath">
            <summary>
            Gets or sets the display path.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.SummaryInfo.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.SummaryInfo.CreatorName">
            <summary>
            Gets or sets the name of the creator.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.SummaryInfo.CreationTimeLocal">
            <summary>
            Gets or sets the creation time local.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.SummaryInfo.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.SummaryInfo.CreationTimeString">
            <summary>
            Gets or sets the creation time string.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.SummaryInfo.ProjectCategory">
            <summary>
            Gets or sets the project category.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.SummaryInfo.Viewer">
            <summary>
            Gets or sets the viewer.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.SummaryInfo.ViewerConfig">
            <summary>
            Gets or sets the viewer.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion">
            <summary>
            Proper implementation for presenting views in a modal window.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.Activate(System.Object)">
            <summary>
            Marks the specified view as active.
            </summary>
            <param name="view">The view to activate.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.Add(System.Object,System.String,System.Boolean)">
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <param name="viewName">The name of the view. This can be used to retrieve it later by calling <see cref="M:Microsoft.Practices.Prism.Regions.IRegion.GetView(System.String)"/>.</param>
            <param name="createRegionManagerScope">When <see langword="true"/>, the added view will receive a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/>, otherwise it will use the current region manager for this region.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.Add(System.Object,System.String)">
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <param name="viewName">The name of the view. This can be used to retrieve it later by calling <see cref="M:Microsoft.Practices.Prism.Regions.IRegion.GetView(System.String)"/>.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>. It will be the current region manager when using this overload.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.Add(System.Object)">
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>. It will be the current region manager when using this overload.
            </returns>
            <overloads>Adds a new view to the region.</overloads>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.Deactivate(System.Object)">
            <summary>
            Marks the specified view as inactive.
            </summary>
            <param name="view">The view to deactivate.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.GetView(System.String)">
            <summary>
            Returns the view instance that was added to the region using a specific name.
            </summary>
            <param name="viewName">The name used when adding the view to the region.</param>
            <returns>
            Returns the named view or <see langword="null"/> if the view with <paramref name="viewName"/> does not exist in the current region.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.Remove(System.Object)">
            <summary>
            Removes the specified view from the region.
            </summary>
            <param name="view">The view to remove.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.RequestNavigate(System.Uri,System.Action{Microsoft.Practices.Prism.Regions.NavigationResult})">
            <summary>
            Initiates navigation to the target specified by the <see cref="T:System.Uri"/>.
            </summary>
            <param name="target">The navigation target</param>
            <param name="navigationCallback">The callback executed when the navigation request is completed.</param>
            <remarks>
            Convenience overloads for this method can be found as extension methods on the
            <see cref="T:Microsoft.Practices.Prism.Regions.NavigationAsyncExtensions"/> class.
            </remarks>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.ActiveViews">
            <summary>
            Gets a readonly view of the collection of all the active views in the region.
            </summary>
            <value>
            An <see cref="T:Microsoft.Practices.Prism.Regions.IViewsCollection"/> of all the active views.
            </value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.Behaviors">
            <summary>
            Gets the collection of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/>s that can extend the behavior of regions.
            </summary>
            <value></value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.Context">
            <summary>
            Gets or sets a context for the region. This value can be used by the user to share context with the views.
            </summary>
            <value>The context value to be shared.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.Name">
            <summary>
            Gets or sets the name of the region that uniquely identifies the region within a <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/>.
            </summary>
            <value>The name of the region.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.HasCloseButton">
            <summary>
            Gets or sets a value indicating whether this instance has close button.
            </summary>
            <value>
            <c>true</c> if this instance has close button; otherwise, <c>false</c>. The default is true.
            </value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.NavigationService">
            <summary>
            Gets or sets the navigation service.
            </summary>
            <value>The navigation service.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.RegionManager">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> that will be passed to the views when adding them to the region, unless the view is added by specifying createRegionManagerScope as <see langword="true"/>.
            </summary>
            <value>
            The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> where this <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> is registered.
            </value>
            <remarks>This is usually used by implementations of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> and should not be
            used by the developer explicitely.</remarks>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.SortComparison">
            <summary>
            Gets or sets the comparison used to sort the views.
            </summary>
            <value>The comparison to use.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.Views">
            <summary>
            Gets a readonly view of the collection of views in the region.
            </summary>
            <value>
            An <see cref="T:Microsoft.Practices.Prism.Regions.IViewsCollection"/> of all the added views.
            </value>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ModalWindowRegion.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.StackPanelRegionAdapter">
            <summary>
            A Prism region adapter for a StackPanel.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceCandidateInfo">
            <summary>
            Contains information about a candidate map service.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceCandidateInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceCandidateInfo.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceCandidateInfo.Definition">
            <summary>
            Gets or sets the definition.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceCandidateInfo.EndPoint">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceCandidateInfo.LayerName">
            <summary>
            Gets or sets the name of the layer.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceCandidateInfo.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceCandidateInfo.SpatialSystem">
            <summary>
            Gets or sets the spatial system.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceCandidateInfo.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceLayerInfo">
            <summary>
            Contains information about a particular layer on an available service.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceLayerInfo.EndPoint">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceLayerInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceLayerInfo.ParentLayer">
            <summary>
            Gets or sets the parent layer.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceLayerInfo.SubLayers">
            <summary>
            Gets or sets the sub layers.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceInfo">
            <summary>
            Contains information about a potential map service.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceInfo.CreateFromUrl(System.Uri)">
            <summary>
            Creates an instance of a MapServiceInfo from a URL. 
            </summary>
            <param name="url">The URL.</param>
            <returns>Returns the instance.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceInfo.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceInfo.Definition">
            <summary>
            Gets or sets the definition.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceInfo.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceInfo.EndPoint">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceInfo.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceInfo.Origin">
            <summary>
            Gets or sets the origin.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceInfo.Preview">
            <summary>
            Gets or sets the preview.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceInfo.SpatialSystem">
            <summary>
            Gets or sets the spatial system.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceInfo.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceInfo.WebLink">
            <summary>
            Gets or sets the web link.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceOriginInfo">
            <summary>
            Contains information about the map service origin.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceOriginInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceOriginInfo.Community">
            <summary>
            Gets or sets the community. This is usually relevant when presenting the user with a category for results.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceOriginInfo.Folder">
            <summary>
            Gets or sets the folder.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceOriginInfo.Host">
            <summary>
            Gets or sets the host.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.MapServiceOriginInfo.Publisher">
            <summary>
            Gets or sets the publisher.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Rss.RssServiceDiscoveryProvider">
            <summary>
            Contains functionality for discovery GEO RSS services.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Rss.RssServiceDiscoveryProvider.Start(Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters,System.Int32)">
            <summary>
            Starts discovering services.
            </summary>
            <param name="p">The p.</param>
            <param name="limit">The limit.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveredEventArgs">
            <summary>
            Contains event information about a discovered service.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveredEventArgs.#ctor(System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveredEventArgs"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveredEventArgs.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveredEventArgs.Index">
            <summary>
            Gets the index.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveredEventArgs.Total">
            <summary>
            Gets the total.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters">
            <summary>
            Contains information about a service discovery request.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters.IsMatch(System.String)">
            <summary>
            Determines whether the specified text is match.
            </summary>
            <param name="text">The text.</param>
            <returns>
            <c>true</c> if the specified text is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters.IsTrivial">
            <summary>
            Determines whether this instance is trivial.
            </summary>
            <returns>
            <c>true</c> if this instance is trivial; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters"/> class.
            </summary>
            <param name="resultType">Type of the result.</param>
            <param name="text">The text.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters.Hints">
            <summary>
            Gets the hints (service locations) to probe.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters.Specifiers">
            <summary>
            Gets the specifiers (type of results) to acquire.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters.Words">
            <summary>
            Gets the words to search for.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryContext">
            <summary>
            Contains functionality for discovering services.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryContext.OnStarting(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Starting"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryContext.OnFinished(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Finished"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryContext.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryContext.#ctor(System.Collections.Generic.IEnumerable{Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryContext"/> class.
            </summary>
            <param name="providers">The providers.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryContext.#ctor(System.Collections.Generic.IEnumerable{Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.IServiceDiscoveryProviderFactory})">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryContext"/> class.
            </summary>
            <param name="providerFactories">The provider factories.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryContext.Start(Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters,System.Int32)">
            <summary>
            Starts the specified p.
            </summary>
            <param name="p">The p.</param>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryContext.Abort">
            <summary>
            Aborts this instance.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryContext.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryContext.Starting">
            <summary>
            Occurs when [starting].
            </summary>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryContext.Finished">
            <summary>
            Occurs when [finished].
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector">
            <summary>
            Automatically reprojects any graphics in any GeoRSS layer that 
            doesn't match the spatial reference of the map.
            </summary>
            <remarks>
            Reprojection between WGS84 Geographic (SR=4326) and WebMercator (SR=102100,102113,3857)
            is handled on the client. Any other projection requires the GeometryServiceUrl property
            to be set to a valid geometry service.
            </remarks>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.PreviousGraphicsCollectionProperty">
            <summary>
            We use this to store a reference to the graphics collection that
            we have a CollectionChanged event handler attached to. This is to be
            able to detach from it, in case the Graphics collection gets replaced.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.webMercatorSref">
            <summary>
            WebMercator Spatial reference - This projection we can handle clientside
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.wgs84Sref">
            <summary>
            WGS84 Geographic Spatial reference - This projection we can handle clientside
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.timer">
            <summary>
            We use this timer to 'throttle' reprojections. If a lot of features are being added
            in a loop, we hold off for a few milliseconds to see if any more features are being
             added, so we can group them together in one big projection request.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.pendingReprojection">
            <summary>
            Queue of pending features to be projected
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.proj">
            <summary>
            Projection utility instance used to project between WGS84 and WebMercator on the client
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.GetProjector(System.Windows.DependencyObject)">
            <summary>
            Gets the reprojector attached to the dependency object
            </summary>
            <param name="obj">A Dependency Object</param>
            <returns>Self AutoProjector object</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.SetProjector(System.Windows.DependencyObject,Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector)">
            <summary>
            Attaches a reprojector to a dependency object
            </summary>
            <param name="obj">A Dependency Object</param>
            <param name="value">A AutoProjector Object</param>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.ProjectorProperty">
            <summary>
            Identifies the Projector attached dependency property.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.AttachLayerEvents(Geocortex.Essentials.Client.GeoRss.GeoRssLayer)">
            <summary>
            Starts listening for Layer changed events on the map
            </summary>
            <param name="layer">A GeoRSS layer</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.DetachLayerEvents(Geocortex.Essentials.Client.GeoRss.GeoRssLayer)">
            <summary>
            Undo's <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.AttachLayerEvents(Geocortex.Essentials.Client.GeoRss.GeoRssLayer)"/>.
            </summary>
            <param name="layer">A GeoRSS layer</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.LayerPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called if a property on the layer fires. 
            If the spatial reference changes, start reprojecting graphics.
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Event object</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.AttachGeoRssLayerEvents(Geocortex.Essentials.Client.GeoRss.GeoRssLayer)">
            <summary>
            Attaches changed events to a GeoRSS layer
            </summary>
            <param name="layer">A GeoRSSLayer object</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.DetachGeoRssLayerEvents(Geocortex.Essentials.Client.GeoRss.GeoRssLayer)">
            <summary>
            Undo's <see cref="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.AttachGeoRssLayerEvents(Geocortex.Essentials.Client.GeoRss.GeoRssLayer)"/>.
            </summary>
            <param name="layer">A GeoRssLayer object</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.GeoRssLayerPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called if a GeoRssLayer.Graphics property is changed.
            Unhook the listener from the old collection and start listening to
            the new one.
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Event object</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.Graphics_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called if a GeoRssLayer.Graphics collection changes.
            If a graphic got added, enqueues it for reprojection if necessary.
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Event object</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.GeometryServiceUrl">
            <summary>
            Gets or sets the geometry service URL.
            </summary>
            <value>The geometry service URL.</value>
            <remarks>
            Reprojection between WGS84 Geographic (SR=4326) and WebMercator (SR=102100,102113,3857)
            is handled on the client. Any other projection requires the GeometryServiceUrl property
            to be set to a valid geometry service.
            </remarks>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.EsriMap">
            <summary>
            Gets or sets a reference to the map we are currently attached to
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.MessageResources">
            <summary>
            Gets or sets a reference to a language resource to extract text messages
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Util.AutoProjector.GraphicRef">
            <summary>
            Uses for storing a reference to the graphic and its geometry
            when the graphic is enqueued for reprojection.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Wms.WmsServiceDiscoveryProvider">
            <summary>
            Contains functionality for discovering Web Map Services.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Wms.WmsServiceDiscoveryProvider.Start(Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.ServiceDiscoveryParameters,System.Int32)">
            <summary>
            Starts discovering services.
            </summary>
            <param name="p">The p.</param>
            <param name="limit">The limit.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.ServiceDiscovery.Wms.WmsServiceDiscoveryProvider.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarAction">
            <summary>
            Wrapper for both a regular button and a toggle button that will switch between them based on the nature of the command.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarAction.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarButtonControlBase.TextProperty">
            <summary>
            Identifier for the Text dependency property.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarButtonControlBase.ImageProperty">
            <summary>
            Identifier for the Image dependency property.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarButtonControlBase.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarButtonControlBase.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarItemControl">
            <summary>
            This is a control that is used to visually display any toolbar item, such as a button,
            tool, splitter, region, or group.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarItemControl.GetCommand(Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarButton)">
            <summary>
            Gets the command for the specified button.
            </summary>
            <param name="button">The button.</param>
            <returns>The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.CommandWrapper"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If button is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarItemControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarItemControl.ToolbarButtonCommand">
            <summary>
            Gets the toolbar button command.
            </summary>
            <value>The toolbar button command.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarToggleButtonControlBase">
            <summary>
            Encapsulates the common properties and functionality for ToolbarToggleButtonControl
            and ToolbarToggleButtonSm.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarToggleButtonControlBase.TextProperty">
            <summary>
            Identifier for the Text dependency property.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarToggleButtonControlBase.ImageProperty">
            <summary>
            Identifier for the Image dependency property.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarToggleButtonControlBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarToggleButtonControl"/> class.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarToggleButtonControlBase.IsStickyChecked">
            <summary>
            Gets a value indicating whether this tool button is sticky checked.
            Sticky checked means that it stays enabled until disabled.  If it's not sticky
            checked (but is checked), then it will become disabled after using a tool.
            </summary>
            <value>
                <c>true</c> if this instance is sticky checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarToggleButtonControlBase.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Toolbar.ToolbarToggleButtonControlBase.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.ITranslationProvider">
            <summary>
            Interface definition for a translation provider. 
            Register this translation provider with the translation manager.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.ITranslationProvider.Translate(System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.TranslationDirection)">
            <summary>
            Does a Key Value lookup based on the direction.
            </summary>
            <param name="keyValueParam">The key or value to translate.</param>
            <param name="translationDirection">The direction to perform the translation.</param>
            <returns>The result of the translation.</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.ITranslationProvider.Translations">
            <summary>
            Gets or sets the dictionary of translations.
            </summary>
            <remarks>
            Key: Key
            Value: List of translations which associate to the key.
            </remarks>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.LayerCatalog.LayerCatalogTranslationProvider">
            <summary>
            Use this class when there are catalog layer display names to translate.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.LayerCatalog.LayerCatalogTranslationProvider.Translate(System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.TranslationDirection)">
            <summary>
            Does a Key Value lookup based on the direction.
            </summary>
            <param name="keyValueParam">The key or value to translate.</param>
            <param name="translationDirection">The direction to perform the translation.</param>
            <returns>The result of the translation.</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.LayerCatalog.LayerCatalogTranslationProvider.Translations">
            <summary>
            Gets or sets the dictionary of translations.
            </summary>
            <remarks>
            Key: Key
            Value: List of translations which associate to the key.
            </remarks>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.TranslationDirection">
            <summary>
            Denotes the translation direction.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.TranslationDirection.KeyToValue">
            <summary>
            Indicates translation dicrection from Key to Value.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.TranslationDirection.ValueToKey">
            <summary>
            Indicates translation dicrection from Value to Key.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.TranslationManager">
            <summary>
            TranslationManager is used to manage translating strings back and forth between Keys and Values.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.TranslationManager.Translate(System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.TranslationDirection)">
            <summary>
            Looks up a key or value which can be performed one of two directions.
            </summary>
            <param name="keyValueParam">A key or value to perform a lookup by.</param>
            <param name="dir">The direction you would like to perform the translation in.</param>
            <returns>The target value of translation.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.TranslationManager.Register(Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.ITranslationProvider)">
            <summary>
            Register a translation provider with the manager.
            </summary>
            <param name="translationProvider">The translation provider.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.TranslationManager.TranslationProvider">
            <summary>
            Gets the registered translation provider.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Translation.TranslationManager.HasProvider">
            <summary>
            Gets a value indicating whether the translation manager has a registered provider.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AttributeFormatters.AttributeDateFormatter">
            <summary>
            Attribute formatter for date-time types. Note: apparently esri attributes may be returned in string
            formatin which case, the AttributeStringFormatter will be used instead. If this occurs, we should fix
            our clent-API or Essentials rest rather than handle it as a special case in AttributeAPresenter
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AttributeFormatters.AttributeDateFormatter.Format(Geocortex.Essentials.Client.Field,System.Object)">
            <summary>
            Takes an attribute and formats it as local time
            </summary>
            <param name="field">The backing essentials field. Currently not used</param>
            <param name="attributeValue">The date-time value</param>
            <returns>A text block</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AttributeFormatters.AttributeNumericFormatter">
            <summary>
            Attribute formatter for numeric types. 
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AttributeFormatters.AttributeNumericFormatter.Format(Geocortex.Essentials.Client.Field,System.Object)">
            <summary>
            Takes an attribute and formats it as a number
            </summary>
            <param name="field">The backing essentials field. Currently not used</param>
            <param name="attributeValue">The numeric value</param>
            <returns>A text block</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AttributePresenter">
            <summary>
            Implements pluggable behaviour to render various attribute types.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AttributePresenter.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AutoView">
            <summary>
            A content control that asks each of its views if it would like to have its contents
            displayed. The control maintains a list of views and each time its datacontext changes
            finds a view to display.
            Use case: The feature details has a default view of a feature provided by the Silverlight Viewer 
            but a customer may wish to display the feature details for a parcel differently. 
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ObservableContentControl">
            <summary>
            A content controls doesn't have an event that fires when its content is assigned. ObservableContentControl solves this problem. 
            Use an ObservableContentControl wherever you would use ContentControl and hook its ContentChangedEvent. 
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AutoView._classInitialized">
            <summary>
            Need to initialize some infrastructure before using the autoview. This must be done only once.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AutoView._isSorted">
            <summary>
            Views displayed by this control should be sorted in priority order to ensure that certain views can override other views.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AutoView._views">
            <summary>
            The list of views that could be displayed by this control
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AutoView.AutoViewDataContextProperty">
            <summary>
            AutoViewDataContextProperty is bound to this control's datacontext. Whenever it is changed, OnDataContextChanged
            is fired. At this point, the control's contents may be changed.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AutoView.#ctor">
            <summary>
            Autoview Constructor
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AutoView.AddView(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IShowable)">
            <summary>
            Add a view to this control.
            </summary>
            <param name="view">The view to add</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AutoView.CompareViews(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IShowable,Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IShowable)">
            <summary>
            Comparer for this control's view list
            </summary>
            <param name="view1">First view to compare</param>
            <param name="view2">Second view to compare</param>
            <returns>a positive or negative integer</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AutoView.NextView(System.Object)">
            <summary>
            Find the next view in priority order to display, The view must agree to be displayed
            before it can be displayed. For example, one view might be wired up to display a feature
            for a parcel's layer
            </summary>
            <param name="dataContext">The control's current ata context</param>
            <returns>The view to display</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AutoView.OnDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Event that fires when this control's data context is changed. WPF has an event you can subscribe directly to
            In silverlight the trick is to create a dependency property that binds to the datacontext. Its a bit of a 
            hack but works pretty well.
            </summary>
            <param name="sender">This control</param>
            <param name="e">The eventargs</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AutoView.RemoveView(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IShowable)">
            <summary>
            Remove a view from this control
            </summary>
            <param name="view">The view to remove</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AutoView.SetContent(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IShowable)">
            <summary>
            Change this control's content property. For now it is pretty straight forward
            </summary>
            <param name="view">The view to set the content to</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AutoViewRegionAdapter">
            <summary>
            Region adapter for autoviews. As views are registered for a region, the region adapter adds views to the autoview
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.AutoViewRegionAdapter.Adapt(Microsoft.Practices.Prism.Regions.IRegion,System.Windows.Controls.ContentControl)">
            <summary>
            Hook that gets called before a view is added or removed from a region - sets up the handlers for it
            </summary>
            <param name="region">The region in question</param>
            <param name="regionTarget">The content going into the region</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartSeriesLabelDefinitionUtilities">
            <summary>
            This class acts as an attachable properties that acts upon the dependency object 
            (in this case a ChartSeries) so that we can bind a new template to CategoricalSeries
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartViewModel.ApplyDistinctColorsToSeries(System.Collections.Generic.IEnumerable{Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel})">
            <summary>
            Sets a distinct color for each series, based on the configured color and the number of related series
            (eg. a bar chart with days of the week will apply a different color gradient to every day series)
            </summary>
            <param name="seriesSets">The set of series to set colors on</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartViewModel.GetSeriesViewModelPriority(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel)">
            <summary>
            This method generates a tuple which is used as a key when sorting our SeriesViewModels.
            This is necessary to make sure all of the series data is rendered in the correct order.
            </summary>
            <param name="seriesViewModel">The series view model</param>
            <returns>A Tuple indicating the render priority of series data</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartViewModel.CheckAndFillSeriesViewModels(System.Collections.Generic.IEnumerable{Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel})">
            <summary>
            Fills series with blank items if there is data missing (eg. if sorted by day of the week, adds a blank object
            for each missing day in a series). Also sorts them by Category before returning.
            </summary>
            <param name="seriesSets">The series sets to be padded</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart">
            <summary>
            This is the code behind for the Geocortex <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart"/> infrastructural component.
            This class provides an abstraction on a third party charting framework allowing applications
            to be built around charts based on maps.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart._eventAggregator">
            <summary>
            The event aggregator used to subscribe to system-wide events
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart._commandRegistry">
            <summary>
            The command registry used to parse commands
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart._highlightManager">
            <summary>
            The highlight manager used to manage highlight colors
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.windowSizeTimer">
            <summary>
            We use this timer to 'throttle' chart area changed events so that we can appropriately 
            detect a different charting extent without reporting the change multiple times.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.dataUpdateTimer">
            <summary>
            We use this timer to wait a certain amount of time after the chart has updated before
            updating chart elements (such as the labels).
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.UpdateChartLayoutAsync(System.Object,System.EventArgs)">
            <summary>
            Updates the chart when the data has changed. We don't know exactly when the axis values 
            will be updated, so this is initiated after waiting for a pre-specified amount of time to elapse.
            </summary>
            <param name="sender">Dispatch timer</param>
            <param name="eventArgs">Event arguments</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.BindToChartPoint(Telerik.Charting.DataPoint,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            Binds a Telerik <see cref="T:Telerik.Charting.DataPoint"/> to our Underlying <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/> so that
            certain properties can be synchronized.  (in our case, just IsSelected)
            </summary>
            <param name="point">The Telerik <see cref="T:Telerik.Charting.DataPoint"/> to bind</param>
            <param name="handler">The PropertyChangedEventHandler to bind to</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.UnbindChartPoint(Telerik.Charting.DataPoint,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            Unbinds a Telerik <see cref="T:Telerik.Charting.DataPoint"/> from our Underlying <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/> so that
            certain properties.
            </summary>
            <param name="point">The Telerik <see cref="T:Telerik.Charting.DataPoint"/> to unbind</param>
            <param name="handler">The PropertyChangedEventHandler unbind</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.BindPieSeriesElement(Telerik.Charting.PieDataPoint,System.Windows.Shapes.Path)">
            <summary>
            We need to manually set each pie chart slice because they aren't accessible through Telerik. This 
            function is called through an overwritten method for SliceStyleSelector.
            </summary>
            <param name="dataPoint">The <see cref="T:Telerik.Charting.PieDataPoint"/> containing the actual data</param>
            <param name="slice">The pie chart slice to bind to</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.BindDataPointUiElement(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Handles event binding/unbinding for the UIElement attached to a DataPoint in our chart
            </summary>
            <param name="element">The element to bind/bind to</param>
            <param name="unbind">Unbinds the element if set to true; default is false</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.SetChartLabelsStrategy">
            <summary>
            Sets the label strategy to use based on user settings.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.SetHarmonizedAxisRange">
            <summary>
            Sets the same axis range for all series on the chart. This scale range is based on the minimum
            and maximum values found on the existing axes.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.AddChartBehaviors">
            <summary>
            This method adds behaviors to the RadChartBase object. This cannot be done in the
            XAML without extensive user of converters.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.AddChartListeners">
            <summary>
            Adds listeners to the chart. Currently only detects when the chart size has been modified.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.UpdateAxisLabeling">
            <summary>
            Changes the label spacing for the x-axis depending on the chart size and horizontal 
            zoom level. Called whenever the window size or zoom level is changed.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.UpdatePieChartSize">
            <summary>
            Resizes the pie chart in place if labels are enabled such that no label overwrites another.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.SetPieChartRadius">
            <summary>
            Sets the pie chart's <see cref="P:Telerik.Windows.Controls.ChartView.PieSeries.RadiusFactor"/>, or how large the pie chart
            is given it's area.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.GetFeatureListFromCurrentView">
            <summary>
            Gets a list of features that are currently visible in the chart area. Only valid for linear
            charts (pie chart elements are visible at all times)
            </summary>
            <returns>A list of <see cref="T:Geocortex.Essentials.Client.Tasks.Feature"/>s that are currently visible on the chart</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.GetNumberOfCategories">
            <summary>
            Calclate the number of categories to be displayed on the categorical axis. Necessary in order
            to use smart label spacing.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.GetFeaturesFromChartPoint(Geocortex.Essentials.Client.Essentials.Charting.ChartPoint)">
            <summary>
            Gets the features contained in a single chart point.
            </summary>
            <param name="item">The <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/></param>
            <returns>A list of <see cref="T:Geocortex.Essentials.Client.Tasks.Feature"/>s attached to the given <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/></returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.ChartControlOnChartPointMouseEnter(System.Object,Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartPointEventArgs)">
            <summary>
            Performs actions when the user's mouse is over a <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/>. Highlights the
            related <see cref="T:Geocortex.Essentials.Client.Tasks.Feature"/>(s) on the map.
            </summary>
            <param name="sender">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart"/>, containing chart settings such as series color</param>
            <param name="e"><see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Events.ChartPointEventArgs"/> containing the chart point</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.ExecuteFeatureActions(System.Collections.Generic.IEnumerable{Geocortex.Essentials.Client.Tasks.Feature},Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartViewModel)">
            <summary>
            Executes preset actions when a user clicks on a <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/>. This includes
            highlighting, pan/zoom, opening FDV, or running a command.
            </summary>
            <param name="features">The <see cref="T:Geocortex.Essentials.Client.Tasks.Feature"/>s to perform the action on</param>
            <param name="chartViewModel">The <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.ChartViewModel"/>, used to determine the
            pre-configured user actions</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.GetSeriesViewModelFromChartPoint(Geocortex.Essentials.Client.Essentials.Charting.ChartPoint)">
            <summary>
            Gets the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel"/> associated with a particular <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/>
            </summary>
            <param name="item">The <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/></param>
            <returns>The Associated <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel"/> or null if it cannot be found.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.GetChartPointColor(Geocortex.Essentials.Client.Essentials.Charting.ChartPoint)">
            <summary>
            Gets the color associated with a particular <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/>
            </summary>
            <param name="item">The <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/></param>
            <returns>A <see cref="T:System.Windows.Media.Color"/></returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.ExportChartToPng">
            <summary>
            Launches a save file dialog and saves the current chart to PNG. This method is currently
            only used for debugging.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.#ctor">
            <summary>
            Creates an instance of a <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart"/>
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.RadChartBaseControl_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Cartesian Chart Control is loaded into the visual tree.
            </summary>
            <param name="sender">The <see cref="T:Telerik.Windows.Controls.ChartView.RadChartBase"/> representing the chart object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.RadChartBaseControl_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Cartesian Chart Control is unloaded
            </summary>
            <param name="sender">The <see cref="T:Telerik.Windows.Controls.ChartView.RadChartBase"/> representing the chart object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.CartesianChartGrid_OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the chart grid is loaded, and applies the grid line visibility.
            </summary>
            <remarks>This event handler exists for the following reason:  For some reason, telerik's RadCartesianChart 
            has two properties (MajorGridLineVisibility and StripLineVisibility) that are very similar in the sense 
            that they both take GridLineVisibility enums as their values.  For some reason, StripLineVisibility is not 
            a dependency property so we need to go and set the property when the CartesianChartGrid is loaded.  We should 
            be able to bind to it if this ever changes in the future (i.e. they make StripLineVisibility a dependency Property)
            but for now we have to do it this way.</remarks>
            <param name="sender">The <see cref="T:Telerik.Windows.Controls.ChartView.CartesianChartGrid"/></param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.PieDataPointUIElement_OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a pie chart slice is removed/updated
            </summary>
            <param name="sender">The pie chart slice</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.ChartPoint_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on a ChartPoint changes, needed so that we can keep the Telerik DataPoint's
            IsSelected property synchronized with the ChartPoint.
            </summary>
            <param name="sender">The updated <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/> object</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.DataPointUIElement_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Gets called when the UI Element attached to each DataPoint is loaded into the visual tree.
            This is only the case for linear charts.
            </summary>
            <param name="sender">The <see cref="T:System.Windows.FrameworkElement"/> representing the chart point</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.DataPointUIElement_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Gets called when the UI Element attached to each DataPoint are unloaded. This is only the 
            case for linear charts.
            </summary>
            <param name="sender">The <see cref="T:System.Windows.FrameworkElement"/> representing the chart point</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.Chart.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartViewModelFactory">
            <summary>
            This class builds <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartViewModel"/> instances from a given <see cref="T:Geocortex.Essentials.Client.Charting.ChartDefinition"/>
            and from a given <see cref="T:Geocortex.Essentials.Client.Tasks.FeatureSet"/>.  This class also exposes a method for building a <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPointCollection"/> from a given
            <see cref="T:Geocortex.Essentials.Client.Tasks.FeatureSet"/>
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartViewModelFactory.BuildViewModel(Geocortex.Essentials.Client.Charting.ChartDefinition,Geocortex.Essentials.Client.Tasks.FeatureSet)">
            <summary>
            Builds a <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartViewModel"/> from a given <see cref="T:Geocortex.Essentials.Client.Charting.ChartDefinition"/> and <see cref="T:Geocortex.Essentials.Client.Tasks.FeatureSet"/>
            </summary>
            <param name="chartDefinition">The <see cref="T:Geocortex.Essentials.Client.Charting.ChartDefinition"/></param>
            <param name="featureSet">The <see cref="T:Geocortex.Essentials.Client.Tasks.FeatureSet"/> to generate <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint">ChartPoints</see> from</param>
            <returns>The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartViewModel"/> built from the given given <see cref="T:Geocortex.Essentials.Client.Charting.ChartDefinition"/> and <see cref="T:Geocortex.Essentials.Client.Tasks.FeatureSet"/></returns>
            <remarks>Will return a <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartViewModel"/> with an empty <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPointCollection"/> if there is an error</remarks>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartViewModelFactory.BuildChartPointCollection(Geocortex.Essentials.Client.Charting.ChartDefinition,Geocortex.Essentials.Client.Essentials.Charting.ChartFeatureType,Geocortex.Essentials.Client.Tasks.FeatureSet)">
            <summary>
            Builds a <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPointCollection"/> from a given <see cref="T:Geocortex.Essentials.Client.Charting.ChartDefinition"/> and <see cref="T:Geocortex.Essentials.Client.Tasks.FeatureSet"/>
            </summary>
            <param name="chartDefinition">The <see cref="T:Geocortex.Essentials.Client.Charting.ChartDefinition"/></param>
            <param name="chartFeatureType">The type of feature that will be charted</param>
            <param name="featureSet">The <see cref="T:Geocortex.Essentials.Client.Tasks.FeatureSet"/> to generate <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint">ChartPoints</see> from</param>
            <returns>The <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPointCollection"/> built from the given given <see cref="T:Geocortex.Essentials.Client.Charting.ChartDefinition"/> and <see cref="T:Geocortex.Essentials.Client.Tasks.FeatureSet"/></returns>
            <remarks>Will return an empty <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPointCollection"/> if there is an issue</remarks>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartPointGroup">
            <summary>
            This class represents a group of <see cref="T:Geocortex.Essentials.Client.Essentials.Charting.ChartPoint"/> objects which are
            accumulated through aggregation.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.ChartLegend.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">PropertyChanged</see>
            event with the provided arguments.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel">
            <summary>
            This class is the view model for a series in one of our charts.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel.IsSeriesInternal">
            <summary>
            Gets or sets a value indicating whether or not this series is an internal series (i.e. the series 
            is a sub series.  For instance if you have a series that takes a datetime and breaks it into day of the week
            you will actually have a separate series for each day internally, but you want them to appear as one contiguous 
            series)
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel.SeriesDefinition">
            <summary>
            Gets or sets the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel.SeriesDefinition"/> used by this series when rendering
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel.ChartDefinition">
            <summary>
            Gets or sets the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel.ChartDefinition"/> reference for this <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel"/>
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel.Items">
            <summary>
            Gets or sets the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel.ChartPointCollection"/> that holds the items related to the series
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel.DistinctColor">
            <summary>
            Gets or sets a distinctive color for the series; this differs from the the <see cref="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel.SeriesDefinition"/> color if the source is a multivalue field
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Charting.SeriesViewModel.ChartPointCollection">
            <summary>
            Gets or sets a reference to the original ChartPointCollection
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ComboBoxWithMultiSelect">
            <summary>
            Just like a regular ComboBox except that when you click on an item in the list, the list doesn't close. 
            This is useful if you want to present a multi-select inside a ComboBox.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ContentChangedEventArgs">
            <summary>
            EventArgs for ObservableContentControl.ContentChanged
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ContentChangedEventArgs.OldContent">
            <summary>
            Gets or sets the content control's old content
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ContentChangedEventArgs.NewContent">
            <summary>
            Gets or sets the content control's new content
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ContextMenu">
            <summary>
            The generic context menu
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ContextMenu.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.DomainTemplateCollection">
            <summary>
            Contains domain templates.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.DomainTemplateCollection.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.DomainTemplateCollection.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.EnhancedChildWindow">
            <summary>
            Same as a regular ChildWindow, but adds in the capability to double click on the overlay to close the ChildWindow.
            You can also close with the escape key.  Both close options are only enabled if the dialog has a close button.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.FeatureContentControl">
            <summary>
            A content control that formats a feature property (such as Label, Description, or Long Description) into a rich text block.
            Supports running commands from html content through the command uri, configured through a feature description in the site.
            To use, set the InputContent to the unformatted content.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.FeatureContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.FeatureContentControl"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.FeatureContentControl.UpdateContent(System.Object)">
            <summary>
            Converts the value using a rich text formatter, and then sets it as the Content of this control.
            Also sets the Feature property of the formatter, which enables commands to be run from html content.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.FeatureContentControl.Feature">
            <summary>
            Gets or sets the feature. The feature is used for invoking commands from the content text block.
            This is a dependency property.
            </summary>
            <value>The feature.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.FeatureContentControl.InputContent">
            <summary>
            Gets or sets the input content. The input content is the unformatted input that will be converted to rich text and then set as the actual content.
            This is commonly bound to a feature property such as Label, Description, or LongDescription.
            This is a dependency property.
            </summary>
            <value>The input content.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.GeoRssMapTip">
            <summary>
            A MapTip for GeoRss feed items which displays some of its attributes
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.GeoRssMapTip.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IShowable">
            <summary>
            Views targeting an AutoView must implement IShowable
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IShowable.CanShow(System.Object)">
            <summary>
            Determines if a view can be shown or not - typically based on the value of a DataContext
            </summary>
            <param name="context">The DataContext in question</param>
            <returns>True if display, false otherwise</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IShowable.Priority">
            <summary>
            Gets or sets the priority of the view. View's with higher priority are asked "CanShow" before views with lower priority
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.LayerSelectorComboBox">
            <summary>
            This control allows the user to select layers from a list of layers in a drop down.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.LayerSelectorComboBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.LayersSelectorViewModel">
            <summary>
            The view model for the LayersSelectorComboBox. This class is designed to be overriden.
            There are a number of protected methods that subclasses can override to provide information
            about what layers should be in the list, whether or not they're enabled, what the tooltip
            should be, and so on.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.LayersSelectorViewModel.IsSelectionEnabled(Geocortex.Essentials.Client.Layer)">
            <summary>
            Determines whether the selection for the layer should be enabled or disabled.
            </summary>
            <param name="layer">The layer for which selection should be enabled or disabled.</param>
            <returns>
              <c>true</c> selection should be enabled; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.LayersSelectorViewModel.IncludeInList(Geocortex.Essentials.Client.Layer)">
            <summary>
            Determines whether the specified layer should participate in the list or not.
            </summary>
            <param name="layer">The layer to check.</param>
            <returns>true if the layer should be in the select list; otherweise false.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.LayersSelectorViewModel.GetToolTip(Geocortex.Essentials.Client.Layer)">
            <summary>
            Gets the tool tip for the layer.
            </summary>
            <param name="layer">The layer.</param>
            <returns>The tooltip.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.LayersSelectorViewModel.IsSelectedInitially(Geocortex.Essentials.Client.Layer)">
            <summary>
            Determines whether the layer is initially selected.
            </summary>
            <param name="layer">The layer.</param>
            <returns>
              <c>true</c> the layer should be initially selected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ServiceLayersFailureDialog">
            <summary>
            Displays a modal dialog displaying the Service Layers (Map Service) that failed to load.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ServiceLayersFailureDialog.MapServicesProperty">
            <summary>
            Dependant property for the FormDefinition.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ServiceLayersFailureDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ServiceLayersFailureDialog"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ServiceLayersFailureDialog.ShowDialog">
            <summary>
            Shows the ServiceLayerFailureDialog.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ServiceLayersFailureDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ServiceLayersFailureDialog.MapServices">
            <summary>
            Gets or sets the MapServiceCollection.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.DataGridBoundTemplateColumn">
            <summary>
            Implementation of a bound template column.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.DataGridBoundTemplateColumn.CancelCellEdit(System.Windows.FrameworkElement,System.Object)">
            <summary>
            Ends the edit on a data grid cell and reverts any changes.
            </summary>
            <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
            <param name="uneditedValue">The value of the data prior to the edit.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.DataGridBoundTemplateColumn.GenerateEditingElement(System.Windows.Controls.DataGridCell,System.Object)">
            <summary>
            Gets an element defined by the <see cref="P:System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplate"/> that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding"/> property value.
            </summary>
            <param name="cell">The cell that will contain the generated element.</param>
            <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
            <returns>
            A new editing element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding"/> property value.
            </returns>
            <exception cref="T:System.TypeInitializationException">The <see cref="P:System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplate"/> is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.DataGridBoundTemplateColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)">
            <summary>
            Gets an element defined by the <see cref="P:System.Windows.Controls.DataGridTemplateColumn.CellTemplate"/> that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding"/> property value.
            </summary>
            <param name="cell">The cell that will contain the generated element.</param>
            <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
            <returns>
            A new, read-only element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding"/> property value.
            </returns>
            <exception cref="T:System.TypeInitializationException">The <see cref="P:System.Windows.Controls.DataGridTemplateColumn.CellTemplate"/> is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.DataGridBoundTemplateColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a cell in the column enters editing mode.
            </summary>
            <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
            <param name="editingEventArgs">Information about the user gesture that is causing a cell to enter editing mode.</param>
            <returns>null in all cases.</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.DataGridBoundTemplateColumn.CellEditingBinding">
            <summary>
            Gets or sets the content binding.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.DataGridBoundTemplateColumn.CellBinding">
            <summary>
            Gets or sets the content binding.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock">
            <summary>
            The Dock part of a dockable - essentially a content control with an associated icon. Will likely expand 
            to maintain a history of dockables docked here.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.AllowCloseProperty">
            <summary>
            Allow close property
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.AllowMinimizeProperty">
            <summary>
            Allow minimize property
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.AllowedDocksProperty">
            <summary>
            Allowed docks attached property
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.DefaultDockProperty">
            <summary>
            Default dock attached property
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.DockableIconProperty">
            <summary>
            Icon attached property
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.DockableNameProperty">
            <summary>
            Name attached property
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.TitleProperty">
            <summary>
            Title attached property
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.#ctor">
            <summary>
            Creates a new instance of a Dock object
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.BringToFront(System.Windows.UIElement)">
            <summary>
            Bring the given dockable element to the front of the dock
            </summary>
            <param name="element">The element in question</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.GetAllowClose(System.Windows.UIElement)">
            <summary>
            Getter for the allowed docs collection
            </summary>
            <param name="obj">The object to get the value from</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.GetAllowedDocks(System.Windows.UIElement)">
            <summary>
            Getter for the allowed docs collection
            </summary>
            <param name="obj">The object to get the allowed docks from</param>
            <returns>The list of allowed docks</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.GetAllowMinimize(System.Windows.UIElement)">
            <summary>
            Getter for the allowed docs collection
            </summary>
            <param name="obj">The object to get the value from</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.GetDockableIcon(System.Windows.UIElement)">
            <summary>
            Icon getter.
            </summary>
            <param name="obj">The object to get the icon from.</param>
            <returns>The icon or empty image</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.GetDockableName(System.Windows.UIElement)">
            <summary>
            Getter for the dockable name
            </summary>
            <param name="obj">The object to get the name from.</param>
            <returns>The name or empty </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.GetTitle(System.Windows.UIElement)">
            <summary>
            Title getter
            </summary>
            <param name="obj">The object to get the title from.</param>
            <returns>The title or null</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.Hide(System.Windows.UIElement)">
            <summary>
            Hide the given dockable element
            </summary>
            <param name="element">The element in question</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.SetAllowClose(System.Windows.UIElement,System.Boolean)">
            <summary>
            Setter for the allow close property
            </summary>
            <param name="obj">The object to get the allowed docks from</param>
            <param name="allowClose">The list of allowed docks</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.SetAllowMinimize(System.Windows.UIElement,System.Boolean)">
            <summary>
            Setter for the allow minimize property
            </summary>
            <param name="obj">The object to get the allowed docks from</param>
            <param name="allowMinimize">The list of allowed docks</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.SetAllowedDocks(System.Windows.UIElement,System.Collections.ObjectModel.ObservableCollection{System.String})">
            <summary>
            Setter for the allowed docs collection
            </summary>
            <param name="obj">The object to get the allowed docks from</param>
            <param name="allowedDocks">The list of allowed docks</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.SetDockableIcon(System.Windows.UIElement,System.Windows.Controls.Image)">
            <summary>
            Icon setter
            </summary>
            <param name="obj">The object to set the icon on</param>
            <param name="icon">The icon to set</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.SetDockableName(System.Windows.UIElement,System.String)">
            <summary>
            Name setter
            </summary>
            <param name="obj">The object to set the name on</param>
            <param name="name">The name to set</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Dock.SetTitle(System.Windows.UIElement,System.String)">
            <summary>
            Title setter
            </summary>
            <param name="obj">The object to set the title on</param>
            <param name="title">The title to set</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ExternalImagePresenter">
            <summary>
            Wraps behavior for presenting images which may take time to retrieve.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ExternalImagePresenter.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.HyperlinkButtonBar">
            <summary>
            A control to show a button bar with a list of actions that can be executed via commands.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.HyperlinkButtonBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.HyperlinkButtonBar"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.HyperlinkButtonBar.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.ITitledView.Title">
            <summary>
            Gets or sets the title to display in the view's header.
            </summary>
            <value>The title</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent">
            <summary>
            This interface should be implemented if you wish to put a user control into a multiview
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent.Busy">
            <summary>
            Gets or sets a value indicating whether the view is busy. Busy indicates if the view is busy doing something. If it is, the multiview will display a busy indicator
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent.LargeIconUri">
            <summary>
            Gets or sets the image to display in the selector area of the multiview
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent.SmallIconUri">
            <summary>
            Gets or sets the image to display in the header area of the multiview
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent.Priority">
            <summary>
            Gets or sets the priority of the view. views with higher priorities are displayed ahead of views with lower priorities
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent.SpeedButtons">
            <summary>
            Gets or sets the buttons to display in the header of the multiview. For example, close, minimize, tall view, wide view
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent.Tooltip">
            <summary>
            Gets or sets the tooltip with information relevant to this view.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent.IsSelectable">
            <summary>
            Gets or sets a value indicating whether the view displays an icon in the selection area of the multiview.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView">
            <summary>
            The mutliview control - used to display multiple views. The view isn't meant to be instantiated and accessed directly but instead is
            manipulated by the MultiViewRegionAdapter. As views are assigned to a region hosted by a multiview, the adapter adds
            views to the multiview
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView._classInitialized">
            <summary>
            Want to do this the first time the application is run
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView._footer">
            <summary>
            Reference to the footer of the multiview
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView._header">
            <summary>
            Reference to the header of the multiview
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView._queuedViews">
            <summary>
            Views waiting to be added to this multiview - need a footer before we can add them to a view - this doesn't happen until the template has been applied
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView._viewInitialized">
            <summary>
            Want to do this the first time the class is instantiated
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.mouseEventManager">
            <summary>
            Header double click manager
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.#ctor">
            <summary>
            Constructor. Best not to call this directly but use a multiview in xaml
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.ActivateView(System.Object)">
            <summary>
            Finds the region associated with a given view and when found, activates it
            </summary>
            <param name="whichView">The view in question</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.DoActivateView(System.Object)">
            <summary>
            Locate view in question and activate it
            </summary>
            <param name="whichView">The view in question</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.AddToMultiView(System.Windows.FrameworkElement)">
            <summary>
            Add a framework element to a multiview. We could arrange it so that if element doesn't
            implement IMultiviewContent then that element is wrapped. Maybe we'll do that soon.
            </summary>
            <param name="element">the element</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.ConfigureHeader">
            <summary>
            Set up the header, based on the current content - add icon, title and buttons
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.DoMinimize">
            <summary>
            Fire the Minimize event
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.IconTitlesEnabledProperty">
            <summary>
            Identifier for the IconTitlesEnabled dependency property.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.MinimizeView">
            <summary>
            The MultiViewRegionAdapter knows when there are no more views available to go
            into the multiview. There is a new requirement that requires the layer list to
            have a close button and when the last view in the data region is closed, the 
            dataregion must close as well hence the need for a method for the multiview
            region adapter to signal it is closing
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.NotifyActivated">
            <summary>
            When prism activates a view hosted by this multiview, fire an activated event so listeners can do things
            like open a dataframe
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.OnApplyTemplate">
            <summary>
            Header and footer are not available until the template is appled
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.OnDoubleClickHeader(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            When the user double clicks a header, fire a minimized event
            </summary>
            <param name="sender">The sender</param>
            <param name="e">mouse handler event arguments</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.OnFrameContentPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            IMultiviewContent implements inotifyPropertyChanged. We want to arrange it so that when a view modifies a content
            property, the muliview header and footer updates as well
            </summary>
            <param name="sender">The view</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.OnIsActiveChanged(System.Object,System.EventArgs)">
            <summary>
            Prism views implement IActiveAware. When a view's activeness changes, we want to notify our hosting
            container of that in case they care
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The param</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.OnSelectionChanged(System.Object,Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewSelectionChangedEventArgs)">
            <summary>
            Handler for footer selection changed. Activate view that was selected
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The new view</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.RemoveFromMultiView(System.Windows.FrameworkElement)">
            <summary>
            Called by the adapter whenever a view is hidden or removed
            </summary>
            <param name="element">The view in question</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.ResetHeight">
            <summary>
            Caution: Kludgey code ahead.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.Select(System.Windows.FrameworkElement)">
            <summary>
            Called by RegionAdapter. When a new view is activated, the multiview displays it.
            </summary>
            <param name="element">The element to select</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.SetContent(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent)">
            <summary>
            Take care of updating the content control. Must subscribe to update events, display the item, set up the header, footer and do the kludge
            </summary>
            <param name="element">The element to set as the content control</param>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.Activated">
            <summary>
            Fired when a view inside the multiview is activated by prism. Normal uses of this event would be to unhide a parent control
            when a view is activated
            </summary>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.Minimize">
            <summary>
            Fired when the user wants to minimize multiview. For example, minimize is fired when the user double clicks on the header
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.Footer">
            <summary>
            Gets the footer.
            Convenience function to get the footer from the control template
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.IconTitlesEnabled">
            <summary>
            Gets or sets a value indicating whether icon titles are enabled.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiView.Header">
            <summary>
            Gets the footer.
            Convenience function to get the header from the control template
            Also gives us a good opportunity to subscribe to mouse events on the header
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase">
            <summary>
            People wishing to display content in a multiview should either implement IMultiviewContent or better yet, inherit from this
            class. Multiview works best with controls that implement IMultiviewContent. 
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.NotificationUserControlBase.RaiseAllPropertiesChanged">
            <summary>
            This can be used to indicate that all property values have changed.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.NotificationUserControlBase.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            This raises the INotifyPropertyChanged.PropertyChanged event to indicate
            a specific property has changed value. This version provides a compile-time safe
            way to indicate the property through the use of an expression tree / lambda.
            Be aware that for high-volume changes this version might be much slower than
            the above "magic-string" version due to the creation of an expression and runtime lookup.
            </summary>
            <example>
            <![CDATA[
               // Raise the PropertyChanged event for the Name property, even from outside the setter
               RaisePropertyChanged(() => this.Name);
            ]]>
            </example>
            <typeparam name="T">Type where it is being raised.</typeparam>
            <param name="propExpr">Property to raise PropertyChanged event on.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.NotificationUserControlBase.RaisePropertyChanged(System.String)">
            <summary>
            This raises the INotifyPropertyChanged.PropertyChanged event to indicate
            a specific property has changed value.
            </summary>
            <example>
            <![CDATA[
               public string Name
               {
                  get { return _name; }
                  set
                  {
                      _name = value;
                      RaisePropertyChanged();
                  }
               }
            ]]>
            </example>
            <param name="propertyName">Name of the property to raise PropertyChanged event on.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.NotificationUserControlBase.SetPropertyValueWithNotify``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            This is used to set a specific value for a property and raise the
            INotifyPropertyChanged.PropertyChanged event if that value changed.
            This version provides a compile-time safe way to indicate the property
            through the use of an expression tree / lambda.
            </summary>
            <typeparam name="T">Type where it is being raised.</typeparam>
            <param name="storageField">The backing field behind the property.</param>
            <param name="newValue">The new value to set the backing field to.</param>
            <param name="propExpr">Property to raise PropertyChanged event on.</param>
            <returns>
            <value>true</value> if the backing field changed value and fired a PropertyChanged event, <value>false</value> otherwise.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.NotificationUserControlBase.SetPropertyValueWithNotify``1(``0@,``0,System.String)">
            <summary>
            This is used to set a specific value for a property and raise the
            INotifyPropertyChanged.PropertyChanged event if that value changed.
            </summary>
            <example>
            <![CDATA[
               public string Name
               {
                  get { return _name; }
                  set
                  {
                      // Set _name to value and raise the PropertyChanged event on Name if _name changed
                      SetPropertyValueWithNotify<string>(ref _name, value);
                  }
               }
            ]]>
            </example>
            <typeparam name="T">Type where it is being raised.</typeparam>
            <param name="storageField">The backing field behind the property.</param>
            <param name="newValue">The new value to set the backing field to.</param>
            <param name="propertyName">Name of the property to raise PropertyChanged event on.</param>
            <returns>
            <value>true</value> if the backing field changed value and fired a PropertyChanged event, <value>false</value> otherwise.
            </returns>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.NotificationUserControlBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase._busy">
            <summary>
            Backing property for Busy property
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase._isActive">
            <summary>
            Backing property for IsActive (IActiveAware)
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase._isSelectable">
            <summary>
            Backing property for IsSelectable - true if selectable in multiview
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase._largeIconUri">
            <summary>
            Backing property for LargeIconUri
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase._priority">
            <summary>
            Backing property for priority
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase._smallIconUri">
            <summary>
            Backing property for SmallIconUri
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase._speedButtons">
            <summary>
            Backing property for speed buttons
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase._controls">
            <summary>
            Backing property for controls
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase._title">
            <summary>
            Backing property for title
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase._tooltip">
            <summary>
            Backing property for the tooltip.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase.#ctor">
            <summary>
            The Constructor
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase.NotifyIsActiveChanged">
            <summary>
            Fire IsActiveChanged event when view is activated or deactivated
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase.OnSpeedButtonSelectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            When the button collection or an item in the button collection is changed, this handler is invoked.
            </summary>
            <param name="sender">The collection</param>
            <param name="e">Some event args</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase.OnControlsSelectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            When the control collection or an item in the control collection is changed, this handler is invoked.
            </summary>
            <param name="sender">The collection</param>
            <param name="e">Some event args</param>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase.IsActiveChanged">
            <summary>
            Part of IActiveAware
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase.Busy">
            <summary>
            Gets or sets a value indicating whether the view is bust. Set busy to true if title bar is to display animation indicating view is busy doing something. Set to false to hide animated icon
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase.IsActive">
            <summary>
            Gets or sets a value indicating whether the view is active. Set to true if view is currently active. False otherwise. This property is managed by Prism
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase.IsSelectable">
            <summary>
            Gets or sets a value indicating whether is selectable. True if multiview diplays a large icon in the multiview footer, allowing a user to select the 
            view from a set of possible views
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase.LargeIconUri">
            <summary>
            Gets or sets the Uri to a large icon to use in the multiview container hosting the view (likely the footer)
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase.Priority">
            <summary>
            Gets or sets the priority. Priority is used to order views in the multiview container. High priority items have higher numbers
            than lower priority numbers
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase.SmallIconUri">
            <summary>
            Gets or sets the Uri to an icon to show in the multiview - likely the top left corner of the title bar. Is not manditory and
            the uri to the large icon will be used if this one is not.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase.SpeedButtons">
            <summary>
            Gets or sets a collection of buttons to show in the right hand side of the title bar of the muliview
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase.Title">
            <summary>
            Gets or sets the title to display in the multiview
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase.Tooltip">
            <summary>
            Gets or sets the tooltip with information relevant to this view.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter">
            <summary>
            Footer part of the multiview
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter._animationTimer">
            <summary>
            Timer to help distinguish a hide from a hide followed by a show
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter._buttonDefns">
            <summary>
            Set of button definitions for the footer control
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter._currentSelection">
            <summary>
            The currently selected content
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.IconTitlesVisibilityProperty">
            <summary>
            Identifier for the IconTitlesVisibiilty dependency property.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.#ctor">
            <summary>
            Creates a new instance of MultiViewFooter
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.Add(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent)">
            <summary>
            Add a button for the given multiview content to the footer
            </summary>
            <param name="content">the Content</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.CreateToggleButton(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent,System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Windows.Controls.Primitives.ToggleButton"/> from a <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent"/>.
            </summary>
            <param name="content">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent"/>.</param>
            <param name="bindIconTitlesVisibility">If set to <c>true</c>, bind the icon title's visibility; otherwise, <c>false</c>.</param>
            <returns>A <see cref="T:System.Windows.Controls.Primitives.ToggleButton"/>.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.CreateGridForButtonContent(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent,System.Boolean)">
            <summary>
            Creates a grid to use as the content of a button.
            </summary>
            <param name="content">The <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent"/>.</param>
            <param name="bindIconTitlesVisibility">If set to <c>true</c>, bind the icon title's visibility; otherwise, <c>false</c>.</param>
            <returns>A <see cref="T:System.Windows.Controls.Grid"/></returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.OnContentPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when content backing a button changes
            </summary>
            <param name="sender">The content</param>
            <param name="e">What changed</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.FindInsertLocation(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent)">
            <summary>
            Need to insert the button in order of priority. Do a linear search to locate the best spot
            </summary>
            <param name="content">The content in question</param>
            <returns>The insert location</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.Hide">
            <summary>
            Hide the bar - start the "hide" animation
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.OnButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Set the state of the clicked button
            </summary>
            <param name="sender">The button that was clicked</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Button collection changed event handler. Hide or show the footer based on numbers of buttons
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.DoShowHideFooter(System.Object,System.EventArgs)">
            <summary>
            Show or Hide the footer
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The parameter</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.OnHideFooterCompleted(System.Object,System.EventArgs)">
            <summary>
            When the hide footer animation completes, set the footer's visibility
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.Select(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent)">
            <summary>
            Find the button that corresponds to the content and check it. 
            </summary>
            <param name="content">The newly selected content</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.Show">
            <summary>
            Play the show footer animation
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.NotifySelectionChanged(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent,Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent)">
            <summary>
            Fire the selection changed event when the footer selection changes
            </summary>
            <param name="oldSelection">What used to be selected</param>
            <param name="newSelection">What is selected now</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.SelectionChanged">
            <summary>
            Fired when user changes selection
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.IconTitlesEnabled">
            <summary>
            Gets or sets a value indicating whether icon titles are enabled.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewFooter.IconTitlesVisibility">
            <summary>
            Gets or sets the visibility of icon titles.
            </summary>
            <value>
            The visibility of icon titles.
            </value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewHeader">
            <summary>
            The mutliview header control
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewHeader._busy">
            <summary>
             Backing property for Busy
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewHeader._content">
            <summary>
            Current content this header is backing
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewHeader.#ctor">
            <summary>
            Create a new instance of multiview header
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewHeader.AddButton(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SpeedButton)">
            <summary>
            Add a speed button to the header control - a button that show's up on the right hand side of the title bar
            </summary>
            <param name="buttonDefn">The button definition</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewHeader.AddControl(System.Windows.Controls.Control)">
            <summary>
            Add a custom user control to the header control - displayed on the left side to the right of the text
            </summary>
            <param name="controlItem">The custom control</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewHeader.Initialize(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent)">
            <summary>
            Given a content, set the header accordingly. In particular, set the icon,
            title and collection of buttons
            </summary>
            <param name="content">The content in question</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewHeader.OnContentChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handler for when content properties change. Adjust title, icon etc.
            </summary>
            <param name="sender">the sender</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewHeader.SetBusy(System.Boolean)">
            <summary>
            Set the busy indicator. Do this when the property is set and when a user changes selection
            </summary>
            <param name="isBusy">true or false</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewHeader.SetBusy(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent)">
            <summary>
            Set the busy indicator. Do this when the property is set and when a user changes selection
            </summary>
            <param name="content">the content</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewHeader.UpdateButtons(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent)">
            <summary>
            Updates the header speed buttons
            </summary>
            <param name="content">The content in question</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewHeader.UpdateControls(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewContentBase)">
            <summary>
            Updates the custom content controls
            </summary>
            <param name="content">The content in question</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewHeader.UpdateIcon(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent)">
            <summary>
            Updates the header icon
            </summary>
            <param name="content">The content in question</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewHeader.UpdateTitle(Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.IMultiViewContent)">
            <summary>
            Updates the title of the header
            </summary>
            <param name="content">The content in question</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewHeader.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewHeader.Busy">
            <summary>
            Gets or sets a value indicating whether the view is busy. Shows a busy indicator when true. Turns it off when false
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewRegionAdapter.Adapt(Microsoft.Practices.Prism.Regions.IRegion,System.Windows.Controls.ContentControl)">
            <summary>
            Hook that gets called before a view is added or removed from a region - sets up the handlers for it
            </summary>
            <param name="region">The region in question</param>
            <param name="regionTarget">The content going into the region</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewRegionAdapter.ResolveMultiViewContent(System.Windows.FrameworkElement)">
            <summary>
            Wrap a framework element with MultiviewContentWrapper as needed
            </summary>
            <param name="item">The element in question</param>
            <returns>An IMultiViewContent (wrapped if required)</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewSelectionChangedEventArgs">
            <summary>
            Event args for multiview selection changed
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewSelectionChangedEventArgs.OldSelection">
            <summary>
            Gets or sets what used to be selected
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MultiViewSelectionChangedEventArgs.NewSelection">
            <summary>
            Gets or sets what is selected now
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.PreviewUpdateMode.Automatic">
            <summary>
            If assigned, indicates that the preview will get updated whenever a property changes.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.PreviewUpdateMode.Explicit">
            <summary>
            If assigned, indicates that the preview must be updated using the Invalidate method explicitly.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SearchBox">
            <summary>
            User controls for search box.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SearchBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SignOnErrorDialog">
            <summary>
            The sign on error dialog shows a message to the user that sign on is required and displays
            a "try again" button to let the user go back to the sign on form.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SignOnErrorDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SimpleFillSymbolEditor">
            <summary>
            An editor control for a SimpleFillSymbol.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SimpleFillSymbolEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SimpleLineSymbolEditor">
            <summary>
            An editor control for a SimpleLineSymbol.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SimpleLineSymbolEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SimpleMarkerSymbolEditor">
            <summary>
            An editor control for a SimpleMarkerSymbol.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SimpleMarkerSymbolEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SizeAndPosition">
            <summary>
            A struct that describes the size and position of something.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SizeAndPosition.TopLeft">
            <summary>
            The top left hand corner of the element, relative to the top left corner of the application area.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SizeAndPosition.Width">
            <summary>
            The width of the item in pixels.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SizeAndPosition.Height">
            <summary>
            The height of the item in pixels.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SizeAndPosition.#ctor(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SizeAndPosition"/> struct.
            </summary>
            <param name="topLeft">The top left point.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SpeedButton.Command">
            <summary>
            Gets or sets the named command to run when button pressed
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SpeedButton.CommandParameter">
            <summary>
            Gets or sets the parameter to give the command when button is pressed
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SpeedButton.ImageUri">
            <summary>
            Gets or sets the icon to display on the speed button
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SpeedButton.ToolTip">
            <summary>
            Gets or sets tooltip to display when speedbutton hovered
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SymbolEditorDialog">
            <summary>
            Displays a modal dialog for editing symbols.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SymbolEditorDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SymbolEditorDialog"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SymbolEditorDialog.Show(System.String,ESRI.ArcGIS.Client.GraphicsLayer)">
            <summary>
            Shows the symbol editor dialog and allows editing of a the symbol of the 
            specified graphics layer's renderer.
            </summary>
            <remarks>
            Only SimpleRenderer types are supported.
            Only SimpleMarkerSymbol, SimpleLineSymbol, SimpleFillSymbol and TextSymbol types are supported.
            </remarks>
            <param name="title">The title for the dialog.</param>
            <param name="layer">The layer to be symbolized.</param>
            <exception cref="T:System.ArgumentNullException">If layer is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.SymbolEditorDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.TextSymbolEditor">
            <summary>
            An editor control for a TextSymbol.
            </summary>
            <remarks> 
            NOTE: the angle editor component will only work if the TextSymbol's ControlTemplate 
            has been overridden to support angles.
            </remarks>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.TextSymbolEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager">
            <summary>
            Adapted from http://weblogs.asp.net/aboschin/archive/2008/03/17/silverlight-2-0-a-double-click-manager.aspx - a good idea but changed to use timers instead of threads
            and also added in hover behavior
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager._clickArgs">
            <summary>
            Members to remember the original location of the click, once the timer expires
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager._clickTimer">
            <summary>
            Timer to help distinguish a click from a double click
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager._hoverArgs">
            <summary>
            Members to remember the original location of the hover, once the timer expires
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager._hoverTimer">
            <summary>
            Timer to help identify a hover 
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager"/> class.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.HandleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.HandleMouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Hover starts when the mouse enters the control
            </summary>
            <param name="sender">The control in question</param>
            <param name="e">The mouse event args</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.HandleMouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Hover stops when the mouse leaves the control
            </summary>
            <param name="sender">The control in question</param>
            <param name="e">The mouse event args</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.OnClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when [click].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.OnEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when [mouseEnter].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.OnLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when [mouseLeave].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.OnClickTimerTick(System.Object,System.EventArgs)">
            <summary>
            Wait to signal a mouse click until we see if a double click is pending
            </summary>
            <param name="sender">The control in questin</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.OnDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when [double click].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.OnHover(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when [hover].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.OnHoverTimerTick(System.Object,System.EventArgs)">
            <summary>
            Hover is delayed a time - say 750ms so when the timer expires, signal the hover
            </summary>
            <param name="sender">The control in question</param>
            <param name="e">The event args</param>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.Click">
            <summary>
            Client should subscribe to click in order to get notified of a click event
            </summary>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.DoubleClick">
            <summary>
            Client should subscribe to click in order to get notified of a double click event
            </summary>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.Hover">
            <summary>
            Client should subscribe to click in order to get notified of a hover event
            </summary>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.Enter">
            <summary>
            Client should subscribe to enter in order to get notified of an enter event
            </summary>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.Leave">
            <summary>
            Client should subscribe to leave in order to get notified of a leave event
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.MouseEventManager.Control">
            <summary>
            Gets or sets the control.
            </summary>
            <value>The control.</value>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.DependencyObjectViewModelBase.RaiseAllPropertiesChanged">
            <summary>
            This can be used to indicate that all property values have changed.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.DependencyObjectViewModelBase.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            This raises the INotifyPropertyChanged.PropertyChanged event to indicate
            a specific property has changed value. This version provides a compile-time safe
            way to indicate the property through the use of an expression tree / lambda.
            Be aware that for high-volume changes this version might be much slower than
            the above "magic-string" version due to the creation of an expression and runtime lookup.
            </summary>
            <example>
            <![CDATA[
               // Raise the PropertyChanged event for the Name property, even from outside the setter
               RaisePropertyChanged(() => this.Name);
            ]]>
            </example>
            <typeparam name="T">Type where it is being raised.</typeparam>
            <param name="propExpr">Property to raise PropertyChanged event on.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.DependencyObjectViewModelBase.RaisePropertyChanged(System.String)">
            <summary>
            This raises the INotifyPropertyChanged.PropertyChanged event to indicate
            a specific property has changed value.
            </summary>
            <example>
            <![CDATA[
               public string Name
               {
                  get { return _name; }
                  set
                  {
                      _name = value;
                      RaisePropertyChanged();
                  }
               }
            ]]>
            </example>
            <param name="propertyName">Name of the property to raise PropertyChanged event on.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.DependencyObjectViewModelBase.SetPropertyValueWithNotify``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            This is used to set a specific value for a property and raise the
            INotifyPropertyChanged.PropertyChanged event if that value changed.
            This version provides a compile-time safe way to indicate the property
            through the use of an expression tree / lambda.
            </summary>
            <typeparam name="T">Type where it is being raised.</typeparam>
            <param name="storageField">The backing field behind the property.</param>
            <param name="newValue">The new value to set the backing field to.</param>
            <param name="propExpr">Property to raise PropertyChanged event on.</param>
            <returns>
            <value>true</value> if the backing field changed value and fired a PropertyChanged event, <value>false</value> otherwise.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.DependencyObjectViewModelBase.SetPropertyValueWithNotify``1(``0@,``0,System.String)">
            <summary>
            This is used to set a specific value for a property and raise the
            INotifyPropertyChanged.PropertyChanged event if that value changed.
            </summary>
            <example>
            <![CDATA[
               public string Name
               {
                  get { return _name; }
                  set
                  {
                      // Set _name to value and raise the PropertyChanged event on Name if _name changed
                      SetPropertyValueWithNotify<string>(ref _name, value);
                  }
               }
            ]]>
            </example>
            <typeparam name="T">Type where it is being raised.</typeparam>
            <param name="storageField">The backing field behind the property.</param>
            <param name="newValue">The new value to set the backing field to.</param>
            <param name="propertyName">Name of the property to raise PropertyChanged event on.</param>
            <returns>
            <value>true</value> if the backing field changed value and fired a PropertyChanged event, <value>false</value> otherwise.
            </returns>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.DependencyObjectViewModelBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Loader">
            <summary>
            Loading Graphic
            </summary> 
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.UIComponents.Loader.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.CheckStateConverter">
            <summary>
            Manages the conversion of boolean type to/from ToggleState values. 
            This is referenced by RadTreeView control, when checkboxes are enabled.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.CollectionUtil.IsNullOrEmpty(System.Collections.ICollection)">
            <summary>
            Determines whether the specified collection is null or empty.
            </summary>
            <param name="collection">The collection to test.</param>
            <returns>
                <c>true</c> if if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.CollectionUtil.RemoveWhere``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Removes objects from the list based on a specfied predicate condition.
            All items that satisfy the condition will be removed from the list.
            </summary>
            <typeparam name="T">The type of item in the list.</typeparam>
            <param name="list">The list to remove items from.</param>
            <param name="condition">The predicate.  All items that satisfy this condition will be removed from the list.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <summary>
            This attribute is used to inject the caller member name in C# 5.0
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <summary>
            This attribute is used to inject the caller file path in C# 5.0
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <summary>
            This attribute is is used to inject the caller line # in C# 5.0
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ContentTypeConverter">
            <summary>
            Manages the conversion of boolean type to/from ToggleState values. 
            This is referenced by RadTreeView control, when checkboxes are enabled.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ITargetTypeValueParser">
            <summary>
            This interface is sort of similar to IValueParser, but instead of being able to convert
            just a single type, this interface allows for possible conversion of an entire family of types.
            For example, generic types can be supported, as can interfaces.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ITargetTypeValueParser.CanParse(System.Type)">
            <summary>
            Determines whether this parser is capable of parsing the specified type.
            </summary>
            <param name="targetType">Type type to check to see if this converter can convert it.</param>
            <returns>
            <c>true</c> if this parser can parse the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ITargetTypeValueParser.Parse(System.String,System.Type,System.Object)">
            <summary>
            Parses the specified string value into a complex object.
            </summary>
            <param name="valueStr">The string value to parse.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="context">A value which is used for token value substitution.  Some converters
            can support substituting certain tokens with an actual object.  For example, maybe the $Feature can 
            be replaced with an actual feature object.  This value can be null.</param>
            <returns>The complex object, parsed from a string.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LargeStringConverter">
            <summary>
            Manages the conversion of a large string to a size that fits.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LargeStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Gets the appropriate size string for a large string by truncating it.
            </summary>
            <param name="value">The value</param>
            <param name="targetType">The taraget type</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>A truncated string.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LargeStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This function is not implemented
            </summary>
            <param name="value">The value</param>
            <param name="targetType">The taraget type</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>throws a NotImplementedException</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.DependencyObjectExtensions.FindChild(System.Windows.FrameworkElement,System.String)">
            <summary>
            Recursively finds a child element with the specified name.
            </summary>
            <param name="obj">The object to search.</param>
            <param name="name">The name of the element to look for.</param>
            <returns>The child with the specified name, or null if not found.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.DisabledOpacityConverter">
            <summary>
            This converter converts a True or False value to an opacity value.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.DisabledOpacityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Gets the appropriate opacity for a boolean Enabled value.
            </summary>
            <param name="value">The value</param>
            <param name="targetType">The target type</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>An opacity.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.DisabledOpacityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This function is not implemented
            </summary>
            <param name="value">The value</param>
            <param name="targetType">The target type</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>throws a NotImplementedException</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ExtentConverter">
            <summary>
            Converts objects that are or carry extents into extents.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ExtentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts various types into a <see cref="T:ESRI.ArcGIS.Client.Geometry.Envelope"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target Type.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The <see cref="T:System.Windows.Visibility"/> value.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ExtentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This function is not implemented
            </summary>
            <param name="value">The value</param>
            <param name="targetType">The taraget type</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>throws a NotImplementedException</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions">
            <summary>
            Provides extensions to ESRI's Geometry class. To use GeometryExtensions, you must specify a geometry service URI with Use().
            Only use GeometryExtensions if you don't care which specific GeometryService handles your request (e.g. you have no version constraints).
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.Use(System.String)">
            <summary>
            Specifies a GeometryService to use.
            </summary>
            <param name="geometryServiceUri">The GeometryService to use.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.GetService(System.String)">
            <summary>
            Creates a <see cref="T:ESRI.ArcGIS.Client.Tasks.GeometryService"/> using the given URL.
            </summary>
            <param name="url">The URL of the service.</param>
            <returns>The geometry service.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.MakeClockwise(ESRI.ArcGIS.Client.Geometry.Polygon,System.Action{ESRI.ArcGIS.Client.Geometry.Geometry})">
            <summary>
            Rewinds a polygon into clockwise winding order using a simplify operation.
            </summary>
            <param name="polygon">The polygon to rewind.</param>
            <param name="success">An Action to execute if the simplify succeeds, or the polygon is already clockwise.</param>
            <remarks>Note that you be passed a new polygon instance if the service is hit and succeeds, and the original polygon instance if the service is not hit.</remarks>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.Simplify(ESRI.ArcGIS.Client.Geometry.Polygon,System.Action{ESRI.ArcGIS.Client.Geometry.Geometry})">
            <summary>
            Simplifies a polygon using a GeometryService.
            </summary>
            <param name="geometry">The polygon to simplify.</param>
            <param name="success">A callback to fire upon success.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.Simplify(ESRI.ArcGIS.Client.Geometry.Geometry,System.Action{ESRI.ArcGIS.Client.Geometry.Geometry},System.Action{ESRI.ArcGIS.Client.Tasks.TaskFailedEventArgs})">
            <summary>
            Simplifies a polygon using a GeometryService.
            </summary>
            <param name="geometry">The polygon to simplify.</param>
            <param name="success">A callback to fire upon success.</param>
            <param name="failure">A callback to fire upon failure, including if success throws an unhandled exception.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.Simplify(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Action{System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic}},System.Action{ESRI.ArcGIS.Client.Tasks.TaskFailedEventArgs})">
            <summary>
            Simplifies a list of Graphics, firing a failure callback on error.
            </summary>
            <param name="graphics">The list of graphics to simplify.</param>
            <param name="success">A callback to fire upon success.</param>
            <param name="failure">A callback to fire upon failure, including if success throws an unhandled exception.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.SimplifyThenUnion(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Action{ESRI.ArcGIS.Client.Geometry.Geometry},System.Action{System.Exception})">
            <summary>
            Simplifies a list of Graphics then constructs the set-theoretic union of the geometries in the input collection. All inputs must be of the same type. .
            </summary>
            <param name="graphics">The list of graphics to simplify then union.</param>
            <param name="success">A callback to fire upon success.</param>
            <param name="failure">A callback to fire upon failure, including if success throws an unhandled exception.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.Union(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},System.Action{ESRI.ArcGIS.Client.Geometry.Geometry},System.Action{System.Exception})">
            <summary>
            Constructs the set-theoretic union of the geometries in the input collection. All inputs must be of the same type. .
            </summary>
            <param name="graphics">The list of graphics to union.</param>
            <param name="success">A callback to fire upon success.</param>
            <param name="failure">A callback to fire upon failure, including if success throws an unhandled exception.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.Project(ESRI.ArcGIS.Client.Geometry.Geometry,ESRI.ArcGIS.Client.Geometry.SpatialReference,System.Action{ESRI.ArcGIS.Client.Geometry.Geometry})">
            <summary>
            Projects Geometry from one coordinate system to another (well-known) coordinate system.
            </summary>
            <param name="geometry">The geometry to project.</param>
            <param name="spatialReference">The spatial reference of the target coordinate system.</param>
            <param name="success">A callback to fire upon success.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.Project(ESRI.ArcGIS.Client.Geometry.Geometry,ESRI.ArcGIS.Client.Geometry.SpatialReference,System.Action{ESRI.ArcGIS.Client.Geometry.Geometry},System.Action{ESRI.ArcGIS.Client.Tasks.TaskFailedEventArgs})">
            <summary>
            Projects a Geometry from one coordinate system to another (well-known) coordinate system, firing a failure callback on error.
            </summary>
            <param name="geometry">The geometry to project.</param>
            <param name="spatialReference">The spatial reference of the target coordinate system.</param>
            <param name="success">A callback to fire upon success.</param>
            <param name="failure">A callback to fire upon failure, including if success throws an unhandled exception.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.Project(System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic},ESRI.ArcGIS.Client.Geometry.SpatialReference,System.Action{System.Collections.Generic.IList{ESRI.ArcGIS.Client.Graphic}},System.Action{ESRI.ArcGIS.Client.Tasks.TaskFailedEventArgs})">
            <summary>
            Projects a list of Graphics from one coordinate system to another (well-known) coordinate system, firing a failure callback on error.
            </summary>
            <param name="graphics">The list of graphics to project.</param>
            <param name="spatialReference">The spatial reference of the target coordinate system.</param>
            <param name="success">A callback to fire upon success.</param>
            <param name="failure">A callback to fire upon failure, including if success throws an unhandled exception.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.Contains(ESRI.ArcGIS.Client.Geometry.Envelope,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Tests whether or not a point is contained in an extent. The point and the extent should be in the same coordinate system.
            </summary>
            <param name="extent">The extent.</param>
            <param name="point">The point.</param>
            <returns>Whether or not the point is contained in the extent.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.IsClockwise(ESRI.ArcGIS.Client.Geometry.Polygon)">
            <summary>
            Checks polygon winding order.
            </summary>
            <param name="polygon">The polygon to check.</param>
            <returns><value>True</value> if the polygon is wound clockwise.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.IsConvex(ESRI.ArcGIS.Client.Geometry.Polygon)">
            <summary>
            Checks whether or not a polygon is convex.
            </summary>
            <param name="polygon">The polygon to check.</param>
            <returns><value>True</value> if the polygon is convex.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.ScaleBy(ESRI.ArcGIS.Client.Geometry.Envelope,System.Double)">
            <summary>
            Expands or shrinks the envelope by the specified scale factor.  No shifting will occur
            with this method, and so the center of the envelope will be the same after scaling.
            </summary>
            <param name="envelope">The envelope.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>A new envelope, scaled or shrunk by the specified scale factor.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.ShiftTo(ESRI.ArcGIS.Client.Geometry.Envelope,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Shifts or reposotions the geometry to be centered on the specified map point.
            </summary>
            <param name="envelope">The envelope.</param>
            <param name="point">The point to reposition to.</param>
            <returns>An envelope, whose center is at the specified point.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryExtensions.FixAspectRatio(ESRI.ArcGIS.Client.Geometry.Envelope,ESRI.ArcGIS.Client.Geometry.Envelope)">
            <summary>
            Fixes the aspect ratio, such that the width or height of the envelope is expanded
            so that the aspect ratio of the envelope matches that of the reference envelope.
            </summary>
            <param name="envelope">The envelope, whose aspect ratio should be fixed.</param>
            <param name="reference">The reference envelope, to match the aspect ratio to.</param>
            <returns>A new envelope with the width or height adjusted to match the aspect
            ratio of the reference envelope.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties">
            <summary>
            A helper class containing attached properties for layers.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.IsUserCreatedProperty">
            <summary>
            Identifies the CanIdentify attached property.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.CanIdentifyProperty">
            <summary>
            Identifies the CanIdentify attached property.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.CanRemoveProperty">
            <summary>
            Identifies the CanRemove attached property.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.CanSearchProperty">
            <summary>
            Identifies the CanSearch attached property.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.CanSymbolizeProperty">
            <summary>
            Identifies the CanSymbolize attached property.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.HideWhenEmptyProperty">
            <summary>
            Identifies the HideWhenEmpty attached property.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.HideFromLayerListProperty">
            <summary>
            Identifies the HideFromLayerList attached property.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.FeatureLabelProperty">
            <summary>
            Identifies FeatureLabel attached property
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.GetIsUserCreated(System.Windows.DependencyObject)">
            <summary>
            Gets the IsUserCreated attached property value.
            </summary>
            <param name="obj">The obj.</param>
            <returns>The IsUserCreated property value</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.GetCanIdentify(System.Windows.DependencyObject)">
            <summary>
            Gets the CanIdentify attached property value.
            </summary>
            <param name="obj">The obj.</param>
            <returns>The CanIdentify attached property value</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.SetCanIdentify(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the CanIdentify attached property value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.GetCanRemove(System.Windows.DependencyObject)">
            <summary>
            Gets the CanRemove attached property value.
            </summary>
            <param name="obj">The obj.</param>
            <returns>The CanRemove attached property value</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.SetUserCreated(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the IsUserCreated attached property value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.SetCanRemove(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the CanRemove attached property value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.GetCanSearch(System.Windows.DependencyObject)">
            <summary>
            Gets the CanSearch attached property value.
            </summary>
            <param name="obj">The obj.</param>
            <returns>The CanSearch attached property value</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.SetCanSearch(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the CanSearch attached property value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.GetCanSymbolize(System.Windows.DependencyObject)">
            <summary>
            Gets the CanSymbolize attached property value.
            </summary>
            <param name="obj">The obj.</param>
            <returns>The CanSymbolize attached property value</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.SetCanSymbolize(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the CanSymbolize attached property value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.GetHideWhenEmpty(System.Windows.DependencyObject)">
            <summary>
            Gets the HideWhenEmpty attached property value.
            </summary>
            <param name="obj">The obj.</param>
            <returns>The HideWhenEmpty attached property value</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.GetHideFromLayerList(System.Windows.DependencyObject)">
            <summary>
            Gets the HideFromLayerList property value.
            </summary>
            <param name="obj">The obj.</param>
            <returns>The HideFromLayerList property value</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.SetHideWhenEmpty(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the HideWhenEmpty attached property value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.SetHideFromLayerList(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the HideFromLayerList property value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.GetFeatureLabel(System.Windows.DependencyObject)">
            <summary>
            Gets the FeatureLabel attached property value.
            </summary>
            <param name="obj">The obj.</param>
            <returns>The FeatureLabel attached property value</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.LayerAttachedProperties.SetFeatureLabel(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the FeatureLabel attached property value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapExtensions">
            <summary>
            Extensions for the ESRI Map class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapExtensions.AllLayersInitialized(ESRI.ArcGIS.Client.Map)">
            <summary>
            Determines if every layer in the map is initialized.
            </summary>
            <param name="map">The map.</param>
            <returns>True if the map is not null and every layer in the map is initialized; otherwise false.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapExtensions.FindIntersectingGraphics(ESRI.ArcGIS.Client.Map,ESRI.ArcGIS.Client.Geometry.Envelope,System.Collections.Generic.IList{ESRI.ArcGIS.Client.GraphicsLayer},System.Int32)">
            <summary>
            Finds the graphics within the extent specified in the specified list of layers.  If the layers parameter is null, search all visible graphics layers that appear in the map's layer list.
            </summary>
            <param name="map">The map.</param>
            <param name="extent">The extent.</param>
            <param name="layers">The layers.  If null, use all graphics layers that appear in the map's layer list.</param>
            <param name="pixelBuffer">The pixel buffer.  Default is 0.</param>
            <returns>A list of graphics within the extent specified of the specified list of layers.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapExtensions.FindIntersectingGraphics(ESRI.ArcGIS.Client.Map,ESRI.ArcGIS.Client.Geometry.Envelope,ESRI.ArcGIS.Client.GraphicsLayer,System.Int32)">
            <summary>
            Finds the graphics within the extent specified of the specified layer.
            </summary>
            <param name="map">The map.</param>
            <param name="extent">The extent.</param>
            <param name="layer">The layer.</param>
            <param name="pixelBuffer">The pixel buffer.  Default is 0.</param>
            <returns>A list of graphics within the extent specified of the specified layer.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapExtensions.FindIntersectingGraphics(ESRI.ArcGIS.Client.Map,System.Windows.Rect,ESRI.ArcGIS.Client.GraphicsLayer,System.Int32)">
            <summary>
            Finds the graphics within the extent specified of the specified layer.
            </summary>
            <param name="map">The map.</param>
            <param name="extent">The extent.</param>
            <param name="layer">The layer.</param>
            <param name="pixelBuffer">The pixel buffer.  Default is 0.</param>
            <returns>A list of graphics within the extent specified of the specified layer.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.NullToBooleanConverter">
            <summary>
            A converter to return true when a object is non-null and false when it is.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.NullToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.NullToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <remarks>
            This method is not implemented.
            </remarks>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
            <exception cref="T:System.NotImplementedException">This method always throws.</exception>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.CountFormatConverter">
            <summary>
            Manages the conversion of a count to a formatted string like (n)
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.CountFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Gets the appropriate formatted string for a count.
            </summary>
            <param name="value">The value</param>
            <param name="targetType">The taraget type</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>A formatted count string.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.CountFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This function is not implemented
            </summary>
            <param name="value">The value</param>
            <param name="targetType">The taraget type</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>throws a NotImplementedException</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.StringToIntegerConverter">
            <summary>
            Manages the conversion of string type to/from integer values. 
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.SymbolUtil">
            <summary>
            A class that contains utility methods related to symbols.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.SymbolUtil.GetDefaultSymbol(ESRI.ArcGIS.Client.Geometry.Geometry)">
            <summary>
            Gets a new instance of the default symbol for the specified geometry type.
            </summary>
            <param name="geometry">The geometry.</param>
            <returns>The default symbol.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.SymbolUtil.ApplyControlTemplateWithAngle(ESRI.ArcGIS.Client.Symbols.TextSymbol)">
            <summary>
            Applies a control template to the text symbol that supports rotation angle.
            </summary>
            <remarks>
            This control template should be used in conjunction with the <see cref="P:Geocortex.Essentials.Client.TextSymbolAngleBinding.Angle"/> attached property. 
            </remarks>
            <param name="symbol">The symbol.</param>
            <exception cref="T:System.ArgumentNullException">If symbol is null.</exception>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.SymbolUtil.DefaultMarkerSymbol">
            <summary>
            Gets a new instance of the default marker symbol.
            </summary>
            <value>The default marker symbol.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.SymbolUtil.DefaultLineSymbol">
            <summary>
            Gets a new instance of the default line symbol.
            </summary>
            <value>The default line symbol.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.SymbolUtil.DefaultFillSymbol">
            <summary>
            Gets a new instance of the default fill symbol.
            </summary>
            <value>The default fill symbol.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.SymbolUtil.DefaultTextSymbol">
            <summary>
            Gets a new instance of the default text symbol.
            </summary>
            <value>The default text symbol.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.SystemExtensions">
            <summary>
            Extension methods for .NET classes.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.SystemExtensions.Between``1(``0,``0,``0)">
            <summary>
            Determines if a given value is between two other values, using a range inclusive test.
            </summary>
            <typeparam name="T">The type, which must be an IComparable.</typeparam>
            <param name="comparable">The value to compare.</param>
            <param name="a">The first value in the range.</param>
            <param name="b">The second value in the range.</param>
            <returns>True if the value is between a and b, inclusive.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.SystemExtensions.ApproximatelyEquals(System.Double,System.Double,System.Double)">
            <summary>
            Determines if two doubles are approximately equal based on the tolerance (fudge factor) specified.
            </summary>
            <param name="double1">The first double.</param>
            <param name="double2">The second double.</param>
            <param name="tolerance">The tolerance is the fudge factor.</param>
            <returns><c>true</c> if the two doubles are approximately equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.DictionaryParser">
            <summary>
            Parses a string into a System.Collections.Generic.IDictionary&lt;&gt;.
            The string should be in the format "key1=value1&amp;key2=value2&amp;keyn=valuen" (like a URL query string).
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.TimeExtentConverter.PrintHelperStruct">
            <summary>
            A struct used to group useful information about singular time values (e.g.: years, minutes, etc.)
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.TimeExtentConverter.PrintHelperStruct.Value">
            <summary>
            Gets or sets the time value.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.TimeExtentConverter.PrintHelperStruct.ValueMax">
            <summary>
            Gets or sets the maximum allowed value.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.TimeExtentConverter.PrintHelperStruct.Label">
            <summary>
            Gets or sets the string label for this value.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.TimeUtils.FromUnixTime(System.Int64)">
            <summary>
            Converts the number of seconds since Jan 1, 1970 as a Date Time object. 
            </summary>
            <param name="unixTime">number of seconds since Jan 1, 1970</param>
            <returns>A date time</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.TimeUtils.ToUnixTime(System.DateTime)">
            <summary>
            Converts the DateTime to the number of milliseconds since Jan 1, 1970 as a long
            </summary>
            <param name="time">The DateTime to convert to UTC milliseconds since the epoch (Jan 1, 1970)</param>
            <returns>The number of milliseconds since the epoch.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.TwoLineTextConverter">
            <summary>
            A converter that formats text across two lines.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.TwoLineTextConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.TwoLineTextConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
            <exception cref="T:System.NotImplementedException">This method is not implemented and always throws.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.UIExtensions.GetSizeAndPosition(System.Windows.UIElement)">
            <summary>
            Gets the size and position of a UI element.
            </summary>
            <param name="element">The element.</param>
            <returns>The size and position.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Log.LogModule.Trace_TraceEvent(System.Object,Geocortex.Diagnostics.Client.TraceEventArgs)">
            <summary>
            Handle trace events coming from the client API.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The trace parameters</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Log.LogView">
            <summary>
            Initializes the log view user control component
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Log.LogView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Log.LogViewModel">
            <summary>
            View model.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Log.LogViewModel.OnTrace(Geocortex.EssentialsSilverlightViewer.Infrastructure.Diagnostics.TraceContext)">
            <summary>
            Called when a trace event arrives.
            </summary>
            <param name="context">The trace context</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Log.LogViewModel.ViewSource">
            <summary>
            Gets the view source.
            </summary>
            <value>The view source.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureAction">
            <summary>
            Represents an action that can be performed on a feature.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureAction.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureAction.CommandName">
            <summary>
            Gets or sets the name of the command.
            </summary>
            <value>The name of the command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureAction.Module">
            <summary>
            Gets or sets the name of the module that contains the command implementation.
            </summary>
            <value>The module.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureAction.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureAction.HideWhenDisabled">
            <summary>
            Gets or sets a value indicating whether the action should show or become invisible when disabled.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureSetAction">
            <summary>
            Represents an action that can be performed on a feature set.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureSetAction.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureSetAction.CommandName">
            <summary>
            Gets or sets the name of the command.
            </summary>
            <value>The name of the command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureSetAction.Module">
            <summary>
            Gets or sets the name of the module that contains the command implementation.
            </summary>
            <value>The module.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureSetAction.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.FeatureSetAction.HideWhenDisabled">
            <summary>
            Gets or sets a value indicating whether the action should display or become invisible when disabled.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ModuleConfiguration.Name">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ModuleConfiguration.Id">
            <summary>
            Gets or sets the Id of the module.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ModuleConfiguration.Views">
            <summary>
            Gets or sets the views for this ModuleConfiguration.
            </summary>
            <value>The views.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ModuleConfiguration.XmlConfiguration">
            <summary>
            Gets or sets the XML configuration.
            </summary>
            <value>The XML configuration.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ModuleConfiguration.LibraryUri">
            <summary>
            Gets or sets the library URI.
            </summary>
            <value>The library URI.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ModuleConfiguration.AssemblyQualifiedTypeName">
            <summary>
            Gets or sets the name of the assembly qualified name of the type of the module.
            </summary>
            <value>The name of the assembly qualified type.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ModuleConfiguration.InitializationMode">
            <summary>
            Gets or sets the initialization mode.
            </summary>
            <value>The initialization mode.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ModuleConfiguration.LibraryId">
            <summary>
            Gets or sets the xap id.
            </summary>
            <value>The xap id.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ModuleConfiguration.ConfiguredModule">
            <summary>
            Gets or sets the instance of the module that this configuration applies to.
            </summary>
            <value>The configured module.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLoader">
            <summary>
            Loads a configuration file from a Uri and returns a ConfigurationLibrary.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLoader.Load(System.Xml.Linq.XDocument)">
            <summary>
            Converts the supplied XDocument into a ConfigurationLibrary object.
            </summary>
            <param name="xdoc">The xdoc.</param>
            <returns>The ConfigurationLibrary.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLoader.Load(System.IO.Stream)">
            <summary>
            Loads configuration from the specified Uri into a ConfigurationLibrary instance.
            </summary>
            <param name="configStream">The configuration stream.</param>
            <returns>A configuration library based on the XML in the stream.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLoader.GetConfigurationUriFromUrl">
            <summary>
            Gets the configuration URI from the ViewerConfig query string parameter.
            </summary>
            <returns>The URI is specified in the query string; otherwise returns null</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLoader.IsDefaultId(System.String,System.String)">
            <summary>
            Determines whether the library ID matches the default library ID.
            </summary>
            <param name="libraryId">The library id.</param>
            <param name="defaultId">The default id.</param>
            <returns>
            <c>true</c> if it matches; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLoader.ParseElementOutterXml(System.Xml.Linq.XElement,System.String)">
            <summary>
            Parses the element outer XML and removes any namespace declaration on the element.
            </summary>
            <param name="xElement">The x element.</param>
            <param name="elementName">Name of the element.</param>
            <returns>The XML string of the current element, including the element itself.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLoader.SanitizeModule(Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ModuleConfiguration)">
            <summary>
            Sanitizes the module configuration by ensuring all values are valid.
            </summary>
            <param name="moduleConfig">The module config.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLoader.SanitizeView(Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewConfiguration,Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ModuleConfiguration)">
            <summary>
            Sanitizes the view by ensuring all values are valid.
            </summary>
            <param name="viewConfig">The view config.</param>
            <param name="moduleConfig">The module config.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Macro`1">
            <summary>
            RequestMacro represents a macro that can be invoked from the request parameters.
            </summary>
            <typeparam name="T">The parameter type of the Macro.</typeparam>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Macro`1.ExecutionOrder">
            <summary>
            Gets the execution order.  This allows for a certain amount of control over the order in which
            macros get executed.  Macros with lower numbers will be executed first, within a certain group.
            If it is still necessary that their dependencies are satisfied first, such that a macro
            with a higher ExecutionOrder will get executed before a macro with a lower ExecutionOrder if its
            dependencies are satisfied first.
            </summary>
            <value>The execution order.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MapHoverInfo">
            <summary>
            Holds information about a hover event on a map control.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MenuItem">
            <summary>
            Represents an item in the I Want To Menu list.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MenuItem.Dispatch">
            <summary>
            Dispatches a menu command.
            </summary>
            <returns>True if the the command succeeded, false if it didn't.</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MenuItem.HasCommand">
            <summary>
            Gets a value indicating whether or not a command is associated with this item.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MenuItem.HasSubItems">
            <summary>
            Gets a value indicating whether or not this item has sub-items.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MenuItem.IsVisible">
            <summary>
            Gets a value indicating whether a control using this model should be hidden rather than disabled when the command cannot execute.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MenuItem.CanDispatch">
            <summary>
            Gets a value indicating whether or not a command can dispatch.
            </summary>
            <returns>True if the the command succeeded, false if it didn't.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MenuItem.ItemType">
            <summary>
            The item type.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MenuItem.ItemType.Category">
            <summary>
            An item that holds one or more sub-items.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MenuItem.ItemType.Command">
            <summary>
            An item that runs a command when clicked.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.MenuItem.ItemType.Batch">
            <summary>
            An item that runs a sequence of commands.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.SearchAttributesParams">
            <summary>
            Represents simple attribute search parameters.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarButton">
            <summary>
            Represents a button in a toolbar.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarButtonBase">
            <summary>
            A base class for buttons in a toolbar.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarItem">
            <summary>
            A base class for all toolbar items
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarItem.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value>
            <c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarButtonBase.ImageUri">
            <summary>
            Gets or sets the image URI.
            </summary>
            <value>The image URI.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarButtonBase.Module">
            <summary>
            Gets or sets the module name that contains the handler for this tool's events.
            </summary>
            <remarks>
            This is optional if the module is loaded on startup.
            </remarks>
            <value>The module.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarButtonBase.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarButtonBase.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarButtonBase.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <remarks>
            The name should be unique and is used to associate this tool with its event handlers.
            </remarks>
            <value>The name.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarButtonBase.XmlConfiguration">
            <summary>
            Gets or sets the XML configuration.
            </summary>
            <value>The XML configuration.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarButton.Command">
            <summary>
            Gets or sets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarButton.CommandParameter">
            <summary>
            Gets or sets the command parameter.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarGroup">
            <summary>
            Represents a group in a toolbar.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarGroup"/> class.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarGroup.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarGroup.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarRegion">
            <summary>
            Represents a region in a toolbar.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarRegion.RegionName">
            <summary>
            Gets or sets the name of the region.
            </summary>
            <value>The name of the region.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarSplitter">
            <summary>
            Represents a splitter in a toolbar.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarTab">
            <summary>
            Represents a tab in a toolbar.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarTab.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarTab"/> class.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarTab.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarTab.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarTool">
            <summary>
            Represents a tool in a toolbar. A tool requires map interaction.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarTool.IsActive">
            <summary>
            Gets or sets a value indicating whether the tool is active.
            </summary>
            <value><c>true</c> if the tool is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarTool.IsSticky">
            <summary>
            Gets or sets whether this tool exhibits sticky tool behavior.  When a tool
            is sticky, it can be reused continuously until disabled.  When a tool is "non-sticky"
            it can only be used once, then it becomes inactive.
            </summary>
            <value>True if the tool is sticky; otherwise false.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarTool.DrawMode">
            <summary>
            Gets or sets the draw mode.
            </summary>
            <value>The draw mode.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarTool.Symbol">
            <summary>
            Gets or sets the symbol to use when drawing
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarTool.Command">
            <summary>
            Gets or sets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarTool.HelpText">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>The help text.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleInitializationStatus">
            <summary>
            The current status of the module used by ModuleTrackingState.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleInitializationStatus.NotStarted">
            <summary>
            The module is in its initial state.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleInitializationStatus.Downloading">
            <summary>
            The module is in the process of being downloaded.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleInitializationStatus.Downloaded">
            <summary>
            The module has been downloaded.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleInitializationStatus.Constructed">
            <summary>
            The module has been constructed.
            </summary>
        </member>
        <member name="F:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleInitializationStatus.Initialized">
            <summary>
            The module has been initialized.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleTracker">
            <summary>
            ModuleTracker is used to track the state of the modules configured in the ConfigurationLibrary.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleTracker.#ctor(Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ConfigurationLibrary,Microsoft.Practices.Prism.Modularity.IModuleManager)">
            <summary>
            adds each module from the library to the tracker then wires up the events
            </summary>
            <param name="configLibrary">The configuration library</param>
            <param name="moduleManager">The module manager</param>
            <exception cref="T:System.ArgumentNullException">If configLibrary or moduleManager is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleTracker.GetModuleAssemblies">
            <summary>
            Gets the module assemblies.
            </summary>
            <returns>The module assemblies.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleTrackingState">
            <summary>
            Provides tracking of a module's state for the quickstart.
            </summary>
            <remarks>
            This class is for demonstration purposes for the quickstart and not expected to be used in a real world application.
            </remarks>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleTrackingState.ModuleName">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <value>A string.</value>
            <remarks>
            This is a display string.
            </remarks>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleTrackingState.ModuleInitializationStatus">
            <summary>
            Gets or sets the current initialization status of the module.
            </summary>
            <value>A ModuleInitializationStatus value.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleTrackingState.ExpectedInitializationMode">
            <summary>
            Gets or sets how the module is expected to be initialized.
            </summary>
            <value>An InitializationMode value.</value>
            <remarks>
            The actual initialization mode is determined by the ModuleCatalog.
            </remarks>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleTrackingState.BytesReceived">
            <summary>
            Gets or sets the number of bytes received as the module is loaded.
            </summary>
            <value>A number of bytes.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleTrackingState.TotalBytesToReceive">
            <summary>
            Gets or sets the total bytes to receive to load the module.
            </summary>
            <value>A number of bytes.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ModuleTrackingState.DownloadProgressPercentage">
            <summary>
            Gets the percentage of BytesReceived/TotalByteToReceive.
            </summary>
            <value>A percentage number between 0 and 100.</value>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarInfo.LoadFromXml(System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolRegistry)">
            <summary>
            Loads the toolbar info from XML.
            </summary>
            <param name="xml">The XML.</param>
            <param name="toolRegistry">The tool registry. If a tool registry is provided 
            the all tools in the toolbar will be registered.</param>
            <returns>A toolbar info object.</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarInfo.StickyTools">
            <summary>
            Gets or sets a value indicating whether the tools in the toolbar should be sticky.  When a tool
            is sticky, it can be reused continuously until disabled.  When a tool is "non-sticky"
            it can only be used once, then it becomes inactive.
            </summary>
            <value>True if the tools in the toolbar are sticky; otherwise false.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarInfo.Tabs">
            <summary>
            Gets the tabs.
            </summary>
            <value>The tabs.</value>
            <exception cref="T:System.ArgumentNullException">If xml is null.</exception>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ViewerModule">
            <summary>
            ViewerModule is intended to be the base class for all of our viewer modules.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ViewerModule.Initialize(Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ModuleConfiguration)">
            <summary>
            Override this method to do module initialization.  If it exists, a ModuleConfiguration
            is passed into the Initialize method that can be used to do configuration based module
            custom functionality.
            </summary>
            <param name="moduleConfiguration">The module configuration.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ViewerModule.ApplyState(Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest)">
            <summary>
            Applies the state from the current project.
            </summary>
            <param name="manifest">The manifest.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ViewerModule.StoreState(Geocortex.EssentialsSilverlightViewer.Infrastructure.Projects.ProjectPartManifest)">
            <summary>
            Stores the state into the currently saved project.
            </summary>
            <param name="manifest">The manifest.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Modularity.ViewerModule.ModuleName">
            <summary>
            Gets the name of the module.  The default behaviour is to use the class name.  Furthermore,
            if the classname ends in "Module", the "Module" portion is dropped from the name.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ConfigurationRegionViewRegistry">
            <summary>
            A RegionViewRegistry specifically for registering views with regions from configuration.
            </summary>
            <remarks>
            The main purpose for this class is to maintain a list of Types that have been registered already and
            not allowing view Types registered through code to be registered more than once.  
            For example, the LayerListView could be registered with the DataRegion programmatically, and if another
            component tries to register a LayerListView with a different region, it will silently fail.  However,
            as configuration takes precedence over programmatic settings, configuration CAN add multiple views of the 
            same type.
            </remarks>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ConfigurationRegionViewRegistry.#ctor(Microsoft.Practices.Prism.Regions.IRegionViewRegistry,Microsoft.Practices.Prism.Regions.IRegionManager,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ConfigurationRegionViewRegistry"/> class.
            </summary>
            <param name="registry">The registry.</param>
            <param name="regionManager">The region manager.</param>
            <param name="locator">The locator.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ConfigurationRegionViewRegistry.GetContents(System.String)">
            <summary>
            Returns the contents associated with a region name.
            </summary>
            <param name="regionName">Region name for which contents are requested.</param>
            <returns>
            Collection of contents associated with the <paramref name="regionName"/>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ConfigurationRegionViewRegistry.RegisterViewWithRegion(System.String,System.Func{System.Object})">
            <summary>
            Registers a delegate that can be used to retrieve the content associated with a region name.
            </summary>
            <param name="regionName">Region name to which the <paramref name="getContentDelegate"/> will be registered.</param>
            <param name="getContentDelegate">Delegate used to retrieve the content associated with the <paramref name="regionName"/>.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ConfigurationRegionViewRegistry.RegisterViewWithRegion(System.String,System.Type)">
            <summary>
            Registers a content type with a region name.
            </summary>
            <param name="regionName">Region name to which the <paramref name="viewType"/> will be registered.</param>
            <param name="viewType">Content type to be registered for the <paramref name="regionName"/>.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ConfigurationRegionViewRegistry.RegisterFromConfiguration(Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewConfiguration,System.Type,System.Func{System.Object})">
            <summary>
            Registers a content type with a region name from configuration.
            </summary>
            <param name="viewConfig">The view config.</param>
            <param name="viewType">Type of the view.</param>
            <param name="getContentDelegate">The get content delegate.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ConfigurationRegionViewRegistry.RegisterFromConfiguration(Geocortex.EssentialsSilverlightViewer.Infrastructure.Configuration.ViewConfiguration,System.Type)">
            <summary>
            Registers a content type with a region name from configuration.
            </summary>
            <param name="viewConfig">The view config.</param>
            <param name="viewType">Type of the view.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ConfigurationRegionViewRegistry.CreateInstance(System.Type)">
            <summary>
            Creates an instance of a registered view <see cref="T:System.Type"/>. 
            </summary>
            <param name="type">Type of the registered view.</param>
            <returns>Instance of the registered view.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ConfigurationRegionViewRegistry.ShowView(System.String)">
            <summary>
            Shows the view in the registered region.
            </summary>
            <param name="viewId">The view id.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ConfigurationRegionViewRegistry.HideView(System.String)">
            <summary>
            Hides the view.
            </summary>
            <param name="viewId">The view id.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ConfigurationRegionViewRegistry.ActivateView(System.String)">
            <summary>
            Activates the view.
            </summary>
            <param name="viewId">The view id.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ConfigurationRegionViewRegistry.DeactivateView(System.String)">
            <summary>
            Deactivates the view.
            </summary>
            <param name="viewId">The view id.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ConfigurationRegionViewRegistry.ToggleViewVisiblity(System.String)">
            <summary>
            Toggles the view visibility.
            </summary>
            <param name="viewId">The view id.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ConfigurationRegionViewRegistry.EventAggregator">
            <summary>
            Gets or sets the event aggregator.
            </summary>
            <value>The event aggregator.</value>
        </member>
        <member name="E:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.ConfigurationRegionViewRegistry.ContentRegistered">
            <summary>
            Event triggered when a content is registered to a region name.
            </summary>
            <remarks>
            This event uses weak references to the event handler to prevent this service (typically a singleton) of keeping the
            target element longer than expected. For security reasons, to use weak delegates in Silverlight you must provide
            a delegate that is available in the public API of the class (no private or anonymous delegates allowed).
            </remarks>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.IDataInjection">
            <summary>
            This interface can be implemented by a view that wishes to have data injected into it.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Regions.IDataInjection.InjectData(System.Object)">
            <summary>
            Injects data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Shell.ShellManager">
            <summary>
            Used to manage the specification of shells and default shells.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Shell.ShellManager.#ctor(System.Windows.Controls.Panel)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Shell.ShellManager"/> class.
            </summary>
            <param name="mainContainer">The main container in which the shell will be added.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Shell.ShellManager.RegisterDefaultShell(System.Windows.UIElement)">
            <summary>
            Registers the default shell.  The default shell is the shell that is applied when there is no
            other shell registered with the ShellManager.
            </summary>
            <param name="shell">The shell.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Shell.ShellManager.RegisterShell(System.Windows.UIElement)">
            <summary>
            Registers a new shell with the ShellManager.  Only one non-default shell can be registered at
            a time.  Calling this method will replace a previously registered non-default shell.  Registering
            a shell using this method will cause the shell to override the default shell.
            </summary>
            <param name="shell">The shell.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Shell.ShellManager.ApplicableShell">
            <summary>
            Gets the shell registered with RegisterShell, otherwise returns the default shell,
            otherwise returns null.
            </summary>
            <value>The applicable shell.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Shell.ShellManager.DefaultShell">
            <summary>
            Gets the shell registered with the RegisterDefaultShell method.
            </summary>
            <value>The default shell.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolRegistry">
            <summary>
            A registry of tools.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolRegistry"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolRegistry.GetTool(System.String)">
            <summary>
            Gets the ToolbarTool for the given tool name..
            </summary>
            <param name="toolName">Name of the tool.</param>
            <returns>The tool if found; null if it is not found.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolRegistry.Register(Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarTool)">
            <summary>
            Registers the specified tool.
            </summary>
            <param name="tool">The tool.</param>
            <exception cref="T:System.ArgumentNullException">If tool is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolRegistry.Unregister(Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolbarTool)">
            <summary>
            Unregisters the specified tool.
            </summary>
            <param name="tool">The tool.</param>
            <exception cref="T:System.ArgumentNullException">If tool is null.</exception>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolRegistry.EventAggregator">
            <summary>
            Gets or sets the event aggregator.
            </summary>
            <value>The event aggregator.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Models.Toolbar.ToolRegistry.ActiveTool">
            <summary>
            Gets or sets the active tool.
            </summary>
            <value>The active tool.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.CommandCanExecuteConverter">
            <summary>
            This is a loosely typed generic converter class. Given a ICommand, it will return an object for true and one for false, 
            depending on whether the command can execute. 
            The Enabled and Disabled objects need to be typed appropriately when the converter is declared.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.CommandCanExecuteConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Gets the appropriate bool relative to whether the current map scale falls within the scale range of a layer.
            </summary>
            <param name="value">The value</param>
            <param name="targetType">The taraget type</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>An object depending on whether the command can execute</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.CommandCanExecuteConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This function is not implemented
            </summary>
            <param name="value">The value</param>
            <param name="targetType">The taraget type</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>throws a NotImplementedException</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.BooleanConditionConverter">
            <summary>
            Converts a boolean to a TrueValue or FalseValue, where TrueValue and FalseValue can be assigned to any value (of type object).
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.BooleanConditionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Gets the appropriate bool relative to whether the current map scale falls within the scale range of a layer.
            </summary>
            <param name="value">The value</param>
            <param name="targetType">The target type</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>An object depending on whether the command can execute</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.BooleanConditionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This function is not implemented
            </summary>
            <param name="value">The value</param>
            <param name="targetType">The target type</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>throws a NotImplementedException</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil">
            <summary>
            This class contains some general Geometry manipulation functions.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.GetExtent(System.Collections.Generic.IEnumerable{ESRI.ArcGIS.Client.Geometry.Geometry})">
            <summary>
            Calculates a bounding extent, given a collection of geometries.
            </summary>
            <param name="geometries">The collection of geometries to calculate bounds for.</param>
            <returns>An envelope that encapsulates all geometries in the given collection.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.EnvelopeToPolygon(ESRI.ArcGIS.Client.Geometry.Envelope)">
            <summary>
            Creates a polygon, given an Envelope.
            </summary>
            <param name="env">The envelope to turn into a polygon.</param>
            <returns>a polygon representation of an Envelope.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.IsClockwise(ESRI.ArcGIS.Client.Geometry.Polygon)">
            <summary>
            Determines whether or not an unclosed polygon is wound clockwise.
            </summary>
            <param name="poly">The polygon to examine.</param>
            <returns><value>True</value> if the polygon is ordered clockwise, <value>False</value> if it is not.</returns>
            <remarks>Use on unclosed polygons (polygons whose last point is not the same as the first)</remarks>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.IsConvex(ESRI.ArcGIS.Client.Geometry.Polygon)">
            <summary>
            Determines whether or not an unclosed polygon is convex.
            </summary>
            <param name="poly">The polygon to examine.</param>
            <returns><value>True</value> if the polygon is convex, <value>False</value> if not.</returns>
            <remarks>Use on unclosed polygons (polygons whose last point is not the same as the first)</remarks>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.PointInEnvelope(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.Envelope)">
            <summary>
            Checks whether a point intersects an envelope or not.
            </summary>
            <param name="point">The point to test.</param>
            <param name="envelope">The envelope with which to test intersection.</param>
            <returns>True if the point intersect the envelope, false otherwise.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.ClipEnvelope(ESRI.ArcGIS.Client.Geometry.Envelope,ESRI.ArcGIS.Client.Geometry.Envelope)">
            <summary>
            Clips one envelope against another. The return value is an envelope that represents envelopeToClip clipped as to
            fit in clipAgainst perfectly.
            </summary>
            <param name="envelopeToClip">The envelope to clip.</param>
            <param name="clipAgainst">The envelope to clip against.</param>
            <returns>An envelope clipped against clipAgainst. </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.ScaleEnvelope(ESRI.ArcGIS.Client.Geometry.Envelope,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Scales a provided envelope by the requested amount.
            </summary>
            <param name="envelope">The envelope.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>A scaled envelope.</returns>
            <exception cref="T:System.ArgumentNullException">If envelope or scaleFactor is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.ComputeDistance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Compute the distance between two points
            </summary>
            <param name="point1">The first point</param>
            <param name="point2">The second point</param>
            <returns>The distance</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.TranslateEnvelope(ESRI.ArcGIS.Client.Geometry.Envelope,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Translates a provided envelope by the requested amount.
            </summary>
            <param name="envelope">The envelope.</param>
            <param name="translation">The scale factor.</param>
            <returns>A translated envelope.</returns>
            <exception cref="T:System.ArgumentNullException">If envelope or translation is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.Length(ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Calculates the length of a vector.
            </summary>
            <param name="vector">The vector to calculate length for.</param>
            <returns>The length of the vector.</returns>
            <exception cref="T:System.ArgumentNullException">If vector is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.Normalize(ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Normalizes a vector, giving it a length of 1.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>A normalized vector.</returns>
            <exception cref="T:System.ArgumentNullException">If vector is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.Angle(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Calculates the angle (in Radians) between two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The angle between the two supplied vectors in Radians.</returns>
            <exception cref="T:System.ArgumentNullException">If a or b is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.CrossProduct(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Calculates a 2D cross product.
            </summary>
            <param name="a">Point A</param>
            <param name="b">Point B</param>
            <param name="origin">The origin by which these points relate.</param>
            <returns>The 2-dimensional cross product.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.DotProduct(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The dot product of a and b.</returns>
            <exception cref="T:System.ArgumentNullException">If a or b is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.PolygonMidpoint(ESRI.ArcGIS.Client.Geometry.PointCollection)">
            <summary>
            Calculates a polygon midpoint by the average method.
            </summary>
            <param name="points">The points that make up this polygon.</param>
            <returns>An approximation of the center of the polygon.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.LatitudeOfExtent(ESRI.ArcGIS.Client.Geometry.Envelope,Geocortex.Essentials.Client.DistanceUnit)">
            <summary>
            Given an extent, calculates a latitude using the midpoint of the extent.
            </summary>
            <param name="extent">The extent for which to calculate midpoint latitude. Must be in a geographic coordinate system.</param>
            <param name="geographicUnits">The units that the extent is in.</param>
            <returns>The latitude of the center of the extent.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.GeometryUtil.GetGcxGeometryType(ESRI.ArcGIS.Client.Geometry.Geometry)">
            <summary>
            Gets the Geocortex Layer GeometryType for a particular geometry.
            </summary>
            <param name="g">The geometry.</param>
            <returns>The Geocortex Layer GeometryType.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MacroFormatted`1">
            <summary>
            Specializes a type with MacroFormat. For readability. Note that if you wish to use ValueParserUtil.ParseSpecialized with runtime types, you must
            declare your types with Specialized.
            </summary>
            <typeparam name="T">The type to specialize with MacroFormat.</typeparam>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.Specialized`2">
            <summary>
            Offers type specialization that is useful when type signatures are used in maps or strategy patterns.
            </summary>
            <typeparam name="T">The specialization type representing the specialization of <typeparamref name="U"/>.</typeparam>
            <typeparam name="U">The type to specialize.</typeparam>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MacroFormat">
            <summary>
            Adds URL macro parameter decode logic to ValueParserUtil.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MacroFormat.Load">
            <summary>
            Causes the classloader to call the static initializer of MacroFormat.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapPointExtensions">
            <summary>
            Offers extension methods on the MapPoint class for convenience.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapPointExtensions.Angle(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Calculates the angle (in Radians) between point A and point B.
            </summary>
            <param name="a">Point A.</param>
            <param name="b">Point B.</param>
            <returns>The angle between points A and B, in Radians.</returns>
            <exception cref="T:System.ArgumentNullException">If a or b is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapPointExtensions.CrossProduct(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Calculates the 2D Cross Product between two points and an origin.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <param name="origin">The point that connects the two line segments joining <paramref name="a"/> and <paramref name="b"/></param>
            <returns>The Cross Product.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapPointExtensions.CrossProduct(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Calculates the 2D Cross Product between two points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>The Cross Product.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapPointExtensions.Distance(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Calculates the Euclidean distance between two points.
            </summary>
            <param name="a">Point A.</param>
            <param name="b">Point B.</param>
            <returns>The distance between points A and B.</returns>
            <exception cref="T:System.ArgumentNullException">If a or b is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapPointExtensions.DistanceGeodesic(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Calculates the geodesic distance between two points using the Haversine Formula.
            </summary>
            <param name="a">Point A.</param>
            <param name="b">Point B.</param>
            <returns>The geodesic distance between A and B.</returns>
            <exception cref="T:System.ArgumentNullException">If a or b is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapPointExtensions.DotProduct(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Calculates the Dot Product of point A and point B.
            </summary>
            <param name="a">Point A.</param>
            <param name="b">Point B.</param>
            <returns>The dot product of A and B.</returns>
            <exception cref="T:System.ArgumentNullException">If a or b is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapPointExtensions.Normalize(ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Normalizes a point.
            </summary>
            <param name="a">The point to normalize.</param>
            <returns>A new, normalized MapPoint.</returns>
            <exception cref="T:System.ArgumentNullException">If a is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapPointExtensions.Subtract(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Subtracts point B from point A.
            </summary>
            <param name="a">Point A.</param>
            <param name="b">Point B.</param>
            <returns>A new MapPoint representing the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException">If a or b is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapPointExtensions.Subtract(ESRI.ArcGIS.Client.Geometry.MapPoint,System.Double)">
            <summary>
            Subtracts a scalar value from a point.
            </summary>
            <param name="a">The point to subtract from.</param>
            <param name="scalar">The scalar value to subtract.</param>
            <returns>A new MapPoint representing the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException">If a is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapPointExtensions.Add(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint)">
            <summary>
            Adds a scalar value to a point.
            </summary>
            <param name="a">Point A.</param>
            <param name="b">Point B.</param>
            <returns>A new MapPoint representing the addition.</returns>
            <exception cref="T:System.ArgumentNullException">If a or b is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapPointExtensions.Add(ESRI.ArcGIS.Client.Geometry.MapPoint,System.Double)">
            <summary>
            Adds point B to point A.
            </summary>
            <param name="a">The point to add to.</param>
            <param name="scalar">The scalar value to add.</param>
            <returns>A new MapPoint representing the addition.</returns>
            <exception cref="T:System.ArgumentNullException">If a is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapPointExtensions.MultiplyBy(ESRI.ArcGIS.Client.Geometry.MapPoint,System.Double)">
            <summary>
            Multiplies a point by a scalar value.
            </summary>
            <param name="a">The point to multiply.</param>
            <param name="scalar">The scalar value to multiply by.</param>
            <returns>A new MapPoint representing the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If a is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapPointExtensions.DivideBy(ESRI.ArcGIS.Client.Geometry.MapPoint,System.Double)">
            <summary>
            Divides a point by a scalar.
            </summary>
            <param name="a">The point to divide.</param>
            <param name="scalar">The scalar value to divide by.</param>
            <returns>A new MapPoint representing the division.</returns>
            <exception cref="T:System.ArgumentNullException">If a is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.MapPointExtensions.ApproximatelyEquals(ESRI.ArcGIS.Client.Geometry.MapPoint,ESRI.ArcGIS.Client.Geometry.MapPoint,System.Double)">
            <summary>
            Determines if two map points are approximately equal based on the tolerance (fudge factor) specified.
            </summary>
            <param name="mapPoint1">The first map point.</param>
            <param name="mapPoint2">The second map point.</param>
            <param name="tolerance">The tolerance is the fudge factor.</param>
            <returns><c>true</c> if the two doubles are approximately equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.StringUtils.StringListToCommaDelimeted(System.Collections.Generic.IList{System.String})">
            <summary>
            Given a list of strings, format it into a comma delimited list
            </summary>
            <param name="stringList">The list in question</param>
            <returns>The comma delimited list</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.StringUtils.SafeEquals(System.String,System.String,System.StringComparison)">
            <summary>
            This is equivalent to string.Equals() except that it's extension method and so it is
            able to be called on a null value, which means you don't have to worry about null checks.
            This method will therefore never throw a NullReferenceException.
            </summary>
            <param name="a">The first value to compare.</param>
            <param name="b">The second value to compare.</param>
            <param name="comparison">The comparison type.</param>
            <returns><c>True</c> if a and b are equal, including if a and b are both null; <c>False</c> otherwise, including 
            if a or b is null, but not the other.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.StringUtils.IsDouble(System.String)">
            <summary>
            Determines whether the specified string is a double.
            </summary>
            <param name="s">The string to check to see if it's a double.</param>
            <returns>
            <c>true</c> if the specified string is a double; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.StringUtils.IsInteger(System.String)">
            <summary>
            Determines whether the specified string is an integer.
            </summary>
            <param name="s">The string to check to see if it's an integer.</param>
            <returns>
            <c>true</c> if the specified string is an integer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.StringUtils.AreAllDouble(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether every string in an enumerable is a double.
            </summary>
            <param name="strings">The strings to check.</param>
            <returns><c>true</c> if every string is a double; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.UnitUtil">
            <summary>
            Provides unit conversion functionality as well as some constants.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.UnitUtil.GetMapUnitsFromSite(Geocortex.Essentials.Client.Site,Geocortex.Essentials.Client.DistanceUnitType)">
            <summary>
            Attempts to get the map units from the primary service layer.
            </summary>
            <param name="site">The Site.</param>
            <param name="fallbackUnits">Units to return if the units of the map can't be deduced.</param>
            <returns>Either the units of the map, or the fallback value.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.UnitUtil.GetMapUnits(System.String,Geocortex.Essentials.Client.DistanceUnitType)">
            <summary>
            Converts known unit names into DistanceUnitType.
            </summary>
            <param name="unitName">The name of the unit.</param>
            <param name="fallbackUnits">The units to fallback to if a unit is not found for unitName.</param>
            <returns>A DistanceUnit for the string specified, or the fallback units.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.UnitUtil.GetCalculationType(System.String,Geocortex.Essentials.Client.LengthCalculationType)">
            <summary>
            Convert calculation type string into known <see cref="T:Geocortex.Essentials.Client.LengthCalculationType"/>.
            </summary>
            <param name="type">The name of the calculation type.</param>
            <param name="fallbackType">The type to fall back to if the type cannot be parsed.</param>
            <returns>Either the parsed calculation type or the fallback type.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.UnitUtil.ConvertDistanceToMeters(System.Double,ESRI.ArcGIS.Client.Actions.DistanceUnit)">
            <summary>
            Converts a distance to Meters.
            </summary>
            <param name="distance">The distance to convert to meters.</param>
            <param name="unit">The unit which the distance is in.</param>
            <returns>The distance in meters.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.UnitUtil.ConvertAreaToMeters(System.Double,ESRI.ArcGIS.Client.Actions.DistanceUnit)">
            <summary>
            Converts an area to square Meters.
            </summary>
            <param name="distance">The area to convert to square meters.</param>
            <param name="unit">The unit (squared) which the area is in.</param>
            <returns>The area in meters.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.UnitUtil.ConvertDistance(System.Double,ESRI.ArcGIS.Client.Actions.DistanceUnit,ESRI.ArcGIS.Client.Actions.DistanceUnit)">
            <summary>
            Converts a distance from one base unit to another.
            </summary>
            <param name="distance">The distance to convert.</param>
            <param name="from">The unit which the distance is in.</param>
            <param name="to">The unit which the distance should be converted to.</param>
            <returns>The converted distance.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.UnitUtil.ConvertArea(System.Double,ESRI.ArcGIS.Client.Actions.DistanceUnit,ESRI.ArcGIS.Client.Actions.DistanceUnit)">
            <summary>
            Converts an area from one base unit to another.
            </summary>
            <param name="distance">The area to convert.</param>
            <param name="from">The unit (squared) which the area is in.</param>
            <param name="to">The unit which the area should be converted to.</param>
            <returns>The converted area.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.UnitUtil.DegreesToRadians(System.Double)">
            <summary>
            Converts Degrees to radians.
            </summary>
            <param name="degrees">The amount to convert.</param>
            <returns>The converted amount.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.UnitUtil.RadiansToDegrees(System.Double)">
            <summary>
            Converts Radians to Degrees.
            </summary>
            <param name="degrees">The amount to convert.</param>
            <returns>The converted amount.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.UriUtil">
            <summary>
            A class with various Uri utils specific to the viewer infrastructure.
            </summary>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.UriUtil.ApplicationUri">
            <summary>
            Gets the Uri of the current running application directory.  If the application is being called
            from http://somehost/somedir/Viewer.html, then the Uri will be http://somehost/somedir/
            </summary>
            <value>The application URI.</value>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ValueParsersCommon">
            <summary>
            Contains parsing delegates for common types used in XML and URL configuration.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ValueParsersCommon.RegisterCommonTypes">
            <summary>
            Registers commonly used compound types.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ValueParsersCommon.RegisterSpecializedPrimitivesInvariantCulture``1">
            <summary>
            Registers default primitive parse behaviour specialized for type <typeparamref name="T"/>. If <typeparamref name="T"/> implies
            a data format, it should be string-parseable to obtain primitive types by their common parse routines.
            </summary>
            <typeparam name="T">The type to specialize primitive parsing for.</typeparam>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ValueParsersCommon.RegisterUnspecializedPrimitivesInvariantCulture">
            <summary>
            Registers default, unspecialized primitive parsers for the invariant culture.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ValueParsersCommon.Load">
            <summary>
            Calling this dummy function causes the classloader to call the static constructor of ValueParsersCommon.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ValueParserUtil">
            <summary>
            Maps types to parsing delegates and allows for easy parsing of any type.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ValueParserUtil.CanParse(System.Type)">
            <summary>
            Returns whether or not the given type can be parsed.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type can be parsed, false if not.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ValueParserUtil.Parse``1(System.String)">
            <summary>
            Executes a parsing delegate for type T, if available.
            </summary>
            <typeparam name="T">The type of object to parse.</typeparam>
            <param name="valueStr">The string to parse the object from.</param>
            <returns>True if successful, false if not.</returns>
            <exception cref="T:System.ArgumentNullException">If valueStr is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ValueParserUtil.Parse(System.Type,System.String)">
            <summary>
            Executes a parsing delegate for type T, if available.
            </summary>
            <param name="type">The type of object to parse.</param>
            <param name="valueStr">The string to parse the object from.</param>
            <returns>True if successful, false if not.</returns>
            <exception cref="T:System.ArgumentNullException">If valueStr is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ValueParserUtil.RegisterParser``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ParseDelegate{``0})">
            <summary>
            Registers a parsing delegate for type T.
            </summary>
            <typeparam name="T">The type to register a parsing delegate for.</typeparam>
            <param name="del">A parsing delegate for type T.</param>
            <exception cref="T:System.ArgumentNullException">If del is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ValueParserUtil.RegisterParser``1(Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ParseDelegate{``0},System.Boolean)">
            <summary>
            Registers a parsing delegate for type T. If it exists and replaceIfExists is true it will be replaced, otherwise if replaceIfExists
            is false an exception will be thrown.
            </summary>
            <typeparam name="T">The type to register a parsing delegate for.</typeparam>
            <param name="del">A parsing delegate for type T.</param>
            <param name="replaceIfExists">A boolean flag indicating whether an existing entry for T should be replaced.</param>
            <exception cref="T:System.ArgumentNullException">If del is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ValueParserUtil.UnregisterParser``1">
            <summary>
            Unregisters a parsing delegate for type T.
            </summary>
            <typeparam name="T">The type to unregister.</typeparam>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ValueParserUtil.GenericValueParser`1">
            <summary>
            GenericValueParser wraps a ParseDelegate and implements IValueParser, allowing a dictionary to be built based on various specializations of ParseDelegate.
            </summary>
            <typeparam name="T">The type of object to parse.</typeparam>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.VisibilityConverter">
            <summary>
            Manages the conversion of certain types to/from Visibility values.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.VisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts various types into a <see cref="T:System.Windows.Visibility"/>
            1. objects... if value==null then Collapsed else Visible
            2. boolean... if value==false then Collapsed else Visible
            3. integer or double... if value smaller or equal to numeric threshold property then Collapsed else Visible  
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target Type.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The <see cref="T:System.Windows.Visibility"/> value.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.VisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>A boolean which represents the Visibility... true=Visible, false=Collapsed</returns>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.VisibilityConverter.Invert">
            <summary>
            Gets or sets a value indicating whether the conversion result should be inverted.
            </summary>
            <value><c>true</c> if invert; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.VisibilityConverter.NumericThreshold">
            <summary>
            Gets or sets a numeric threshold that numbers passed to the converter will be visible if greater than threshold and collapsed otherwise.
            </summary>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ProgressTaskUtils">
            <summary>
            ProgressTaskUtils offers utility functions to interact with the visual progress status indicator.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ProgressTaskUtils.RegisterTask(System.String,System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ProgressTaskType,System.Int32)">
            <summary>
            Registers a progress task with a timeout.
            </summary>
            <param name="moduleName">The module name that the task belongs to.</param>
            <param name="taskName">The identifier that refers to the task within the module.</param>
            <param name="taskType">The type of task.</param>
            <param name="timeoutMs">The maximum time in milliseconds between pulses before the task is timed out.</param>
            <returns>The task parameter block.</returns>
            <exception cref="T:System.ArgumentNullException">If moduleName or taskName is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ProgressTaskUtils.RegisterTask(System.String,System.String,Geocortex.EssentialsSilverlightViewer.Infrastructure.Commands.ProgressTaskType)">
            <summary>
            Registers a progress task.
            </summary>
            <param name="moduleName">The module name that the task belongs to.</param>
            <param name="taskName">The identifier that refers to the task within the module.</param>
            <param name="taskType">The type of task.</param>
            <returns>The task parameter block.</returns>
            <exception cref="T:System.ArgumentNullException">If moduleName or taskName is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ProgressTaskUtils.UnregisterTask(System.String,System.String)">
            <summary>
            Unregisters a task.
            </summary>
            <param name="moduleName">The module name that the task belongs to.</param>
            <param name="taskName">The identifier that refers to the task within the module.</param>
            <returns>The task parameter block.</returns>
            <exception cref="T:System.ArgumentNullException">If moduleName or taskName is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ProgressTaskUtils.PulseTask(System.String,System.String)">
            <summary>
            Pulses a non-deterministic task, updating its attributes and keeping it alive.
            </summary>
            <param name="moduleName">The module name that the task belongs to.</param>
            <param name="taskName">The identifier that refers to the task within the module.</param>
            <returns>The task parameter block.</returns>
            <exception cref="T:System.ArgumentNullException">If moduleName or taskName is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ProgressTaskUtils.PulseTask(System.String,System.String,System.String)">
            <summary>
            Pulses a non-deterministic task, updating its attributes and keeping it alive.
            </summary>
            <param name="moduleName">The module name that the task belongs to.</param>
            <param name="taskName">The identifier that refers to the task within the module.</param>
            <param name="description">The description of the task.</param>
            <returns>The task parameter block.</returns>
            <exception cref="T:System.ArgumentNullException">If moduleName, taskName or description is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ProgressTaskUtils.PulseTask(System.String,System.String,System.Double)">
            <summary>
            Pulses a deterministic task, updating its attributes and progress value, keeping it alive.
            </summary>
            <param name="moduleName">The module name that the task belongs to.</param>
            <param name="taskName">The identifier that refers to the task within the module.</param>
            <param name="progress">The progress of the task.</param>
            <returns>The task parameter block.</returns>
            <exception cref="T:System.ArgumentNullException">If moduleName or taskName is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ProgressTaskUtils.CompleteTask(System.String,System.String)">
            <summary>
            Marks a task as successfully completed.
            </summary>
            <param name="moduleName">The module name that the task belongs to.</param>
            <param name="taskName">The identifier that refers to the task within the module.</param>
            <returns>The task parameter block.</returns>
            <exception cref="T:System.ArgumentNullException">If moduleName or taskName is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ProgressTaskUtils.CancelTask(System.String,System.String)">
            <summary>
            Cancels a task.
            </summary>
            <param name="moduleName">The module name that the task belongs to.</param>
            <param name="taskName">The identifier that refers to the task within the module.</param>
            <returns>The task parameter block.</returns>
            <exception cref="T:System.ArgumentNullException">If moduleName or taskName is null.</exception>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ReverseFractionConverter">
            <summary>
            Manages the conversion of a value to its reverse fraction.
            For example 0.3 will be converted to (1 - 0.3 = 0.7).
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ReverseFractionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a numeric value between 0 and 1 to its reverse fraction  
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target Type.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The reverse fraction.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.ReverseFractionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>A reversed fraction same as what Convert does.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.WeakDictionary`2">
            <summary>
            A generic dictionary, which allows both its keys and values
            to be garbage collected if there are no other references
            to them than from the dictionary itself.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <remarks>
            If either the key or value of a particular entry in the dictionary
            has been collected, then both the key and value become effectively
            unreachable. However, left-over WeakReference objects for the key
            and value will physically remain in the dictionary until
            RemoveCollectedEntries is called. This will lead to a discrepancy
            between the Count property and the number of iterations required
            to visit all of the elements of the dictionary using its
            enumerator or those of the Keys and Values collections. Similarly,
            CopyTo will copy fewer than Count elements in this situation.
            </remarks>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.BaseDictionary`2">
            <summary>
            Represents a dictionary mapping keys to values.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <remarks>
            Provides the plumbing for the portions of IDictionary&lt;TKey,TValue&gt; which can reasonably be implemented without any
            dependency on the underlying representation of the dictionary.
            </remarks>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.WeakReference`1">
            <summary>
            Adds strong typing to WeakReference.Target using generics. Also,
            the Create factory method is used in place of a constructor
            to handle the case where target is null, but we want the 
            reference to still appear to be alive.
            </summary>
            <typeparam name="T">The type of the reference</typeparam>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.XmlConfigUtil">
            <summary>
            XmlConfigUtil provides convenience functions for parsing configuration values from XML.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.XmlConfigUtil.GetConfigValue``1(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets a configuration value from the supplied XElement, throwing an exception if the element does not exist or parsing fails.
            </summary>
            <typeparam name="T">The type of value to obtain from configuration.</typeparam>
            <param name="configBlock">The XElement block to obtain the value from.</param>
            <param name="name">The name of element in the block.</param>
            <returns>An instance of type T parsed from the configuration.</returns>
            <exception cref="T:System.ArgumentNullException">If configBlock or name is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.XmlConfigUtil.GetConfigValue``1(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Gets a configuration value from the supplied XElement, throwing an exception if the element does not exist or parsing fails.
            </summary>
            <typeparam name="T">The type of value to obtain from configuration.</typeparam>
            <param name="configBlock">The XElement block to obtain the value from.</param>
            <param name="name">The name of element in the block.</param>
            <param name="attr">The name of the attribute in the element to parse.</param>
            <returns>An instance of type T parsed from the configuration.</returns>
            <exception cref="T:System.ArgumentNullException">If configBlock, name, or attr is null.</exception>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.XmlConfigUtil.TryGetConfigValue``1(System.Xml.Linq.XElement,System.String,``0@,``0)">
            <summary>
            Attempts to parse a value from the supplied XElement, returning false if unsuccessful and setting value to defaultValue.
            Uses the Invariant culture.
            </summary>
            <typeparam name="T">The type of value to obtain from configuration.</typeparam>
            <param name="configBlock">The XElement block to obtain the value from.</param>
            <param name="name">The name of element in the block.</param>
            <param name="value">The out value to set.</param>
            <param name="defaultValue">The default value to set the out value to in case of failure.</param>
            <returns>An instance of type T parsed from the configuration.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.XmlConfigUtil.TryGetConfigValue``1(System.Xml.Linq.XElement,System.String,System.String,``0@,``0)">
            <summary>
            Attempts to parse a value from the suppled XElement, returning false if unsuccessful and setting value to defaultValue.
            </summary>
            <typeparam name="T">The type of value to obtain from configuration.</typeparam>
            <param name="configBlock">The XElement block to obtain the value from.</param>
            <param name="name">The name of element in the block.</param>
            <param name="attr">The name of the attribute in the element to parse.</param>
            <param name="value">The out value to set.</param>
            <param name="defaultValue">The defaul value to set the out value to in case of failure.</param>
            <returns>An instance of type T parsed from the configuration.</returns>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.XmlConfigUtil.GetConfigValueImpl``1(System.Xml.Linq.XElement,System.String,System.String,``0@)">
            <summary>
            The implementation of the GetConfig functions.
            </summary>
            <typeparam name="T">The type of value to obtain from configuration.</typeparam>
            <param name="configBlock">The XElement block to obtain the value from.</param>
            <param name="name">The name of element in the block.</param>
            <param name="attr">The name of the attribute in the element to parse.</param>
            <param name="value">The out value to set.</param>
            <returns>An instance of type T parsed from the configuration.</returns>
        </member>
        <member name="T:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.XmlFormat">
            <summary>
            Adds specialized XML format types to ValueParserUtil.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Utils.XmlFormat.Load">
            <summary>
            Causes the classloader to call the static initializer of XmlFormat.
            </summary>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Workflow.ViewerWorkflowActivityDispatcher.HandleError(Geocortex.Essentials.Client.Workflow,System.Exception)">
            <summary>
            Handles the error.
            </summary>
            <param name="workflow">The workflow.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Workflow.ViewerWorkflowActivityDispatcher.ActivityBegin(Geocortex.Workflow.Client.ActivityContext)">
            <summary>
            Called when the client portion of an external activity is about to be dispatched.
            </summary>
            <param name="context">The context of the activity that is about to begin.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Workflow.ViewerWorkflowActivityDispatcher.ActivityComplete(Geocortex.Workflow.Client.ActivityContext)">
            <summary>
            Called when the client portion of an external activity is complete.
            </summary>
            <param name="context">The context of the activity that has just completed.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Workflow.ViewerWorkflowActivityDispatcher.WorkflowComplete(Geocortex.Essentials.Client.Workflow,System.Collections.ObjectModel.Collection{Geocortex.Workflow.Client.ArgumentInfo})">
            <summary>
            Called when the workflow is complete.
            </summary>
            <param name="workflow">The workflow that was completed.</param>
            <param name="outputs">The outputs of the workflow that has just completed.</param>
        </member>
        <member name="M:Geocortex.EssentialsSilverlightViewer.Infrastructure.Workflow.ViewerWorkflowActivityDispatcher.OnDispatchUnhandledActivity(Geocortex.Workflow.Client.ActivityContext)">
            <summary>
            Called during the dispatch phase when the dispatcher encounters an activity that
            cannot be handled.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Workflow.ViewerWorkflowActivityDispatcher.EventAggregator">
            <summary>
            Gets or sets the event aggregator.
            </summary>
            <value>The event aggregator.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Workflow.ViewerWorkflowActivityDispatcher.CommandRegistry">
            <summary>
            Gets or sets the command registry.
            </summary>
            <value>The command registry.</value>
        </member>
        <member name="P:Geocortex.EssentialsSilverlightViewer.Infrastructure.Workflow.ViewerWorkflowActivityDispatcher.IsBusy">
            <summary>
            Gets or sets a value that indicates whether the workflow controller is busy.
            </summary>
            <remarks>True to indicate the workflow controller is busy, otherwise, false.</remarks>
        </member>
    </members>
</doc>
